{"version":3,"sources":["../../../src/components/table/BTableHeader.ts"],"names":[],"mappings":"AAAA,SAAS,SAAT,QAA0B,4BAA1B;AACA,OAAO,YAAP,MAAyB,gBAAzB;AACA,SAAS,yBAAT,QAA0C,sBAA1C;AACA,SAAS,yBAAT,QAA0C,iCAA1C;AACA,SAAuB,CAAvB,QAAgC,KAAhC;AAMA,eAAc,SAAU,YAAV,CAAuB,KAAvB,EAAiD;AAAE,EAAA;AAAF,CAAjD,EAAwE;AACpF,QAAM;AAAE,IAAA,cAAF;AAAkB,IAAA,aAAlB;AAAiC,IAAA,OAAjC;AAA0C,IAAA;AAA1C,MAA0D,yBAAyB,EAAzF;AACA,QAAM,OAAO,GAAG,yBAAyB,EAAzC;AACA,QAAM,KAAK,GAAG,OAAO,CAAC,KAAR,CAAc,GAAd,CAAkB,MAAM,IACpC,CAAC,CACC,YADD,EAEC;AACE,IAAA,GAAG,EAAE,MAAM,CAAC,KADd;AAEE,IAAA;AAFF,GAFD,EAMC,KAND,CADW,CAAd;;AAUA,MAAI,WAAW,CAAC,KAAhB,EAAuB;AACrB,IAAA,KAAK,CAAC,OAAN,CACE,KAAK,CAAC,iBAAD,CAAL,GACI,CAAC,CACC,IADD,EAEC,KAAK,CAAC,iBAAD,CAAL,CAAyB;AACvB,MAAA,UAAU,EAAE,cAAc,CAAC,KADJ;AAEvB,MAAA,OAAO,EAAE,OAAO,CAAC,KAFM;AAGvB,MAAA,UAAU,EAAE,KAAK,CAAC,UAHK;AAIvB,6BAAuB;AAJA,KAAzB,CAFD,CADL,GAUI,CAAC,CAAC,IAAD,EAAO;AAAE,MAAA,KAAK,EAAE;AAAT,KAAP,EAAmC,CAClC,CAAC,CAAC,SAAD,EAAY;AACX,MAAA,UAAU,EAAE,cAAc,CAAC,KADhB;AAEX,MAAA,OAAO,EAAE,OAAO,CAAC,KAFN;AAGX,MAAA,UAAU,EAAE,KAAK,CAAC,UAHP;AAIX,6BAAuB;AAJZ,KAAZ,CADiC,CAAnC,CAXP;AAoBD;;AACD,SAAO,CAAC,CAAC,OAAD,EAAU,CAAC,CAAC,CAAC,IAAD,EAAO,KAAP,CAAF,CAAV,CAAR;AACD","sourcesContent":["import { BCheckbox } from '../form/checkbox/BCheckbox';\nimport BTableColumn from './BTableColumn';\nimport { useInjectedVisibleColumns } from './composables/shared';\nimport { useInjectedCheckableTable } from './composables/useCheckableTable';\nimport { SetupContext, h } from 'vue';\n\nexport interface BTableHeaderProps {\n  isDisabled?: boolean;\n}\n\nexport default function BTableHeader(props: BTableHeaderProps, { slots }: SetupContext) {\n  const { allRowsChecked, toggleAllRows, variant, isCheckable } = useInjectedCheckableTable();\n  const columns = useInjectedVisibleColumns();\n  const nodes = columns.value.map(column =>\n    h(\n      BTableColumn,\n      {\n        key: column.label,\n        column\n      },\n      slots\n    )\n  );\n  if (isCheckable.value) {\n    nodes.unshift(\n      slots['header.checkbox']\n        ? h(\n            'th',\n            slots['header.checkbox']({\n              modelValue: allRowsChecked.value,\n              variant: variant.value,\n              isDisabled: props.isDisabled,\n              'onUpdate:modelValue': toggleAllRows\n            })\n          )\n        : h('th', { class: 'checkbox-cell' }, [\n            h(BCheckbox, {\n              modelValue: allRowsChecked.value,\n              variant: variant.value,\n              isDisabled: props.isDisabled,\n              'onUpdate:modelValue': toggleAllRows\n            })\n          ])\n    );\n  }\n  return h('thead', [h('tr', nodes)]);\n}\n"],"sourceRoot":"","file":"BTableHeader.js"}