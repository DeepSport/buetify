{"version":3,"sources":["../../../../src/components/table/composables/useDraggableTable.ts"],"names":[],"mappings":"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","sourcesContent":["import { isNone, isSome, none, Option, some } from 'fp-ts/lib/Option';\nimport { ExtractPropTypes, shallowRef, toRef, computed } from 'vue';\nimport { constant, constVoid, FunctionN } from 'fp-ts/lib/function';\nimport { PropType, Ref, provide, inject } from 'vue';\nimport { BTableRow, eqBTableRowData } from '../shared';\n\ntype DropEffect = 'none' | 'copy' | 'link' | 'move';\n\ntype DragHandler = FunctionN<[DragEvent], void>;\n\ntype OnDragEffect = FunctionN<[BTableRow, DragEvent, number], void>;\n\nexport const BTableDraggablePropsDefinition = {\n  isDraggable: {\n    type: Boolean,\n    default: false\n  },\n  dropEffect: {\n    type: String as PropType<DropEffect>,\n    default: 'move' as const\n  },\n  onDragstart: {\n    type: Function as PropType<OnDragEffect>,\n    default: constant(constVoid)\n  },\n  onDragenter: {\n    type: Function as PropType<OnDragEffect>,\n    default: constant(constVoid)\n  },\n  onDragover: {\n    type: Function as PropType<OnDragEffect>,\n    default: constant(constVoid)\n  },\n  onDragleave: {\n    type: Function as PropType<OnDragEffect>,\n    default: constant(constVoid)\n  },\n  onDragend: {\n    type: Function as PropType<OnDragEffect>,\n    default: constant(constVoid)\n  },\n  onDrop: {\n    type: Function as PropType<OnDragEffect>,\n    default: constant(constVoid)\n  }\n};\n\nexport interface BTableDraggableProps extends ExtractPropTypes<typeof BTableDraggablePropsDefinition> {}\n\nexport interface UseDraggableTable {\n  isDraggable: Ref<boolean>;\n  isActive: Ref<boolean>;\n  target: Ref<Option<BTableRow>>;\n  useRowDragListeners: FunctionN<[BTableRow, number], Record<string, DragHandler>>;\n}\n\nconst USE_DRAGGABLE_TABLE_INJECTION_SYMBOL = Symbol();\n\nexport function useDraggableTable(props: BTableDraggableProps): UseDraggableTable {\n  const dropTarget = shallowRef(none as Option<BTableRow>);\n\n  const dragIsActive = computed(() => props.isDraggable && isSome(dropTarget.value));\n\n  function getOnDragStartListener(row: BTableRow, index: number): DragHandler {\n    return (e: DragEvent) => {\n      if (e.dataTransfer) {\n        e.dataTransfer.setData('text/plain', String(index));\n        e.dataTransfer.dropEffect = props.dropEffect;\n      }\n      dropTarget.value = some(row);\n      props.onDragstart(row, e, index);\n    };\n  }\n\n  function getOnDropListener(row: BTableRow, index: number): DragHandler {\n    return (e: DragEvent) => {\n      if (row.isDroppable) {\n        e.preventDefault();\n        props.onDrop(row, e, index);\n      }\n      dropTarget.value = none;\n    };\n  }\n\n  function getOnDragEnterListener(row: BTableRow, index: number): DragHandler {\n    return (e: DragEvent) => {\n      if (row.isDroppable) {\n        e.preventDefault();\n        dropTarget.value = some(row);\n        props.onDragenter(row, e, index);\n      }\n    };\n  }\n\n  function getOnDragOverListener(row: BTableRow, index: number): DragHandler {\n    return (e: DragEvent) => {\n      if (row.isDroppable) {\n        e.preventDefault();\n        const target = dropTarget.value;\n        if (isNone(target) || (isSome(target) && !eqBTableRowData.equals(target.value, row))) {\n          dropTarget.value = some(row);\n        }\n        props.onDragover(row, e, index);\n      }\n    };\n  }\n\n  function getOnDragLeaveListener(row: BTableRow, index: number): DragHandler {\n    return (e: DragEvent) => {\n      if (row.isDroppable) {\n        e.preventDefault();\n        const target = dropTarget.value;\n        if (isSome(target) && eqBTableRowData.equals(target.value, row)) {\n          dropTarget.value = none;\n        }\n        props.onDragleave(row, e, index);\n      }\n    };\n  }\n\n  function getOnDragEndListener(row: BTableRow, index: number): DragHandler {\n    return e => {\n      props.onDragend(row, e, index);\n      if (isSome(dropTarget.value)) {\n        dropTarget.value = none;\n      }\n    };\n  }\n\n  function useRowDragListeners(row: BTableRow, index: number): { [key: string]: DragHandler } {\n    if (props.isDraggable && !!row.isDraggable) {\n      return {\n        onDragstart: getOnDragStartListener(row, index),\n        onDrop: getOnDropListener(row, index),\n        onDragenter: getOnDragEnterListener(row, index),\n        onDragleave: getOnDragLeaveListener(row, index),\n        onDragover: getOnDragOverListener(row, index),\n        onDragend: getOnDragEndListener(row, index)\n      };\n    } else {\n      return {};\n    }\n  }\n\n  const draggableTable: UseDraggableTable = {\n    isDraggable: toRef(props, 'isDraggable'),\n    useRowDragListeners,\n    isActive: dragIsActive,\n    target: dropTarget\n  };\n\n  provide(USE_DRAGGABLE_TABLE_INJECTION_SYMBOL, draggableTable);\n\n  return draggableTable;\n}\n\nfunction useDefaultDraggableTable(): UseDraggableTable {\n  return {\n    isDraggable: shallowRef(false),\n    useRowDragListeners: constant({}),\n    isActive: shallowRef(false),\n    target: shallowRef(none)\n  };\n}\n\nexport function useInjectedDraggableTable(): UseDraggableTable {\n  return inject(USE_DRAGGABLE_TABLE_INJECTION_SYMBOL, useDefaultDraggableTable, true);\n}\n"],"sourceRoot":"","file":"useDraggableTable.js"}