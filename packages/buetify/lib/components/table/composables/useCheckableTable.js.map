{"version":3,"sources":["../../../../src/components/table/composables/useCheckableTable.ts"],"names":[],"mappings":"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","sourcesContent":["import { IO } from 'fp-ts/lib/IO';\nimport { ExtractPropTypes, computed, Ref, ComputedRef, provide, inject, shallowRef, watch } from 'vue';\nimport { constant, constFalse, constTrue, constVoid, FunctionN } from 'fp-ts/lib/function';\nimport { PropType } from 'vue';\nimport { ColorVariant } from '../../../types/ColorVariants';\nimport { constEmptyArray } from '../../../utils/helpers';\nimport { BTableRow, toggleBTableRow } from '../shared';\nimport { toSet } from './shared';\n\nexport const BTableCheckPropsDefinition = {\n  isCheckable: {\n    type: Boolean as PropType<boolean>,\n    default: false\n  },\n  checkedRows: {\n    type: Array as PropType<BTableRow[]>,\n    default: constEmptyArray()\n  },\n  'onUpdate:checkedRows': {\n    type: Function as PropType<FunctionN<[BTableRow[]], void>>,\n    default: constant(constVoid)\n  },\n  checkboxVariant: {\n    type: String as PropType<ColorVariant>,\n    default: 'is-primary' as const\n  },\n  canCheckAllRows: {\n    type: Boolean as PropType<boolean>,\n    default: true\n  },\n  onCheckRow: {\n    type: Function as PropType<FunctionN<[BTableRow], void>>,\n    default: constant(constVoid)\n  },\n  onUncheckRow: {\n    type: Function as PropType<FunctionN<[BTableRow], void>>,\n    default: constant(constVoid)\n  }\n};\n\nexport interface BTableCheckProps extends ExtractPropTypes<typeof BTableCheckPropsDefinition> {}\n\nconst USE_CHECKABLE_TABLE_INJECTION_SYMBOL = Symbol();\n\nexport function useCheckableTable(props: BTableCheckProps, rows: Ref<BTableRow[]>): UseCheckableTable {\n  const checkableRows = computed(() => (props.isCheckable ? rows.value.filter(row => row.isCheckable ?? true) : []));\n  const propCheckedRows = computed(() => (props.isCheckable ? props.checkedRows : []));\n  const newCheckedRows = shallowRef(propCheckedRows.value);\n\n  watch(propCheckedRows, newValue => {\n    newCheckedRows.value = newValue;\n  });\n\n  const checkedRowIds = computed(() => toSet(newCheckedRows.value));\n\n  const allRowsChecked = computed(() => {\n    const ids = checkedRowIds.value;\n    return checkableRows.value.length > 0 && checkableRows.value.every(row => ids.has(row.id));\n  });\n\n  const allRowsUncheckable = computed(() => rows.value.every(row => !row.isCheckable));\n\n  function checkAllRows() {\n    const cRows = checkableRows.value;\n    newCheckedRows.value = cRows;\n    props['onUpdate:checkedRows'](cRows);\n  }\n\n  function toggleRow(row: BTableRow) {\n    if (row.isCheckable) {\n      const ids = checkedRowIds.value;\n      if (ids.has(row.id)) {\n        props.onUncheckRow(row);\n      } else {\n        props.onCheckRow(row);\n      }\n      const cRows = toggleBTableRow(row, newCheckedRows.value);\n      newCheckedRows.value = cRows;\n      props['onUpdate:checkedRows'](cRows);\n    }\n  }\n\n  function uncheckAllRows() {\n    newCheckedRows.value = [];\n    props['onUpdate:checkedRows']([]);\n  }\n\n  function toggleAllRows() {\n    allRowsChecked.value ? uncheckAllRows() : checkAllRows();\n  }\n\n  const hasCheckableRows = computed(() => checkableRows.value.length > 0);\n\n  const state = {\n    isCheckable: computed(() => props.isCheckable),\n    variant: computed(() => props.checkboxVariant),\n    checkedRowIds,\n    toggleAllRows,\n    checkAllRows,\n    uncheckAllRows,\n    allRowsChecked,\n    toggleRow,\n    allRowsUncheckable,\n    hasCheckableRows,\n    allRowsUnchecked: computed(() => hasCheckableRows.value && checkedRowIds.value.size === 0)\n  };\n\n  provide(USE_CHECKABLE_TABLE_INJECTION_SYMBOL, state);\n\n  return state;\n}\n\nexport interface UseCheckableTable {\n  isCheckable: ComputedRef<boolean>;\n  variant: ComputedRef<ColorVariant>;\n  checkedRowIds: ComputedRef<Set<unknown>>;\n  toggleAllRows: IO<void>;\n  checkAllRows: IO<void>;\n  uncheckAllRows: IO<void>;\n  allRowsChecked: ComputedRef<boolean>;\n  toggleRow: FunctionN<[BTableRow], void>;\n  allRowsUncheckable: ComputedRef<boolean>;\n  hasCheckableRows: ComputedRef<boolean>;\n  allRowsUnchecked: ComputedRef<boolean>;\n}\n\nfunction useDefaultCheckableTableState(): UseCheckableTable {\n  return {\n    isCheckable: computed(constFalse),\n    variant: computed(() => 'is-primary'),\n    checkedRowIds: computed(() => new Set()),\n    toggleAllRows: constVoid,\n    checkAllRows: constVoid,\n    uncheckAllRows: constVoid,\n    toggleRow: constVoid,\n    allRowsChecked: computed(constFalse),\n    allRowsUncheckable: computed(constFalse),\n    hasCheckableRows: computed(constFalse),\n    allRowsUnchecked: computed(constTrue)\n  };\n}\n\nexport function useInjectedCheckableTable(): UseCheckableTable {\n  return inject(USE_CHECKABLE_TABLE_INJECTION_SYMBOL, useDefaultCheckableTableState, true);\n}\n"],"sourceRoot":"","file":"useCheckableTable.js"}