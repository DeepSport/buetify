{"version":3,"sources":["../../../../src/components/table/composables/useSortableTable.ts"],"names":[],"mappings":"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","sourcesContent":["import { findFirst, isEmpty, isNonEmpty, reverse, snoc, sortBy as sortBy_ } from 'fp-ts/lib/Array';\nimport { fromCompare, Ord } from 'fp-ts/lib/Ord';\nimport { Ordering } from 'fp-ts/lib/Ordering';\nimport { alt, isNone, isSome, none } from 'fp-ts/Option';\nimport { ExtractPropTypes, toRef, computed, Ref, watch, ComputedRef, shallowRef, provide, inject } from 'vue';\nimport { constFalse, constVoid, FunctionN, pipe } from 'fp-ts/lib/function';\nimport { PropType } from 'vue';\nimport { useProxy } from '../../../composables/proxy/useProxy';\nimport { constEmptyArray, isBoolean } from '../../../utils/helpers';\nimport { BTableColumn, BTableRow, SortType, toggleBTableColumn } from '../shared';\n\nexport const BTableSortingPropsDefinition = {\n  rows: {\n    type: Array as PropType<BTableRow[]>,\n    required: true as const\n  },\n  sortBy: {\n    type: [Object, Array] as PropType<BTableColumn | BTableColumn[]>\n  },\n  'onUpdate:sortBy': {\n    type: Function as PropType<FunctionN<[BTableColumn | BTableColumn[]], void>>\n  },\n  sortType: {\n    type: String as PropType<SortType>,\n    default: 'Descending' as const\n  },\n  'onUpdate:sortType': {\n    type: Function as PropType<FunctionN<[SortType], void>>\n  }\n};\n\nexport interface BTableSortingProps extends ExtractPropTypes<typeof BTableSortingPropsDefinition> {}\n\nexport interface UseSortableTable {\n  sortBy: Ref<BTableColumn[]>;\n  sortType: Ref<SortType>;\n  isMultiple: ComputedRef<boolean>;\n  sortByMap: ComputedRef<Map<string, BTableColumn & { sortIndex: number }>>;\n  updateSortColumn: FunctionN<[string], void>;\n  updateSortDirection: (columnLabel?: string) => void;\n  sortableColumns: ComputedRef<BTableColumn[]>;\n  hasSortableColumns: ComputedRef<boolean>;\n}\n\nfunction useSortType(sortType: SortType, columnSortType: SortType | undefined, invert: boolean): SortType {\n  if (invert) {\n    return (columnSortType ?? sortType) === 'Ascending' ? 'Descending' : 'Ascending';\n  } else {\n    return columnSortType ?? sortType;\n  }\n}\n\nfunction useSortColumn(sortType: SortType, column: BTableColumn, invert: boolean): BTableColumn {\n  return {\n    ...column,\n    sort: isBoolean(column.sort)\n      ? column.sort\n      : column.sort === undefined\n      ? undefined\n      : { ...column.sort, sortType: useSortType(sortType, column.sort?.sortType, invert) }\n  };\n}\n\nconst USE_SORTABLE_TABLE_INJECTION_SYMBOL = Symbol();\n\nfunction toMap(columns: BTableColumn[]): Map<string, BTableColumn & { sortIndex: number }> {\n  return new Map(columns.map((c, sortIndex) => [c.label, { ...c, sortIndex }]));\n}\n\nexport function useSortableTable(props: BTableSortingProps, rows: Ref<BTableRow[]>, columns: Ref<BTableColumn[]>) {\n  const initialSortType = props.sortType;\n\n  const { value: sortType } = useProxy(toRef(props, 'sortType'), toRef(props, 'onUpdate:sortType'));\n  /*\n    fp-ts sorts in ascending order so we need to reverse the ords if the initial sort type is 'Descending'\n    Future sortType changes just reverse the array so we don't need to readjust the ords\n   */\n\n  const isMultiple = computed(() => Array.isArray(props.sortBy));\n\n  const internalSortBy = shallowRef(Array.isArray(props.sortBy) ? props.sortBy : props.sortBy ? [props.sortBy] : []);\n\n  watch(\n    () => props.sortBy,\n    newVal => {\n      internalSortBy.value = Array.isArray(newVal) ? newVal : newVal ? [newVal] : [];\n    }\n  );\n\n  const sortBy = computed({\n    get() {\n      return internalSortBy.value;\n    },\n    set(columns: BTableColumn[]) {\n      internalSortBy.value = columns;\n      if (!props['onUpdate:sortBy']) {\n        return;\n      }\n      if (Array.isArray(props.sortBy)) {\n        props['onUpdate:sortBy'](columns);\n      } else if (isNonEmpty(columns)) {\n        props['onUpdate:sortBy'](columns[0]);\n      }\n    }\n  });\n\n  const sortByMap = computed(() => toMap(sortBy.value));\n\n  const ords = computed(() => {\n    const ords: Ord<BTableRow>[] = [];\n    sortBy.value.forEach(c => {\n      const sort = c.sort;\n      if (sort && !isBoolean(sort)) {\n        ords.push(\n          sort.sortType === 'Ascending' || (sort.sortType === undefined && initialSortType === 'Ascending')\n            ? sort.ord\n            : fromCompare((x, y) => {\n                return (sort.ord.compare(x, y) * -1) as Ordering;\n              })\n        );\n      }\n    });\n    return ords;\n  });\n\n  function sort() {\n    if (!isEmpty(ords.value) && !isEmpty(rows.value)) {\n      rows.value = sortBy_(ords.value)(rows.value);\n    }\n  }\n\n  watch(sortType, () => {\n    if (Array.isArray(sortBy.value) && sortBy.value.length > 1) {\n      sort();\n    } else {\n      rows.value = reverse(rows.value);\n    }\n  });\n\n  watch(() => [props.rows, sortBy.value], sort, {\n    immediate: true\n  });\n\n  const sortableColumns = computed(() => columns.value.filter(column => !!column.sort));\n\n  function updateSortColumn(label: string) {\n    const column = pipe(\n      sortBy.value,\n      findFirst(c => c.label === label),\n      alt(() =>\n        pipe(\n          sortableColumns.value,\n          findFirst(c => c.label === label)\n        )\n      )\n    );\n    if (isNone(column)) return;\n    if (isMultiple.value) {\n      sortBy.value = toggleBTableColumn(useSortColumn(sortType.value, column.value, false), sortBy.value);\n    } else {\n      sortBy.value = [column.value];\n    }\n  }\n\n  function updateSortDirection(columnLabel?: string) {\n    const column = columnLabel\n      ? pipe(\n          sortBy.value,\n          findFirst(c => c.label === columnLabel),\n          alt(() =>\n            pipe(\n              sortableColumns.value,\n              findFirst(c => c.label === columnLabel)\n            )\n          )\n        )\n      : none;\n    if (isMultiple.value && columnLabel && isSome(column)) {\n      const index = sortBy.value.findIndex(c => c.label === columnLabel);\n      const newColumn = useSortColumn(sortType.value, column.value, true);\n      if (index > -1) {\n        const newVal = sortBy.value.slice();\n        newVal.splice(index, 1, newColumn);\n        sortBy.value = newVal;\n      } else {\n        sortBy.value = snoc(sortBy.value, newColumn);\n      }\n    } else {\n      sortType.value = sortType.value === 'Ascending' ? 'Descending' : 'Ascending';\n    }\n  }\n\n  const sortableTable: UseSortableTable = {\n    sortBy,\n    sortType,\n    isMultiple,\n    sortByMap,\n    updateSortDirection,\n    updateSortColumn,\n    sortableColumns,\n    hasSortableColumns: computed(() => isNonEmpty(sortableColumns.value))\n  };\n\n  provide(USE_SORTABLE_TABLE_INJECTION_SYMBOL, sortableTable);\n\n  return sortableTable;\n}\n\nfunction useDefaultSortableTable(): UseSortableTable {\n  return {\n    sortBy: shallowRef([]),\n    sortType: shallowRef('Ascending'),\n    updateSortColumn: constVoid,\n    updateSortDirection: constVoid,\n    sortableColumns: computed(constEmptyArray),\n    hasSortableColumns: computed(constFalse),\n    isMultiple: computed(constFalse),\n    sortByMap: computed(() => new Map())\n  };\n}\n\nexport function useInjectedSortableTable(): UseSortableTable {\n  return inject(USE_SORTABLE_TABLE_INJECTION_SYMBOL, useDefaultSortableTable, true);\n}\n"],"sourceRoot":"","file":"useSortableTable.js"}