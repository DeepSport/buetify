{"version":3,"sources":["../../../src/components/sidebar/composables.ts"],"names":[],"mappings":"AAAA,SAAS,SAAT,QAA0B,oBAA1B;AACA,SAAS,IAAT,EAAuB,IAAvB,QAAmC,kBAAnC;AACA,SAAgC,UAAhC,EAAsD,QAAtD,EAAgE,OAAhE,EAAyE,MAAzE,QAAuF,KAAvF;AAEA,SAAuC,SAAvC,QAAwD,0BAAxD;AACA,SAAS,oBAAT,QAAqC,gDAArC;AAWA,MAAM,mCAAmC,GAAG,MAAM,CAAC,8BAAD,CAAlD;AAEA,OAAO,MAAM,uCAAuC,GAAG;AACrD,EAAA,YAAY,EAAE;AACZ,IAAA,QAAQ,EAAE;AADE,GADuC;AAIrD,EAAA,SAAS,EAAE;AACT,IAAA,IAAI,EAAE,OADG;AAET,IAAA,QAAQ,EAAE,KAFD;AAGT,IAAA,OAAO,EAAE,CAAC,CAAC,MAAF,IAAY,MAAM,CAAC,UAAP,GAAoB,oBAAoB,CAAC,KAArB,CAA2B;AAH3D,GAJ0C;AASrD,EAAA,QAAQ,EAAE;AACR,IAAA,IAAI,EAAE,OADE;AAER,IAAA,QAAQ,EAAE,KAFF;AAGR,IAAA,OAAO,EAAE;AAHD;AAT2C,CAAhD;AAkBP,MAAM,oCAAoC,GAAsB;AAC9D,EAAA,SAAS,EAAE,UAAU,CAAC,KAAD,CADyC;AAE9D,EAAA,KAAK,EAAE,UAAU,CAAC,IAAD,CAF6C;AAG9D,EAAA,SAAS,EAAE,UAAU,CAAC,IAAD,CAHyC;AAI9D,EAAA,IAAI,EAAE,SAJwD;AAK9D,EAAA,IAAI,EAAE,SALwD;AAM9D,EAAA,MAAM,EAAE;AANsD,CAAhE;AASA,OAAM,SAAU,oBAAV,GAA8B;AAClC,SAAO,MAAM,CAAC,mCAAD,EAAsC,oCAAtC,CAAb;AACD;AAED,OAAM,SAAU,wBAAV,CAAmC,KAAnC,EAAgF;AACpF,QAAM,MAAM,GAAG,SAAS,CAAC,KAAD,EAAQ,WAAR,CAAxB;AACA,QAAM,SAAS,GAAsB;AACnC,IAAA,SAAS,EAAE,MAAM,CAAC,IADiB;AAEnC,IAAA,SAAS,EAAE,QAAQ,CAAC,MAAM,IAAI,CAAC,MAAM,CAAC,SAAR,CAAX,CAFgB;AAGnC,IAAA,KAAK,EAAE,QAAQ,CAAC,MAAM,IAAI,CAAC,MAAM,CAAC,KAAP,CAAa,KAAd,CAAX,CAHoB;AAInC,IAAA,IAAI,EAAE,MAAM,CAAC,KAJsB;AAKnC,IAAA,IAAI,EAAE,MAAM,CAAC,MALsB;AAMnC,IAAA,MAAM,EAAE,MAAM,CAAC;AANoB,GAArC;AAQA,EAAA,OAAO,CAAC,mCAAD,EAAsC,SAAtC,CAAP;AACA,SAAO,SAAP;AACD","sourcesContent":["import { constVoid } from 'fp-ts/lib/function';\nimport { none, Option, some } from 'fp-ts/lib/Option';\nimport { Ref, ExtractPropTypes, shallowRef, PropType, computed, provide, inject } from 'vue';\nimport { IO } from 'fp-ts/lib/IO';\nimport { ToggleAttrs, ToggleListeners, useToggle } from '../../composables/toggle';\nimport { DEFAULT_BREAK_POINTS } from '../../composables/windowSize/provideWindowSize';\n\nexport interface SidebarController {\n  isVisible: Ref<boolean>;\n  attrs: Ref<Option<ToggleAttrs>>;\n  listeners: Ref<Option<ToggleListeners>>;\n  show: IO<void>;\n  hide: IO<void>;\n  toggle: IO<void>;\n}\n\nconst SIDEBAR_CONTROLLER_INJECTION_SYMBOL = Symbol('navigation-drawer-controller');\n\nexport const ProvideSidebarControllerPropsDefinition = {\n  currentRoute: {\n    required: false\n  },\n  isVisible: {\n    type: Boolean as PropType<boolean>,\n    required: false,\n    default: !!window && window.innerWidth > DEFAULT_BREAK_POINTS.value.desktop\n  },\n  hasPopup: {\n    type: Boolean as PropType<boolean>,\n    required: false,\n    default: true\n  }\n};\n\nexport type ProvideNavigationDrawerControllerProps = ExtractPropTypes<typeof ProvideSidebarControllerPropsDefinition>;\n\nconst DEFAULT_SIDEBAR_CONTROLLER_INJECTION: SidebarController = {\n  isVisible: shallowRef(false),\n  attrs: shallowRef(none),\n  listeners: shallowRef(none),\n  show: constVoid,\n  hide: constVoid,\n  toggle: constVoid\n};\n\nexport function useSidebarController(): SidebarController {\n  return inject(SIDEBAR_CONTROLLER_INJECTION_SYMBOL, DEFAULT_SIDEBAR_CONTROLLER_INJECTION);\n}\n\nexport function provideSidebarController(props: ProvideNavigationDrawerControllerProps) {\n  const toggle = useToggle(props, 'isVisible');\n  const injection: SidebarController = {\n    isVisible: toggle.isOn,\n    listeners: computed(() => some(toggle.listeners)),\n    attrs: computed(() => some(toggle.attrs.value)),\n    show: toggle.setOn,\n    hide: toggle.setOff,\n    toggle: toggle.toggle\n  };\n  provide(SIDEBAR_CONTROLLER_INJECTION_SYMBOL, injection);\n  return injection;\n}\n"],"sourceRoot":"","file":"composables.js"}