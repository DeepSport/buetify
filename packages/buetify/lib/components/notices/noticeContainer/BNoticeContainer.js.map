{"version":3,"sources":["../../../../src/components/notices/noticeContainer/BNoticeContainer.ts"],"names":[],"mappings":"AAAA,SAAS,SAAT,QAA0B,oBAA1B;AAGA,SAAS,gBAAT,QAAiC,iCAAjC;AAEA,SAAS,eAAT,EAA0B,CAA1B,EAA6B,UAAU,IAAI,UAA3C,EAAuD,QAAvD,EAAiE,QAAjE,EAA2E,QAA3E,QAA2F,KAA3F;AACA,SAAS,eAAT,QAAgC,wBAAhC;AAgBA,IAAI,EAAE,GAAG,CAAT;;AAEA,SAAS,cAAT,CAAwB,MAAxB,EAAsC;AACpC,SAAO,CAAC,CAAC,UAAD,EAAa;AAAE,IAAA,GAAG,EAAE,MAAM,CAAC,EAAd;AAAkB,OAAG,MAAM,CAAC,UAA5B;AAAwC,IAAA,aAAa,EAAE,MAAM,CAAC;AAA9D,GAAb,EAA2F,MAAM,CAAC,MAAlG,CAAR;AACD;;AAED,MAAM,gBAAgB,GAAG,eAAe,CAAC;AACvC,EAAA,IAAI,EAAE,oBADiC;;AAEvC,EAAA,KAAK,GAAA;AACH,UAAM,OAAO,GAAG,QAAQ,CAAC,EAAD,CAAxB;AAEA,UAAM,KAAK,GAAG,QAAQ,CAAC,MAAO,OAAO,CAAC,MAAR,GAAiB,CAAjB,GAAqB,CAAC,CAA9B,CAAtB;;AAEA,aAAS,SAAT,CAAmB,OAAnB,EAAyC;AACvC,YAAM,GAAG,GAAG,EAAE,EAAd;;AACA,eAAS,MAAT,GAAe;AACb,cAAM,KAAK,GAAG,OAAO,CAAC,SAAR,CAAkB,CAAC,IAAI,CAAC,CAAC,EAAF,KAAS,GAAhC,CAAd;;AACA,YAAI,KAAK,GAAG,CAAC,CAAb,EAAgB;AACd,UAAA,OAAO,CAAC,GAAR,CAAY,iBAAZ,EAA+B,GAA/B;AACA,UAAA,OAAO,CAAC,MAAR,CAAe,KAAf,EAAsB,CAAtB;AACD;AACF;;AACD,YAAM,SAAS,GAAW,QAAQ,CAAC;AACjC,QAAA,EAAE,EAAE,GAD6B;AAEjC,QAAA,MAAM,EAAE,eAFyB;AAGjC,QAAA,UAAU,EAAE,gBAAgB,CAAC,OAAO,CAAC,UAAT,CAHK;AAIjC,QAAA,YAAY,EAAE;AAJmB,OAAD,CAAlC;AAMA,MAAA,OAAO,CAAC,IAAR,CAAa,SAAb;AACA,MAAA,QAAQ,GAAG,IAAX,CAAgB,MAAK;AACnB,QAAA,SAAS,CAAC,MAAV,GAAmB,OAAO,CAAC,MAA3B;AACD,OAFD;AAGA,aAAO,MAAP;AACD;;AAED,aAAS,UAAT,CAAoB,MAApB,EAAyC;AACvC,UAAI,MAAM,CAAC,WAAP,IAAsB,OAAO,CAAC,MAAR,GAAiB,CAA3C,EAA8C;AAC5C,YAAI,MAAM,GAAG,SAAb;AACA,QAAA,UAAU,CAAC,MAAK;AACd,UAAA,MAAM,GAAG,UAAU,CAAC,MAAD,CAAnB;AACD,SAFS,EAEP,GAFO,CAAV;AAGA,eAAO,MAAK;AACV,UAAA,MAAM;AACP,SAFD;AAGD;;AACD,YAAM,YAAY,GAAG,SAAS,CAAC,MAAD,CAA9B;;AACA,UAAI,MAAM,CAAC,QAAP,KAAoB,CAAxB,EAA2B;AACzB,eAAO,YAAP;AACD,OAFD,MAEO;AACL,QAAA,UAAU,CAAC,YAAD,EAAe,MAAM,CAAC,QAAtB,CAAV;AACA,eAAO,YAAP;AACD;AACF;;AAED,WAAO;AACL,MAAA,KADK;AAEL,MAAA,UAFK;AAGL,MAAA;AAHK,KAAP;AAKD,GArDsC;;AAsDvC,EAAA,MAAM,GAAA;AACJ,WAAO,CAAC,CAAC,KAAD,EAAQ;AAAE,MAAA,KAAK,EAAE;AAAE,mBAAW,KAAK;AAAlB;AAAT,KAAR,EAA8C,KAAK,OAAL,CAAa,GAAb,CAAiB,cAAjB,CAA9C,CAAR;AACD;;AAxDsC,CAAD,CAAxC;AA6DA,eAAe,gBAAf","sourcesContent":["import { constVoid } from 'fp-ts/lib/function';\nimport { IO } from 'fp-ts/lib/IO';\nimport { VNode } from 'vue';\nimport { formatTransition } from '../../../composables/transition';\nimport { Transition, TransitionClasses } from '../../../types/Transition';\nimport { defineComponent, h, Transition as transition, computed, reactive, nextTick } from 'vue';\nimport { constEmptyArray } from '../../../utils/helpers';\n\nexport interface NoticeOptions {\n  render: IO<VNode[]>;\n  duration: number;\n  shouldQueue: boolean;\n  transition: Transition;\n}\n\nexport interface Notice {\n  id: number;\n  render: IO<VNode[] | undefined>;\n  transition: TransitionClasses;\n  onAfterLeave: IO<void>;\n}\n\nlet id = 0;\n\nfunction generateNotice(notice: Notice): VNode {\n  return h(transition, { key: notice.id, ...notice.transition, onAfterLeague: notice.onAfterLeave }, notice.render);\n}\n\nconst BNoticeContainer = defineComponent({\n  name: 'b-notice-container',\n  setup() {\n    const notices = reactive([] as Notice[]);\n\n    const rootZ = computed(() => (notices.length ? 1 : -1));\n\n    function addNotice(options: NoticeOptions): IO<void> {\n      const nId = id++;\n      function remove() {\n        const index = notices.findIndex(n => n.id === nId);\n        if (index > -1) {\n          console.log('removing notice', nId);\n          notices.splice(index, 1);\n        }\n      }\n      const newNotice: Notice = reactive({\n        id: nId,\n        render: constEmptyArray,\n        transition: formatTransition(options.transition),\n        onAfterLeave: remove\n      });\n      notices.push(newNotice);\n      nextTick().then(() => {\n        newNotice.render = options.render;\n      });\n      return remove;\n    }\n\n    function showNotice(params: NoticeOptions): IO<void> {\n      if (params.shouldQueue && notices.length > 0) {\n        let remove = constVoid;\n        setTimeout(() => {\n          remove = showNotice(params);\n        }, 250);\n        return () => {\n          remove();\n        };\n      }\n      const removeNotice = addNotice(params);\n      if (params.duration === 0) {\n        return removeNotice;\n      } else {\n        setTimeout(removeNotice, params.duration);\n        return removeNotice;\n      }\n    }\n\n    return {\n      rootZ,\n      showNotice,\n      notices\n    };\n  },\n  render() {\n    return h('div', { style: { 'z-index': this.rootZ } }, this.notices.map(generateNotice));\n  }\n});\n\nexport type NoticeContainer = InstanceType<typeof BNoticeContainer>;\n\nexport default BNoticeContainer;\n"],"sourceRoot":"","file":"BNoticeContainer.js"}