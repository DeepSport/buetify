{"version":3,"sources":["../../../src/composables/model/useModel.ts"],"names":[],"mappings":"AAAA,SAAS,QAAT,EAAmB,SAAnB,QAAqD,oBAArD;AACA,SAAmB,UAAnB,EAA+B,KAA/B,EAAsC,KAAtC,EAAkD,QAAlD,QAAkE,KAAlE;AACA,SAAS,MAAT,EAAiB,QAAjB,QAAiC,qBAAjC;AA2BA,OAAM,SAAU,0BAAV,CAIJ,QAAA,GAAqB,YAJjB,EAI2C,SAAA,GAAuB,qBAJlE,EAIoG;AACxG;AACA,SAAO;AACL,KAAC,QAAD,GAAY,IADP;AAEL,KAAC,SAAD,GAAa;AACX,MAAA,IAAI,EAAE,QADK;AAEX,MAAA,OAAO,EAAE,QAAQ,CAAC,SAAD;AAFN;AAFR,GAAP;AAOD;AAcD,OAAM,SAAU,QAAV,CACJ,KADI,EAEJ,QAAA,GAAqB,YAFjB,EAGJ,SAAA,GAAuB,qBAHnB,EAGqD;AAEzD,QAAM,aAAa,GAAuB,UAAU,CAAC,KAAK,CAAC,QAAD,CAAN,CAApD;AAEA,EAAA,KAAK,CAAC,KAAK,CAAC,KAAD,EAAQ,QAAR,CAAN,EAAyB,MAAM,IAAG;AACrC,IAAA,aAAa,CAAC,KAAd,GAAsB,MAAtB;AACD,GAFI,CAAL;AAIA,QAAM,KAAK,GAAG,QAAQ,CAAC;AACrB,IAAA,GAAG,GAAA;AACD,aAAO,aAAa,CAAC,KAArB;AACD,KAHoB;;AAIrB,IAAA,GAAG,CAAC,GAAD,EAAmB;AACpB,MAAA,aAAa,CAAC,KAAd,GAAsB,GAAtB;;AACA,UAAI,GAAG,KAAK,SAAZ,EAAuB;AACrB,QAAA,KAAK,CAAC,SAAD,CAAL,CAAiB,GAAjB;AACD;AACF;;AAToB,GAAD,CAAtB;;AAYA,WAAS,QAAT,CAAkB,CAAlB,EAA0B;AACxB;AACA;AACA,QAAI,QAAQ,CAAC,CAAC,CAAC,MAAH,CAAR,IAAsB,MAAM,CAAC,CAAC,CAAC,MAAF,CAAS,KAAV,CAAhC,EAAkD;AAChD;AACA;AACA,MAAA,KAAK,CAAC,KAAN,GAAc,CAAC,CAAC,MAAF,CAAS,KAAvB;AACD;AACF;;AAED,WAAS,GAAT,CAAa,GAAb,EAAmB;AACjB,IAAA,KAAK,CAAC,KAAN,GAAc,GAAd;AACD;;AAED,SAAO;AACL,IAAA,GADK;AAEL,IAAA,UAAU,EAAE,KAFP;AAGL,IAAA,aAAa,EAAE;AAHV,GAAP;AAKD","sourcesContent":["import { constant, constVoid, FunctionN, Lazy } from 'fp-ts/lib/function';\nimport { PropType, shallowRef, watch, toRef, Ref, computed } from 'vue';\nimport { exists, isObject } from '../../utils/helpers';\n\nexport function getUseModelPropsDefinition<T>(): {\n  modelValue: {\n    type: PropType<T>;\n    required: false;\n  };\n  'onUpdate:modelValue': {\n    type: PropType<FunctionN<[T], void>>;\n    default: Lazy<FunctionN<[T], void>>;\n  };\n};\nexport function getUseModelPropsDefinition<T, ValueKey extends string, UpdateKey extends string>(\n  valueKey: ValueKey,\n  updateKey: UpdateKey\n): {\n  [K in ValueKey]: {\n    type: PropType<T>;\n    required: false;\n  };\n} &\n  {\n    [K in UpdateKey]: {\n      type: PropType<FunctionN<[T], void>>;\n      default: Lazy<FunctionN<[T], void>>;\n    };\n  };\nexport function getUseModelPropsDefinition<\n  T,\n  ValueKey extends string = 'modelValue',\n  UpdateKey extends string = 'onUpdate:modelValue'\n>(valueKey: ValueKey = 'modelValue' as ValueKey, updateKey: UpdateKey = 'onUpdate:modelValue' as UpdateKey): any {\n  // eslint-disable-line\n  return {\n    [valueKey]: null,\n    [updateKey]: {\n      type: Function,\n      default: constant(constVoid)\n    }\n  };\n}\n\nexport type UseModelProps<\n  T,\n  ValueKey extends string = 'modelValue',\n  UpdateKey extends string = 'onUpdate:modelValue'\n> = { [K in ValueKey]?: T | undefined } & { [K in UpdateKey]: FunctionN<[T], void> };\n\nexport function useModel<T>(props: UseModelProps<T>): Model<T>;\nexport function useModel<T, ValueKey extends string, UpdateKey extends string>(\n  props: UseModelProps<T, ValueKey, UpdateKey>,\n  valueKey: ValueKey,\n  updateKey: UpdateKey\n): Model<T>;\nexport function useModel<T, ValueKey extends string = 'modelValue', UpdateKey extends string = 'onUpdate:modelValue'>(\n  props: UseModelProps<T, ValueKey, UpdateKey>,\n  valueKey: ValueKey = 'modelValue' as ValueKey,\n  updateKey: UpdateKey = 'onUpdate:modelValue' as UpdateKey\n): Model<T> {\n  const internalValue: Ref<T | undefined> = shallowRef(props[valueKey]);\n\n  watch(toRef(props, valueKey), newVal => {\n    internalValue.value = newVal;\n  });\n\n  const value = computed({\n    get() {\n      return internalValue.value;\n    },\n    set(val: T | undefined) {\n      internalValue.value = val;\n      if (val !== undefined) {\n        props[updateKey](val);\n      }\n    }\n  });\n\n  function onUpdate(e: Event) {\n    // eslint-disable-next-line\n    // @ts-ignore-next-line\n    if (isObject(e.target) && exists(e.target.value)) {\n      // eslint-disable-next-line\n      // @ts-ignore-next-line\n      value.value = e.target.value;\n    }\n  }\n\n  function set(val: T) {\n    value.value = val;\n  }\n\n  return {\n    set,\n    modelValue: value,\n    onNativeInput: onUpdate\n  };\n}\n\nexport type Model<T> = {\n  set: FunctionN<[T], void>;\n  modelValue: Ref<T | undefined>;\n  onNativeInput: FunctionN<[Event], void>;\n};\n"],"sourceRoot":"","file":"useModel.js"}