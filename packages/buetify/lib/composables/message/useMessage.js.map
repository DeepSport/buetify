{"version":3,"sources":["../../../src/composables/message/useMessage.ts"],"names":[],"mappings":"AAAA,SAAS,QAAT,QAAyB,oBAAzB;AACA,SAAS,oBAAT,EAAsE,QAAtE,QAAsF,KAAtF;AAEA,SAAS,2BAAT,EAAsC,SAAtC,QAAuD,WAAvD;AAQA,MAAM,qBAAqB,GAA0B;AACnD,aAAW,oBAAoB,CAAC,MAAM,OAAO,mCAAP,CAAP,CADoB;AAEnD,gBAAc,oBAAoB,CAAC,MAAM,OAAO,oCAAP,CAAP,CAFiB;AAGnD,gBAAc,oBAAoB,CAAC,MAAM,OAAO,4CAAP,CAAP,CAHiB;AAInD,eAAa,oBAAoB,CAAC,MAAM,OAAO,0CAAP,CAAP;AAJkB,CAArD;AAOA,OAAM,SAAU,eAAV,CAA0B,KAA1B,EAAsD;AAC1D,SAAO,EACL,GAAG,qBADE;AAEL,OAAG;AAFE,GAAP;AAID;AAED,OAAO,MAAM,yBAAyB,GAAG,EACvC,GAAG,2BAA2B,CAAC,UAAD,EAAa,IAAb,CADS;AAEvC,EAAA,KAAK,EAAE;AACL,IAAA,IAAI,EAAE;AADD,GAFgC;AAKvC,EAAA,UAAU,EAAE;AACV,IAAA,IAAI,EAAE,OADI;AAEV,IAAA,OAAO,EAAE;AAFC,GAL2B;AASvC,EAAA,OAAO,EAAE;AACP,IAAA,IAAI,EAAE;AADC,GAT8B;AAYvC,EAAA,OAAO,EAAE;AACP,IAAA,IAAI,EAAE,MADC;AAEP,IAAA,OAAO,EAAE;AAFF,GAZ8B;AAgBvC,EAAA,IAAI,EAAE;AACJ,IAAA,IAAI,EAAE,MADF;AAEJ,IAAA,OAAO,EAAE;AAFL,GAhBiC;AAoBvC,EAAA,QAAQ,EAAE;AACR,IAAA,IAAI,EAAE,MADE;AAER,IAAA,OAAO,EAAE;AAFD,GApB6B;AAwBvC,EAAA,YAAY,EAAE;AACZ,IAAA,IAAI,EAAE,OADM;AAEZ,IAAA,OAAO,EAAE;AAFG,GAxByB;AA4BvC,EAAA,QAAQ,EAAE;AACR,IAAA,IAAI,EAAE,MADE;AAER,IAAA,OAAO,EAAE;AAFD,GA5B6B;AAgCvC,EAAA,OAAO,EAAE;AACP,IAAA,IAAI,EAAE,OADC;AAEP,IAAA,OAAO,EAAE;AAFF,GAhC8B;AAoCvC,EAAA,KAAK,EAAE;AACL,IAAA,IAAI,EAAE,MADD;AAEL,IAAA,OAAO,EAAE,QAAQ,CAAC,qBAAD;AAFZ,GApCgC;AAwCvC,EAAA,IAAI,EAAE;AACJ,IAAA,IAAI,EAAE;AADF;AAxCiC,CAAlC;AA+CP,OAAM,SAAU,UAAV,CAAqB,KAArB,EAA2C;AAC/C,QAAM,MAAM,GAAG,SAAS,CAAC,KAAD,EAAQ,UAAR,CAAxB;AACA,QAAM,IAAI,GAAG,QAAQ,CAAC,MAAM,KAAK,CAAC,IAAN,IAAc,KAAK,CAAC,KAAN,CAAY,KAAK,CAAC,OAAlB,CAArB,CAArB;AACA,QAAM,QAAQ,GAAG,QAAQ,CAAC,MAAM,KAAK,CAAC,QAAN,IAAkB,KAAK,CAAC,IAAxB,IAAgC,UAAvC,CAAzB;;AACA,WAAS,YAAT,GAAqB;AACnB,QAAI,KAAK,CAAC,YAAV,EAAwB;AACtB,MAAA,UAAU,CAAC,MAAK;AACd,YAAI,MAAM,CAAC,IAAP,CAAY,KAAhB,EAAuB;AACrB,UAAA,MAAM,CAAC,MAAP;AACD;AACF,OAJS,EAIP,KAAK,CAAC,QAJC,CAAV;AAKD;AACF;;AACD,SAAO,EACL,GAAG,MADE;AAEL,IAAA,IAFK;AAGL,IAAA,QAHK;AAIL,IAAA;AAJK,GAAP;AAMD","sourcesContent":["import { constant } from 'fp-ts/lib/function';\nimport { defineAsyncComponent, PropType, ExtractPropTypes, Component, computed } from 'vue';\nimport { AllColorsVariant } from '../../types/ColorVariants';\nimport { getUseTogglePropsDefinition, useToggle } from '../toggle';\n\nexport type MessageSize = 'is-small' | 'is-medium' | 'is-large' | '';\n\nexport type MessageIcons = {\n  [K in AllColorsVariant]: Component;\n};\n\nconst DEFAULT_MESSAGE_ICONS: Partial<MessageIcons> = {\n  'is-info': defineAsyncComponent(() => import('../../components/icons/infoCircle')),\n  'is-success': defineAsyncComponent(() => import('../../components/icons/checkCircle')),\n  'is-warning': defineAsyncComponent(() => import('../../components/icons/exclamationTriangle')),\n  'is-danger': defineAsyncComponent(() => import('../../components/icons/exclamationCircle'))\n};\n\nexport function getMessageIcons(icons: Partial<MessageIcons>) {\n  return {\n    ...DEFAULT_MESSAGE_ICONS,\n    ...icons\n  };\n}\n\nexport const UseMessagePropsDefinition = {\n  ...getUseTogglePropsDefinition('isActive', true),\n  title: {\n    type: String as PropType<string>\n  },\n  isClosable: {\n    type: Boolean,\n    default: true\n  },\n  message: {\n    type: String as PropType<string>\n  },\n  variant: {\n    type: String as PropType<AllColorsVariant>,\n    default: '' as const\n  },\n  size: {\n    type: String as PropType<MessageSize>,\n    default: '' as const\n  },\n  iconSize: {\n    type: String as PropType<MessageSize>,\n    default: '' as const\n  },\n  useAutoClose: {\n    type: Boolean as PropType<boolean>,\n    default: false\n  },\n  duration: {\n    type: Number as PropType<number>,\n    default: 2000\n  },\n  useIcon: {\n    type: Boolean as PropType<boolean>,\n    default: false\n  },\n  icons: {\n    type: Object as PropType<Partial<MessageIcons>>,\n    default: constant(DEFAULT_MESSAGE_ICONS)\n  },\n  icon: {\n    type: Object as PropType<Component>\n  }\n};\n\nexport type UseMessageProps = ExtractPropTypes<typeof UseMessagePropsDefinition>;\n\nexport function useMessage(props: UseMessageProps) {\n  const toggle = useToggle(props, 'isActive');\n  const icon = computed(() => props.icon ?? props.icons[props.variant]);\n  const iconSize = computed(() => props.iconSize || props.size || 'is-large');\n  function setAutoClose() {\n    if (props.useAutoClose) {\n      setTimeout(() => {\n        if (toggle.isOn.value) {\n          toggle.setOff();\n        }\n      }, props.duration);\n    }\n  }\n  return {\n    ...toggle,\n    icon,\n    iconSize,\n    setAutoClose\n  };\n}\n\nexport type Message = ReturnType<typeof useMessage>;\n"],"sourceRoot":"","file":"useMessage.js"}