{"version":3,"sources":["../../../src/composables/fieldData/provideFieldData.ts"],"names":[],"mappings":"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","sourcesContent":["import { constVoid, FunctionN, not } from 'fp-ts/lib/function';\nimport { PropType, ExtractPropTypes, provide, shallowRef, computed, watch, toRef, Ref } from 'vue';\nimport { AllColorsVariant } from '../../types/ColorVariants';\nimport { isEmptyString, isString } from '../../utils/helpers';\nimport { useLabelId, UseLabelIdPropsDefinition } from '../labelId';\n\nexport const PROVIDE_FIELD_DATA_INJECTION_SYMBOL = Symbol('use-field-data');\n\nexport const ProvideFieldDataPropsDefinition = {\n  ...UseLabelIdPropsDefinition,\n  variant: {\n    type: [String, Object] as PropType<AllColorsVariant>,\n    required: false\n  },\n  message: {\n    type: [String, Array, Object] as PropType<\n      string | { [K: string]: boolean } | Array<string | { [K: string]: boolean }>\n    >,\n    required: false\n  },\n  isExpanded: {\n    type: Boolean as PropType<boolean>,\n    default: false\n  }\n};\n\nexport type ProvideFieldDataProps = ExtractPropTypes<typeof ProvideFieldDataPropsDefinition>;\n\nexport function formatMessage(\n  message: string | { [K: string]: boolean } | Array<string | { [K: string]: boolean }> | undefined\n): string {\n  if (isString(message)) {\n    return message;\n  } else {\n    const messages = [];\n    if (Array.isArray(message)) {\n      message.forEach(m => {\n        if (isString(m)) {\n          messages.push(m);\n        } else {\n          for (const key in m) {\n            if (m[key]) {\n              messages.push(key);\n            }\n          }\n        }\n      });\n    } else {\n      for (const key in message) {\n        if (message[key]) {\n          messages.push(key);\n        }\n      }\n    }\n    return messages.filter(not(isEmptyString)).join(' <br> ');\n  }\n}\n\nexport interface FieldDataAttrs {\n  label: Ref<string>;\n  isFullwidth: Ref<boolean>;\n  isExpanded: Ref<boolean>;\n  message: Ref<string>;\n  messageVariant: Ref<undefined | AllColorsVariant>;\n  id: Ref<string | undefined>;\n  labelId: Ref<string | undefined>;\n}\n\nexport interface FieldDataListeners {\n  onNewMessage: FunctionN<[string | { [K: string]: boolean } | Array<string | { [K: string]: boolean }>], void>;\n  onNewVariant: FunctionN<[AllColorsVariant], void>;\n}\n\nexport interface FieldDataInjection {\n  attrs: FieldDataAttrs;\n  setters: FieldDataListeners;\n}\n\nexport const DEFAULT_FIELD_DATA_INJECTION: FieldDataInjection = {\n  attrs: {\n    label: shallowRef(''),\n    isFullwidth: shallowRef(false),\n    isExpanded: shallowRef(false),\n    message: shallowRef(''),\n    messageVariant: shallowRef(),\n    id: shallowRef(),\n    labelId: shallowRef()\n  },\n  setters: {\n    onNewMessage: constVoid,\n    onNewVariant: constVoid\n  }\n};\n\nexport function provideFieldData(props: ProvideFieldDataProps) {\n  const label = useLabelId(props, 'field');\n  const variant = shallowRef(props.variant);\n  watch(toRef(props, 'variant'), newVariant => {\n    variant.value = newVariant;\n  });\n  const message = shallowRef(props.message);\n  watch(toRef(props, 'message'), newMessage => {\n    message.value = newMessage;\n  });\n  const formattedMessage = computed(() => formatMessage(message.value));\n\n  const isExpanded = toRef(props, 'isExpanded');\n\n  const attrs = {\n    label: toRef(props, 'label'),\n    isFullwidth: isExpanded,\n    isExpanded: isExpanded,\n    message: formattedMessage,\n    messageVariant: variant,\n    id: label.id,\n    labelId: label.labelId\n  };\n\n  const setters = {\n    onNewMessage: (newMessage: string | { [K: string]: boolean } | Array<string | { [K: string]: boolean }>) => {\n      message.value = newMessage;\n    },\n    onNewVariant: (newVariant: AllColorsVariant) => {\n      variant.value = newVariant;\n    }\n  };\n\n  const injection: FieldDataInjection = {\n    attrs,\n    setters\n  };\n\n  provide(PROVIDE_FIELD_DATA_INJECTION_SYMBOL, injection);\n\n  return injection;\n}\n"],"sourceRoot":"","file":"provideFieldData.js"}