{"version":3,"sources":["../../../src/composables/noticeController/useNoticeController.ts"],"names":[],"mappings":"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","sourcesContent":["import { constVoid, FunctionN } from 'fp-ts/lib/function';\nimport { IO } from 'fp-ts/lib/IO';\nimport { inject, PropType, ExtractPropTypes, VNode, shallowRef, onUnmounted, computed, Ref } from 'vue';\nimport { AllColorsVariant, ColorVariant } from '../../types/ColorVariants';\nimport { PositionVariant } from '../../types/PositionVariant';\nimport { Transition, TransitionClasses } from '../../types/Transition';\nimport { formatTransition } from '../transition';\nimport { DEFAULT_NOTICE_CONTROLLER_INJECTION, NOTICE_CONTROLLER_SYMBOL } from './provideNoticeController';\n\nexport const UseNoticePropsDefinition = {\n  transition: {\n    type: [Object, String] as PropType<Transition>,\n    required: false\n  },\n  position: {\n    type: String as PropType<PositionVariant>,\n    default: 'is-bottom' as const\n  },\n  duration: {\n    type: Number as PropType<number>,\n    default: 2000\n  },\n  message: {\n    type: String as PropType<string>\n  },\n  shouldQueue: {\n    type: Boolean as PropType<boolean>,\n    default: true\n  },\n  variant: {\n    type: String as PropType<ColorVariant>,\n    default: '' as const\n  },\n  isIndefinite: {\n    type: Boolean as PropType<boolean>,\n    default: false\n  }\n};\nexport interface UseNoticeProps extends ExtractPropTypes<typeof UseNoticePropsDefinition> {}\n\nexport const DEFAULT_USE_NOTICE_PROPS: UseNoticeProps = {\n  position: UseNoticePropsDefinition.position.default,\n  duration: UseNoticePropsDefinition.duration.default,\n  shouldQueue: UseNoticePropsDefinition.shouldQueue.default,\n  variant: UseNoticePropsDefinition.variant.default,\n  isIndefinite: UseNoticePropsDefinition.isIndefinite.default\n};\n\nfunction useNoticeTransition(props: UseNoticeProps = DEFAULT_USE_NOTICE_PROPS): Ref<TransitionClasses> {\n  return computed(() => {\n    if (props.transition) {\n      return formatTransition(props.transition);\n    } else {\n      switch (props.position) {\n        case 'is-top-right':\n        case 'is-top':\n        case 'is-top-left':\n          return {\n            'enter-active-class': 'fadeInDown',\n            'leave-active-class': 'fadeOutUp'\n          };\n        case 'is-bottom-right':\n        case 'is-bottom':\n        case 'is-bottom-left':\n          return {\n            'enter-active-class': 'fadeInUp',\n            'leave-active-class': 'fadeOutDown'\n          };\n      }\n    }\n  });\n}\n\nexport interface RenderNoticeOptions {\n  variant?: AllColorsVariant;\n  message?: string;\n  position?: PositionVariant;\n}\n\nexport interface OpenNoticeOptions extends RenderNoticeOptions {\n  duration?: number;\n  shouldQueue?: boolean;\n  transition?: Transition;\n  isIndefinite?: boolean;\n  onAction?: IO<void>;\n}\n\nexport function useNoticeController(props: UseNoticeProps, render: Ref<FunctionN<[RenderNoticeOptions], IO<VNode[]>>>) {\n  const remove = shallowRef(constVoid);\n  const { showNotice } = inject(NOTICE_CONTROLLER_SYMBOL, DEFAULT_NOTICE_CONTROLLER_INJECTION);\n  const transition = useNoticeTransition(props);\n  onUnmounted(() => {\n    remove.value();\n  });\n  function open(options: OpenNoticeOptions) {\n    const position = options.position ?? props.position;\n    remove.value();\n    remove.value = showNotice({\n      placement: position.includes('top') ? 'top' : 'bottom',\n      render: render.value(options),\n      transition: options.transition ?? transition.value,\n      shouldQueue: options.shouldQueue ?? props.shouldQueue,\n      duration: options.isIndefinite || props.isIndefinite ? 0 : options.duration ?? props.duration\n    });\n  }\n\n  return {\n    open: open,\n    close: () => {\n      remove.value();\n      remove.value = constVoid;\n    }\n  };\n}\n\nexport type NoticeController = ReturnType<typeof useNoticeController>;\n"],"sourceRoot":"","file":"useNoticeController.js"}