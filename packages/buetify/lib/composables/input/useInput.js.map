{"version":3,"sources":["../../../src/composables/input/useInput.ts"],"names":[],"mappings":"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","sourcesContent":["import { AllColorsVariant, ColorVariant } from '../../types/ColorVariants';\nimport { SizeVariant } from '../../types/SizeVariants';\nimport { isObject, isString } from '../../utils/helpers';\nimport { PropType, ExtractPropTypes, Ref, computed, toRefs, watch, shallowRef, toRef, reactive } from 'vue';\nimport { useFieldData } from '../fieldData';\nimport { useFocus, UseFocusPropsDefinition } from '../focus';\nimport { getUseModelPropsDefinition, useModel, UseModelProps } from '../model';\nimport { useToggle } from '../toggle';\nimport { useValidation, UseValidationPropsDefinition } from '../validation';\n\nexport const StaticUseInputProps = {\n  variant: {\n    type: String as PropType<ColorVariant>,\n    default: '' as const\n  },\n  type: {\n    type: String as PropType<string>\n  },\n  autocomplete: {\n    type: String as PropType<string>\n  },\n  placeholder: {\n    type: String as PropType<string>\n  },\n  size: {\n    type: String as PropType<SizeVariant>,\n    default: '' as SizeVariant\n  },\n  isRequired: {\n    type: Boolean,\n    default: false\n  },\n  isExpanded: {\n    type: Boolean as PropType<boolean>,\n    default: false\n  },\n  isLoading: {\n    type: Boolean as PropType<boolean>,\n    default: false\n  },\n  isRounded: {\n    type: Boolean as PropType<boolean>,\n    default: false\n  },\n  maxlength: {\n    type: [Number, String] as PropType<number | string>\n  },\n  icon: null,\n  usePasswordReveal: {\n    type: Boolean as PropType<boolean>,\n    default: undefined\n  },\n  ...UseValidationPropsDefinition,\n  ...UseFocusPropsDefinition\n};\n\ntype StaticInputProps = ExtractPropTypes<typeof StaticUseInputProps>;\n\nexport function getUseInputPropsDefinition<T>() {\n  return {\n    ...getUseModelPropsDefinition<T>(),\n    ...StaticUseInputProps\n  };\n}\n\nexport type UseInputProps<T> = UseModelProps<T> & StaticInputProps;\n\nfunction getIconSize(size?: SizeVariant) {\n  switch (size) {\n    case 'is-small':\n      return size;\n    default:\n      return '';\n  }\n}\n\nfunction getMessageVariant(variant: undefined | AllColorsVariant | Partial<{ [K in AllColorsVariant]: boolean }>) {\n  if (isString(variant)) {\n    return variant;\n  } else if (isObject(variant)) {\n    return Object.values(variant)[0] as any;\n  } else {\n    return undefined;\n  }\n}\n\nexport function useInput<T>(props: UseInputProps<T>, ref: Ref<HTMLElement>) {\n  const fieldData = useFieldData();\n  const isExpanded = computed(() => props.isExpanded || fieldData.attrs.isExpanded.value);\n  const model = useModel(props);\n  const validate = useValidation(props, ref);\n  const focus = useFocus(\n    reactive({\n      isFocused: toRef(props, 'isFocused'),\n      onFocus: toRef(props, 'onFocus'),\n      focusOnMount: toRef(props, 'focusOnMount'),\n      onBlur: (e?: Event) => {\n        if (props.onBlur) {\n          props.onBlur(e);\n        }\n        validate.validate();\n      }\n    }),\n    ref\n  );\n  // watch(model.modelValue, (newVal, oldVal) => {\n  //   if (newVal !== oldVal) {\n  //     validate.validate()\n  //   }\n  // });\n  const iconSize = computed(() => getIconSize(props.size));\n  const messageVariant = computed(() => getMessageVariant(fieldData.attrs.messageVariant.value));\n\n  const passwordToggle = useToggle({ isVisible: false, hasPopup: false }, 'isVisible');\n  const type = shallowRef(props.type);\n\n  const usePasswordReveal = computed(() => {\n    return props.type === 'password' && (props.usePasswordReveal === undefined || props.usePasswordReveal);\n  });\n\n  watch(toRef(props, 'type'), newVal => {\n    type.value = newVal;\n  });\n  watch(passwordToggle.isOn, newVal => {\n    type.value = newVal ? 'text' : 'password';\n  });\n  return {\n    ...toRefs(props),\n    ...fieldData.attrs,\n    ...fieldData.setters,\n    isExpanded,\n    isFullwidth: isExpanded,\n    messageVariant,\n    setters: fieldData.setters,\n    ...model,\n    ...focus,\n    ...validate,\n    iconSize,\n    type,\n    passwordToggle,\n    usePasswordReveal\n  };\n}\n\nexport type Input = ReturnType<typeof useInput>;\n"],"sourceRoot":"","file":"useInput.js"}