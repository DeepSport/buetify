{"version":3,"sources":["../../../src/composables/theme/provideTheme.ts"],"names":[],"mappings":"AAAA,SAAS,OAAT,EAAkB,OAAlB,QAAiC,qBAAjC;AACA,SAAS,QAAT,EAAmB,SAAnB,QAAoC,oBAApC;AACA,SAAS,SAAT,EAAoB,IAApB,EAAkC,IAAlC,QAA8C,kBAA9C;AACA,SAAS,OAAT,EAAkB,UAAlB,EAAmC,KAAnC,QAA4E,KAA5E;AAUA,OAAO,MAAM,uBAAuB,GAAmB;AACrD,EAAA,YAAY,EAAE,UAAU,CAAC,IAAD,CAD6B;AAErD,EAAA,WAAW,EAAE,UAAU,CAAC,KAAD,CAF8B;AAGrD,EAAA,QAAQ,EAAE;AAH2C,CAAhD;AAMP,OAAO,MAAM,sBAAsB,GAAG,MAAM,CAAC,OAAD,CAArC;AAEP,MAAM,eAAe,GAAG,SAAS,CAAe,QAAQ,CAAe,MAAf,CAAvB,CAAT,CACtB,OAAO,CAAC,OAAD,CAAP,EADsB,CAAxB;AAIA,OAAO,MAAM,2BAA2B,GAAG;AACzC,EAAA,WAAW,EAAE;AACX,IAAA,IAAI,EAAE,OADK;AAEX,IAAA,OAAO,EAAE;AAFE,GAD4B;AAKzC,EAAA,YAAY,EAAE;AACZ,IAAA,IAAI,EAAE,OADM;AAEZ,IAAA,OAAO,EAAE;AAFG;AAL2B,CAApC;AAaP,OAAM,SAAU,YAAV,CAAuB,KAAvB,EAA+C;AACnD,QAAM,WAAW,GAAG,UAAU,CAAC,KAAK,CAAC,WAAP,CAA9B;AACA,EAAA,KAAK,CACH,MAAM,KAAK,CAAC,WADT,EAEH,SAAS,IAAG;AACV,IAAA,WAAW,CAAC,KAAZ,GAAoB,SAApB;AACD,GAJE,CAAL;AAMA,QAAM,YAAY,GAAG,UAAU,CAAC,IAAI,CAAC,eAAD,CAAL,CAA/B;;AACA,WAAS,QAAT,CAAkB,QAAlB,EAAwC;AACtC,IAAA,YAAY,CAAC,KAAb,GAAqB,IAAI,CAAC,QAAD,CAAzB;;AACA,QAAI,KAAK,CAAC,YAAV,EAAwB;AACtB,MAAA,OAAO,CAAC,OAAD,EAAU,QAAV,CAAP;AACD;AACF;;AACD,QAAM,SAAS,GAAmB;AAChC,IAAA,WADgC;AAEhC,IAAA,YAFgC;AAGhC,IAAA;AAHgC,GAAlC;AAKA,EAAA,OAAO,CAAC,sBAAD,EAAyB,SAAzB,CAAP;AACA,SAAO;AACL,IAAA,QADK;AAEL,IAAA,YAFK;AAGL,IAAA;AAHK,GAAP;AAKD","sourcesContent":["import { getItem, setItem } from 'fp-ts-local-storage';\nimport { constant, constVoid } from 'fp-ts/lib/function';\nimport { getOrElse, none, Option, some } from 'fp-ts/lib/Option';\nimport { provide, shallowRef, Ref, watch, ExtractPropTypes, PropType } from 'vue';\n\nexport type ThemeVariant = 'dark' | 'light';\n\nexport interface ThemeInjection {\n  isThemeable: Ref<boolean>;\n  currentTheme: Ref<Option<ThemeVariant>>; // allows for easier defaults in injected component\n  setTheme: (theme: ThemeVariant) => void;\n}\n\nexport const DEFAULT_THEME_INJECTION: ThemeInjection = {\n  currentTheme: shallowRef(none),\n  isThemeable: shallowRef(false),\n  setTheme: constVoid\n};\n\nexport const THEME_INJECTION_SYMBOL = Symbol('theme');\n\nconst persistentTheme = getOrElse<ThemeVariant>(constant<ThemeVariant>('dark'))(\n  getItem('theme')() as Option<ThemeVariant>\n);\n\nexport const ProvideThemePropDefinitions = {\n  isThemeable: {\n    type: Boolean as PropType<boolean>,\n    default: true\n  },\n  persistTheme: {\n    type: Boolean as PropType<boolean>,\n    default: true\n  }\n};\n\nexport type ProvideThemeProps = ExtractPropTypes<typeof ProvideThemePropDefinitions>;\n\nexport function provideTheme(props: ProvideThemeProps) {\n  const isThemeable = shallowRef(props.isThemeable);\n  watch(\n    () => props.isThemeable,\n    themeable => {\n      isThemeable.value = themeable;\n    }\n  );\n  const currentTheme = shallowRef(some(persistentTheme));\n  function setTheme(newTheme: ThemeVariant) {\n    currentTheme.value = some(newTheme);\n    if (props.persistTheme) {\n      setItem('theme', newTheme)();\n    }\n  }\n  const injection: ThemeInjection = {\n    isThemeable,\n    currentTheme,\n    setTheme\n  };\n  provide(THEME_INJECTION_SYMBOL, injection);\n  return {\n    setTheme,\n    currentTheme,\n    isThemeable\n  };\n}\n"],"sourceRoot":"","file":"provideTheme.js"}