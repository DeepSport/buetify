{"version":3,"sources":["../../../src/composables/theme/useTheme.ts"],"names":[],"mappings":"AAAA,SAAS,MAAT,QAAuB,kBAAvB;AACA,SAAmB,MAAnB,EAA6C,QAA7C,QAA6D,KAA7D;AACA,SAAS,QAAT,QAAyB,oBAAzB;AAEA,SAAS,uBAAT,EAAkC,sBAAlC,QAAgF,gBAAhF;AAEA,OAAO,MAAM,uBAAuB,GAAkB;AACpD,EAAA,IAAI,EAAE,cAD8C;AAEpD,EAAA,KAAK,EAAE;AAF6C,CAA/C;AAKP,OAAM,SAAU,uBAAV,CAAkC,QAAlC,EAA2D,kBAAkB,GAAG,IAAhF,EAAoF;AACxF,SAAO;AACL,IAAA,QAAQ,EAAE;AACR,MAAA,IAAI,EAAE,MADE;AAER,MAAA,QAAQ,EAAE,KAFF;AAGR,MAAA,OAAO,EAAE,QAAQ,CAAC,QAAD;AAHT,KADL;AAML,IAAA,WAAW,EAAE;AACX,MAAA,IAAI,EAAE,OADK;AAEX,MAAA,QAAQ,EAAE,KAFC;AAGX,MAAA,OAAO,EAAE;AAHE;AANR,GAAP;AAYD;AAMD,OAAO,MAAM,2BAA2B,GAAG,uBAAuB,CAAC,uBAAD,EAA0B,IAA1B,CAA3D;AAEP,OAAM,SAAU,eAAV,CAA0B,QAA1B,EAAmD,cAAnD,EAAiF;AACrF,MAAI,cAAc,CAAC,WAAf,CAA2B,KAA3B,IAAoC,MAAM,CAAC,cAAc,CAAC,YAAf,CAA4B,KAA7B,CAA9C,EAAmF;AACjF,UAAM,OAAO,GAAG,QAAQ,CAAC,cAAc,CAAC,YAAf,CAA4B,KAA5B,CAAkC,KAAnC,CAAxB;AACA,WAAO,KAAK,CAAC,OAAN,CAAc,OAAd,IAAyB,OAAzB,GAAmC,CAAC,OAAD,CAA1C;AACD,GAHD,MAGO;AACL,WAAO,EAAP;AACD;AACF;AAED,OAAM,SAAU,QAAV,CAAmB,KAAnB,EAAqC;AACzC,QAAM,cAAc,GAAG,MAAM,CAAC,sBAAD,EAAyB,uBAAzB,CAA7B;AACA,QAAM,YAAY,GAAG,QAAQ,CAAC,MAAO,KAAK,GAAG,eAAe,CAAC,KAAK,CAAC,QAAP,EAAiB,cAAjB,CAAlB,GAAqD,EAAlE,CAA7B;AAEA,SAAO;AACL,IAAA,YAAY,EAAE,cAAc,CAAC,YADxB;AAEL,IAAA,QAAQ,EAAE,cAAc,CAAC,QAFpB;AAGL,IAAA,WAAW,EAAE,MAAK;AAChB,UAAI,MAAM,CAAC,cAAc,CAAC,YAAf,CAA4B,KAA7B,CAAV,EAA+C;AAC7C,YAAI,cAAc,CAAC,YAAf,CAA4B,KAA5B,CAAkC,KAAlC,KAA4C,OAAhD,EAAyD;AACvD,UAAA,cAAc,CAAC,QAAf,CAAwB,MAAxB;AACD,SAFD,MAEO;AACL,UAAA,cAAc,CAAC,QAAf,CAAwB,OAAxB;AACD;AACF;AACF,KAXI;AAYL,IAAA;AAZK,GAAP;AAcD","sourcesContent":["import { isSome } from 'fp-ts/lib/Option';\nimport { PropType, inject, ExtractPropTypes, computed } from 'vue';\nimport { constant } from 'fp-ts/lib/function';\nimport { ThemeColorMap } from '../../types/ThemeColorMap';\nimport { DEFAULT_THEME_INJECTION, THEME_INJECTION_SYMBOL, ThemeInjection } from './provideTheme';\n\nexport const DEFAULT_THEME_COLOR_MAP: ThemeColorMap = {\n  dark: 'is-black-ter',\n  light: ''\n};\n\nexport function useThemePropsDefinition(themeMap: ThemeColorMap, defaultIsThemeable = true) {\n  return {\n    themeMap: {\n      type: Object as PropType<ThemeColorMap>,\n      required: false,\n      default: constant(themeMap)\n    },\n    isThemeable: {\n      type: Boolean as PropType<boolean>,\n      required: false,\n      default: defaultIsThemeable\n    }\n  };\n}\n\nexport type ThemeProps = ExtractPropTypes<ReturnType<typeof useThemePropsDefinition>>;\n\nexport type FunctionalThemeProps = Partial<ThemeProps>;\n\nexport const DefaultThemePropsDefinition = useThemePropsDefinition(DEFAULT_THEME_COLOR_MAP, true);\n\nexport function getThemeClasses(themeMap: ThemeColorMap, themeInjection: ThemeInjection): string[] {\n  if (themeInjection.isThemeable.value && isSome(themeInjection.currentTheme.value)) {\n    const classes = themeMap[themeInjection.currentTheme.value.value];\n    return Array.isArray(classes) ? classes : [classes];\n  } else {\n    return [];\n  }\n}\n\nexport function useTheme(props?: ThemeProps) {\n  const themeInjection = inject(THEME_INJECTION_SYMBOL, DEFAULT_THEME_INJECTION);\n  const themeClasses = computed(() => (props ? getThemeClasses(props.themeMap, themeInjection) : []));\n\n  return {\n    currentTheme: themeInjection.currentTheme,\n    setTheme: themeInjection.setTheme,\n    toggleTheme: () => {\n      if (isSome(themeInjection.currentTheme.value)) {\n        if (themeInjection.currentTheme.value.value === 'light') {\n          themeInjection.setTheme('dark');\n        } else {\n          themeInjection.setTheme('light');\n        }\n      }\n    },\n    themeClasses\n  };\n}\n"],"sourceRoot":"","file":"useTheme.js"}