{"version":3,"sources":["../../../src/composables/windowSize/useWindowSize.ts"],"names":[],"mappings":"AAAA,SAAS,MAAT,EAAiB,IAAjB,QAA6B,kBAA7B;AACA,SAAS,UAAT,EAAqB,MAArB,EAA6B,QAA7B,QAA6C,KAA7C;AACA,SAAS,aAAT,EAAwB,kBAAxB,QAAuE,qBAAvE;AAEA,OAAM,SAAU,aAAV,GAAuB;AAC3B,QAAM,SAAS,GAAG,MAAM,CAAC,kBAAD,EAAqB;AAAE,IAAA,UAAU,EAAE,UAAU,CAAC,IAAD;AAAxB,GAArB,CAAxB;AACA,SAAO,QAAQ,CAAC,MACd,MAAM,CAAC,SAAS,CAAC,UAAV,CAAqB,KAAtB,CAAN,GAAqC,SAAS,CAAC,UAAV,CAAqB,KAArB,CAA2B,KAAhE,GAAwE,aAAa,GAAG,KAD3E,CAAf;AAGD","sourcesContent":["import { isSome, none } from 'fp-ts/lib/Option';\nimport { shallowRef, inject, computed } from 'vue';\nimport { getWindowSize, WINDOW_SIZE_SYMBOL, WindowSizeInjection } from './provideWindowSize';\n\nexport function useWindowSize() {\n  const injection = inject(WINDOW_SIZE_SYMBOL, { windowSize: shallowRef(none) } as WindowSizeInjection);\n  return computed(() =>\n    isSome(injection.windowSize.value) ? injection.windowSize.value.value : getWindowSize().value\n  );\n}\n"],"sourceRoot":"","file":"useWindowSize.js"}