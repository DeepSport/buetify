{"version":3,"sources":["../../src/utils/getThemeableFunctionalComponent.ts"],"names":[],"mappings":"AAAA,SAAS,MAAT,QAAuB,kBAAvB;AACA,SAAS,MAAT,EAAiB,CAAjB,EAAoB,eAApB,QAA2C,KAA3C;AACA,SACE,uBADF,EAEE,uBAFF,EAGE,eAHF,EAIE,uBAJF,EAKE,sBALF,QAQO,sBARP;AAUA,SAAS,YAAT,QAA6B,gBAA7B;AAYA,OAAM,SAAU,WAAV,CAAsB,KAAtB,EAAkD,SAAlD,EAA2E;AAC/E,SAAO,CAAC,CAAC,KAAK,CAAC,WAAR,IAAuB,CAAC,CAAC,KAAK,CAAC,QAA/B,IAA2C,MAAM,CAAC,SAAS,CAAC,YAAV,CAAuB,KAAxB,CAAxD;AACD;AAED,OAAM,SAAU,+BAAV,CAA0C;AAC9C,EAAA,GAD8C;AAE9C,EAAA,EAAE,GAAG,KAFyC;AAG9C,EAAA,QAAQ,GAAG;AAHmC,CAA1C,EAIsB;AAC1B,SAAO,eAAe,CAAC;AACrB,IAAA,KAAK,EAAE,EACL,GAAG,uBAAuB,CAAC,QAAD,EAAW,IAAX,CADrB;AAEL,MAAA,GAAG,EAAE;AACH,QAAA,IAAI,EAAE,CAAC,MAAD,EAAS,QAAT,CADH;AAEH,QAAA,OAAO,EAAE;AAFN;AAFA,KADc;;AAQrB,IAAA,KAAK,CAAC,KAAD,EAAQ;AAAE,MAAA;AAAF,KAAR,EAAiB;AACpB,YAAM,cAAc,GAAG,MAAM,CAAC,sBAAD,EAAyB,uBAAzB,CAA7B;AACA,aAAO,MACL,CAAC,CACC,KAAK,CAAC,GADP,EAEC;AACE,QAAA,KAAK,EAAE,WAAW,CAAC,KAAD,EAAQ,cAAR,CAAX,GACH,YAAY,CAAC,eAAe,CAAC,KAAK,CAAC,QAAP,EAAiB,cAAjB,CAAhB,EAAkD,GAAlD,CADT,GAEH;AAHN,OAFD,EAOC,KAAK,CAAC,OAAN,IAAiB,KAAK,CAAC,OAAN,EAPlB,CADH;AAUD;;AApBoB,GAAD,CAAtB;AAsBD","sourcesContent":["import { isSome } from 'fp-ts/lib/Option';\nimport { inject, h, defineComponent } from 'vue';\nimport {\n  DEFAULT_THEME_COLOR_MAP,\n  DEFAULT_THEME_INJECTION,\n  getThemeClasses,\n  useThemePropsDefinition,\n  THEME_INJECTION_SYMBOL,\n  ThemeInjection,\n  ThemeProps\n} from '../composables/theme';\nimport { ThemeColorMap } from '../types/ThemeColorMap';\nimport { mergeClasses } from './mergeClasses';\n\nexport interface ThemeableComponentOptions {\n  cls: string;\n  el?: string;\n  themeMap?: ThemeColorMap;\n}\n\nexport interface ThemeableComponentProps extends Partial<ThemeProps> {\n  tag?: string;\n}\n\nexport function isThemeable(props: Partial<ThemeProps>, injection: ThemeInjection): boolean {\n  return !!props.isThemeable && !!props.themeMap && isSome(injection.currentTheme.value);\n}\n\nexport function getThemeableFunctionalComponent({\n  cls,\n  el = 'div',\n  themeMap = DEFAULT_THEME_COLOR_MAP\n}: ThemeableComponentOptions) {\n  return defineComponent({\n    props: {\n      ...useThemePropsDefinition(themeMap, true),\n      tag: {\n        type: [String, Function],\n        default: el\n      }\n    },\n    setup(props, { slots }) {\n      const themeInjection = inject(THEME_INJECTION_SYMBOL, DEFAULT_THEME_INJECTION);\n      return () =>\n        h(\n          props.tag as any,\n          {\n            class: isThemeable(props, themeInjection)\n              ? mergeClasses(getThemeClasses(props.themeMap, themeInjection), cls)\n              : cls\n          },\n          slots.default && slots.default()\n        );\n    }\n  });\n}\n"],"sourceRoot":"","file":"getThemeableFunctionalComponent.js"}