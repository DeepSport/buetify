{"version":3,"sources":["../../../src/directives/clickOutside/index.ts"],"names":[],"mappings":"AAgBA,SAAS,kBAAT,GAA2B;AACzB,SAAO,IAAP;AACD;;AAED,SAAS,SAAT,CAAmB,CAAnB,EAAoC,EAApC,EAAqD,OAArD,EAA0F;AACxF,QAAM,OAAO,GAAG,OAAO,OAAO,CAAC,KAAf,KAAyB,UAAzB,GAAsC,OAAO,CAAC,KAA9C,GAAsD,OAAO,CAAC,KAAR,CAAe,OAArF;AAEA,QAAM,QAAQ,GAAI,OAAO,OAAO,CAAC,KAAf,KAAyB,QAAzB,IAAqC,OAAO,CAAC,KAAR,CAAc,gBAApD,IAAyE,kBAA1F,CAHwF,CAKxF;AACA;AACA;AACA;;AACA,MAAI,CAAC,CAAD,IAAM,QAAQ,CAAC,CAAD,CAAR,KAAgB,KAA1B,EAAiC,OATuD,CAWxF;AACA;AACA;AACA;AACA;;AACA,MAAK,eAAe,CAAf,IAAoB,CAAC,CAAC,CAAC,SAAxB,IAAuC,iBAAiB,CAAjB,IAAsB,CAAC,CAAC,CAAC,WAApE,EAAkF,OAhBM,CAkBxF;AACA;;AACA,QAAM,QAAQ,GAAG,CAAE,OAAO,OAAO,CAAC,KAAf,KAAyB,QAAzB,IAAqC,OAAO,CAAC,KAAR,CAAc,OAApD,KAAiE,MAAM,EAAvE,CAAD,GAAjB,CApBwF,CAqBxF;;;AACA,EAAA,QAAQ,CAAC,IAAT,CAAc,EAAd,EAtBwF,CAwBxF;AACA;AACA;AACA;AACA;AAEA;;AACA,GAAC,QAAQ,CAAC,IAAT,CAAe,EAAD,IAAa,EAAE,CAAC,QAAH,CAAY,CAAC,CAAC,MAAd,CAA3B,CAAD,IACE,UAAU,CAAC,MAAK;AACd,IAAA,QAAQ,CAAC,CAAD,CAAR,IAAe,OAAf,IAA0B,OAAO,CAAC,CAAD,CAAjC;AACD,GAFS,EAEP,CAFO,CADZ;AAID;;AAED,OAAO,MAAM,YAAY,GAAc;AACrC;AACA;AACA;AACA;AACA;AACA,EAAA,OAAO,CAAC,EAAD,EAAkB,OAAlB,EAAuD;AAC5D,UAAM,OAAO,GAAI,CAAD,IAAc,SAAS,CAAC,CAAD,EAAoB,EAApB,EAAwB,OAAxB,CAAvC,CAD4D,CAE5D;AACA;AACA;;;AACA,UAAM,GAAG,GAAG,QAAQ,CAAC,aAAT,CAAuB,QAAvB,KAAoC,QAAQ,CAAC,IAAzD,CAL4D,CAKG;;AAC/D,IAAA,GAAG,CAAC,gBAAJ,CAAqB,OAArB,EAA8B,OAA9B,EAAuC,IAAvC;AACA,IAAA,EAAE,CAAC,aAAH,GAAmB,OAAnB;AACD,GAdoC;;AAgBrC,EAAA,SAAS,CAAC,EAAD,EAAgB;AACvB,QAAI,CAAC,EAAE,CAAC,aAAR,EAAuB;AAEvB,UAAM,GAAG,GAAG,QAAQ,CAAC,aAAT,CAAuB,QAAvB,KAAoC,QAAQ,CAAC,IAAzD,CAHuB,CAGwC;;AAC/D,IAAA,GAAG,IAAI,GAAG,CAAC,mBAAJ,CAAwB,OAAxB,EAAiC,EAAE,CAAC,aAApC,EAAmD,IAAnD,CAAP;AACA,WAAO,EAAE,CAAC,aAAV;AACD;;AAtBoC,CAAhC;AAyBP,eAAe,YAAf","sourcesContent":["import { Directive, DirectiveBinding } from 'vue';\n\ninterface HTMLElement {\n  _clickOutside?: EventListenerOrEventListenerObject;\n}\n\ninterface ClickOutsideBindingArgs {\n  handler: (e: Event) => void;\n  closeConditional?: (e: Event) => boolean;\n  include?: () => HTMLElement[];\n}\n\ninterface ClickOutsideDirectiveBinding extends DirectiveBinding {\n  value: ((e: Event) => void) | ClickOutsideBindingArgs;\n}\n\nfunction defaultConditional() {\n  return true;\n}\n\nfunction directive(e: PointerEvent, el: HTMLElement, binding: ClickOutsideDirectiveBinding): void {\n  const handler = typeof binding.value === 'function' ? binding.value : binding.value!.handler;\n\n  const isActive = (typeof binding.value === 'object' && binding.value.closeConditional) || defaultConditional;\n\n  // The include element callbacks below can be expensive\n  // so we should avoid calling them when we're not active.\n  // Explicitly check for false to allow fallback compatibility\n  // with non-toggleable components\n  if (!e || isActive(e) === false) return;\n\n  // If click was triggered programmaticaly (domEl.click()) then\n  // it shouldn't be treated as click-outside\n  // Chrome/Firefox support isTrusted property\n  // IE/Edge support pointerType property (empty if not triggered\n  // by pointing device)\n  if (('isTrusted' in e && !e.isTrusted) || ('pointerType' in e && !e.pointerType)) return;\n\n  // Check if additional elements were passed to be included in check\n  // (click must be outside all included elements, if any)\n  const elements = ((typeof binding.value === 'object' && binding.value.include) || (() => []))();\n  // Add the root element for the component this directive was defined on\n  elements.push(el);\n\n  // Check if it's a click outside our elements, and then if our callback returns true.\n  // Non-toggleable components should take action in their callback and return falsy.\n  // Toggleable can return true if it wants to deactivate.\n  // Note that, because we're in the capture phase, this callback will occur before\n  // the bubbling click event on any outside elements.\n\n  // eslint-disable-next-line\n  !elements.some((el: any) => el.contains(e.target as Node)) &&\n    setTimeout(() => {\n      isActive(e) && handler && handler(e);\n    }, 0);\n}\n\nexport const ClickOutside: Directive = {\n  // .b-app may not be found\n  // if using bind, inserted makes\n  // sure that the root element is\n  // available, iOS does not support\n  // clicks on body\n  mounted(el: HTMLElement, binding: ClickOutsideDirectiveBinding) {\n    const onClick = (e: Event) => directive(e as PointerEvent, el, binding);\n    // iOS does not recognize click events on document\n    // or body, this is the entire purpose of the v-app\n    // component and [data-app], stop removing this\n    const app = document.querySelector('.b-app') || document.body; // This is only for unit tests\n    app.addEventListener('click', onClick, true);\n    el._clickOutside = onClick;\n  },\n\n  unmounted(el: HTMLElement) {\n    if (!el._clickOutside) return;\n\n    const app = document.querySelector('.b-app') || document.body; // This is only for unit tests\n    app && app.removeEventListener('click', el._clickOutside, true);\n    delete el._clickOutside;\n  }\n};\n\nexport default ClickOutside;\n"],"sourceRoot":"","file":"index.js"}