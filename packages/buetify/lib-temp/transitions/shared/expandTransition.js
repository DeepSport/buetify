import { capitalizeFirstLetter } from '../../utils/helpers';
export function createExpandTransition(expandedParentClass = '', x = false) {
    const sizeProperty = x ? 'width' : 'height';
    const offsetProperty = `offset${capitalizeFirstLetter(sizeProperty)}`;
    function resetStyles(el) {
        const size = el._initialStyle[sizeProperty];
        el.style.overflow = el._initialStyle.overflow;
        if (size != null)
            el.style[sizeProperty] = size;
        delete el._initialStyle;
    }
    function onAfterLeave(el) {
        if (expandedParentClass && el._parent) {
            el._parent.classList.remove(expandedParentClass);
        }
        resetStyles(el);
    }
    return {
        onBeforeEnter(el) {
            el._parent = el.parentNode;
            el._initialStyle = {
                transition: el.style.transition,
                visibility: el.style.visibility,
                overflow: el.style.overflow,
                [sizeProperty]: el.style[sizeProperty]
            };
        },
        onEnter(el) {
            const initialStyle = el._initialStyle;
            const offset = `${el[offsetProperty]}px`;
            el.style.setProperty('transition', 'none', 'important');
            el.style.visibility = 'hidden';
            el.style.visibility = initialStyle.visibility;
            el.style.overflow = 'hidden';
            el.style[sizeProperty] = '0';
            void el.offsetHeight; // force reflow
            el.style.transition = initialStyle.transition;
            if (expandedParentClass && el._parent) {
                el._parent.classList.add(expandedParentClass);
            }
            requestAnimationFrame(() => {
                el.style[sizeProperty] = offset;
            });
        },
        onAfterEnter: resetStyles,
        onEnterCancelled: resetStyles,
        onLeave(el) {
            el._initialStyle = {
                transition: '',
                visibility: '',
                overflow: el.style.overflow,
                [sizeProperty]: el.style[sizeProperty]
            };
            el.style.overflow = 'hidden';
            el.style[sizeProperty] = `${el[offsetProperty]}px`;
            void el.offsetHeight; // force reflow
            requestAnimationFrame(() => (el.style[sizeProperty] = '0'));
        },
        onAfterLeave,
        onLeaveCancelled: onAfterLeave
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwYW5kVHJhbnNpdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy90cmFuc2l0aW9ucy9zaGFyZWQvZXhwYW5kVHJhbnNpdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQVk1RCxNQUFNLFVBQVUsc0JBQXNCLENBQUMsbUJBQW1CLEdBQUcsRUFBRSxFQUFFLENBQUMsR0FBRyxLQUFLO0lBQ3hFLE1BQU0sWUFBWSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBRSxRQUErQixDQUFDO0lBQ3BFLE1BQU0sY0FBYyxHQUFHLFNBQVMscUJBQXFCLENBQUMsWUFBWSxDQUFDLEVBQW9DLENBQUM7SUFFeEcsU0FBUyxXQUFXLENBQUMsRUFBcUI7UUFDeEMsTUFBTSxJQUFJLEdBQUcsRUFBRSxDQUFDLGFBQWEsQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUM1QyxFQUFFLENBQUMsS0FBSyxDQUFDLFFBQVEsR0FBRyxFQUFFLENBQUMsYUFBYSxDQUFDLFFBQWtCLENBQUM7UUFDeEQsSUFBSSxJQUFJLElBQUksSUFBSTtZQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLEdBQUcsSUFBSSxDQUFDO1FBQ2hELE9BQU8sRUFBRSxDQUFDLGFBQWEsQ0FBQztJQUMxQixDQUFDO0lBRUQsU0FBUyxZQUFZLENBQUMsRUFBcUI7UUFDekMsSUFBSSxtQkFBbUIsSUFBSSxFQUFFLENBQUMsT0FBTyxFQUFFO1lBQ3JDLEVBQUUsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO1NBQ2xEO1FBQ0QsV0FBVyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ2xCLENBQUM7SUFFRCxPQUFPO1FBQ0wsYUFBYSxDQUFDLEVBQXFCO1lBQ2pDLEVBQUUsQ0FBQyxPQUFPLEdBQUcsRUFBRSxDQUFDLFVBQXNELENBQUM7WUFDdkUsRUFBRSxDQUFDLGFBQWEsR0FBRztnQkFDakIsVUFBVSxFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsVUFBVTtnQkFDL0IsVUFBVSxFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsVUFBVTtnQkFDL0IsUUFBUSxFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsUUFBUTtnQkFDM0IsQ0FBQyxZQUFZLENBQUMsRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQzthQUN2QyxDQUFDO1FBQ0osQ0FBQztRQUVELE9BQU8sQ0FBQyxFQUFxQjtZQUMzQixNQUFNLFlBQVksR0FBRyxFQUFFLENBQUMsYUFBYSxDQUFDO1lBQ3RDLE1BQU0sTUFBTSxHQUFHLEdBQUcsRUFBRSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUM7WUFFekMsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsWUFBWSxFQUFFLE1BQU0sRUFBRSxXQUFXLENBQUMsQ0FBQztZQUN4RCxFQUFFLENBQUMsS0FBSyxDQUFDLFVBQVUsR0FBRyxRQUFRLENBQUM7WUFDL0IsRUFBRSxDQUFDLEtBQUssQ0FBQyxVQUFVLEdBQUcsWUFBWSxDQUFDLFVBQW9CLENBQUM7WUFDeEQsRUFBRSxDQUFDLEtBQUssQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO1lBQzdCLEVBQUUsQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLEdBQUcsR0FBRyxDQUFDO1lBRTdCLEtBQUssRUFBRSxDQUFDLFlBQVksQ0FBQyxDQUFDLGVBQWU7WUFFckMsRUFBRSxDQUFDLEtBQUssQ0FBQyxVQUFVLEdBQUcsWUFBWSxDQUFDLFVBQVUsQ0FBQztZQUU5QyxJQUFJLG1CQUFtQixJQUFJLEVBQUUsQ0FBQyxPQUFPLEVBQUU7Z0JBQ3JDLEVBQUUsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO2FBQy9DO1lBRUQscUJBQXFCLENBQUMsR0FBRyxFQUFFO2dCQUN6QixFQUFFLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxHQUFHLE1BQU0sQ0FBQztZQUNsQyxDQUFDLENBQUMsQ0FBQztRQUNMLENBQUM7UUFFRCxZQUFZLEVBQUUsV0FBVztRQUN6QixnQkFBZ0IsRUFBRSxXQUFXO1FBRTdCLE9BQU8sQ0FBQyxFQUFxQjtZQUMzQixFQUFFLENBQUMsYUFBYSxHQUFHO2dCQUNqQixVQUFVLEVBQUUsRUFBRTtnQkFDZCxVQUFVLEVBQUUsRUFBRTtnQkFDZCxRQUFRLEVBQUUsRUFBRSxDQUFDLEtBQUssQ0FBQyxRQUFRO2dCQUMzQixDQUFDLFlBQVksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDO2FBQ3ZDLENBQUM7WUFFRixFQUFFLENBQUMsS0FBSyxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7WUFDN0IsRUFBRSxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsR0FBRyxHQUFHLEVBQUUsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDO1lBQ25ELEtBQUssRUFBRSxDQUFDLFlBQVksQ0FBQyxDQUFDLGVBQWU7WUFFckMscUJBQXFCLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDOUQsQ0FBQztRQUVELFlBQVk7UUFDWixnQkFBZ0IsRUFBRSxZQUFZO0tBQy9CLENBQUM7QUFDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQmFzZVRyYW5zaXRpb25Qcm9wcyB9IGZyb20gJ3Z1ZSc7XG5pbXBvcnQgeyBjYXBpdGFsaXplRmlyc3RMZXR0ZXIgfSBmcm9tICcuLi8uLi91dGlscy9oZWxwZXJzJztcblxuaW50ZXJmYWNlIEhUTUxFeHBhbmRFbGVtZW50IGV4dGVuZHMgSFRNTEVsZW1lbnQge1xuICBfcGFyZW50PzogKE5vZGUgJiBQYXJlbnROb2RlICYgSFRNTEVsZW1lbnQpIHwgbnVsbDtcbiAgX2luaXRpYWxTdHlsZToge1xuICAgIHRyYW5zaXRpb246IHN0cmluZztcbiAgICB2aXNpYmlsaXR5OiBzdHJpbmcgfCBudWxsO1xuICAgIG92ZXJmbG93OiBzdHJpbmcgfCBudWxsO1xuICAgIGhlaWdodD86IHN0cmluZyB8IG51bGw7XG4gICAgd2lkdGg/OiBzdHJpbmcgfCBudWxsO1xuICB9O1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUV4cGFuZFRyYW5zaXRpb24oZXhwYW5kZWRQYXJlbnRDbGFzcyA9ICcnLCB4ID0gZmFsc2UpOiBCYXNlVHJhbnNpdGlvblByb3BzPEhUTUxFeHBhbmRFbGVtZW50PiB7XG4gIGNvbnN0IHNpemVQcm9wZXJ0eSA9IHggPyAnd2lkdGgnIDogKCdoZWlnaHQnIGFzICd3aWR0aCcgfCAnaGVpZ2h0Jyk7XG4gIGNvbnN0IG9mZnNldFByb3BlcnR5ID0gYG9mZnNldCR7Y2FwaXRhbGl6ZUZpcnN0TGV0dGVyKHNpemVQcm9wZXJ0eSl9YCBhcyAnb2Zmc2V0SGVpZ2h0JyB8ICdvZmZzZXRXaWR0aCc7XG5cbiAgZnVuY3Rpb24gcmVzZXRTdHlsZXMoZWw6IEhUTUxFeHBhbmRFbGVtZW50KSB7XG4gICAgY29uc3Qgc2l6ZSA9IGVsLl9pbml0aWFsU3R5bGVbc2l6ZVByb3BlcnR5XTtcbiAgICBlbC5zdHlsZS5vdmVyZmxvdyA9IGVsLl9pbml0aWFsU3R5bGUub3ZlcmZsb3cgYXMgc3RyaW5nO1xuICAgIGlmIChzaXplICE9IG51bGwpIGVsLnN0eWxlW3NpemVQcm9wZXJ0eV0gPSBzaXplO1xuICAgIGRlbGV0ZSBlbC5faW5pdGlhbFN0eWxlO1xuICB9XG5cbiAgZnVuY3Rpb24gb25BZnRlckxlYXZlKGVsOiBIVE1MRXhwYW5kRWxlbWVudCkge1xuICAgIGlmIChleHBhbmRlZFBhcmVudENsYXNzICYmIGVsLl9wYXJlbnQpIHtcbiAgICAgIGVsLl9wYXJlbnQuY2xhc3NMaXN0LnJlbW92ZShleHBhbmRlZFBhcmVudENsYXNzKTtcbiAgICB9XG4gICAgcmVzZXRTdHlsZXMoZWwpO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBvbkJlZm9yZUVudGVyKGVsOiBIVE1MRXhwYW5kRWxlbWVudCkge1xuICAgICAgZWwuX3BhcmVudCA9IGVsLnBhcmVudE5vZGUgYXMgKE5vZGUgJiBQYXJlbnROb2RlICYgSFRNTEVsZW1lbnQpIHwgbnVsbDtcbiAgICAgIGVsLl9pbml0aWFsU3R5bGUgPSB7XG4gICAgICAgIHRyYW5zaXRpb246IGVsLnN0eWxlLnRyYW5zaXRpb24sXG4gICAgICAgIHZpc2liaWxpdHk6IGVsLnN0eWxlLnZpc2liaWxpdHksXG4gICAgICAgIG92ZXJmbG93OiBlbC5zdHlsZS5vdmVyZmxvdyxcbiAgICAgICAgW3NpemVQcm9wZXJ0eV06IGVsLnN0eWxlW3NpemVQcm9wZXJ0eV1cbiAgICAgIH07XG4gICAgfSxcblxuICAgIG9uRW50ZXIoZWw6IEhUTUxFeHBhbmRFbGVtZW50KSB7XG4gICAgICBjb25zdCBpbml0aWFsU3R5bGUgPSBlbC5faW5pdGlhbFN0eWxlO1xuICAgICAgY29uc3Qgb2Zmc2V0ID0gYCR7ZWxbb2Zmc2V0UHJvcGVydHldfXB4YDtcblxuICAgICAgZWwuc3R5bGUuc2V0UHJvcGVydHkoJ3RyYW5zaXRpb24nLCAnbm9uZScsICdpbXBvcnRhbnQnKTtcbiAgICAgIGVsLnN0eWxlLnZpc2liaWxpdHkgPSAnaGlkZGVuJztcbiAgICAgIGVsLnN0eWxlLnZpc2liaWxpdHkgPSBpbml0aWFsU3R5bGUudmlzaWJpbGl0eSBhcyBzdHJpbmc7XG4gICAgICBlbC5zdHlsZS5vdmVyZmxvdyA9ICdoaWRkZW4nO1xuICAgICAgZWwuc3R5bGVbc2l6ZVByb3BlcnR5XSA9ICcwJztcblxuICAgICAgdm9pZCBlbC5vZmZzZXRIZWlnaHQ7IC8vIGZvcmNlIHJlZmxvd1xuXG4gICAgICBlbC5zdHlsZS50cmFuc2l0aW9uID0gaW5pdGlhbFN0eWxlLnRyYW5zaXRpb247XG5cbiAgICAgIGlmIChleHBhbmRlZFBhcmVudENsYXNzICYmIGVsLl9wYXJlbnQpIHtcbiAgICAgICAgZWwuX3BhcmVudC5jbGFzc0xpc3QuYWRkKGV4cGFuZGVkUGFyZW50Q2xhc3MpO1xuICAgICAgfVxuXG4gICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgICBlbC5zdHlsZVtzaXplUHJvcGVydHldID0gb2Zmc2V0O1xuICAgICAgfSk7XG4gICAgfSxcblxuICAgIG9uQWZ0ZXJFbnRlcjogcmVzZXRTdHlsZXMsXG4gICAgb25FbnRlckNhbmNlbGxlZDogcmVzZXRTdHlsZXMsXG5cbiAgICBvbkxlYXZlKGVsOiBIVE1MRXhwYW5kRWxlbWVudCkge1xuICAgICAgZWwuX2luaXRpYWxTdHlsZSA9IHtcbiAgICAgICAgdHJhbnNpdGlvbjogJycsXG4gICAgICAgIHZpc2liaWxpdHk6ICcnLFxuICAgICAgICBvdmVyZmxvdzogZWwuc3R5bGUub3ZlcmZsb3csXG4gICAgICAgIFtzaXplUHJvcGVydHldOiBlbC5zdHlsZVtzaXplUHJvcGVydHldXG4gICAgICB9O1xuXG4gICAgICBlbC5zdHlsZS5vdmVyZmxvdyA9ICdoaWRkZW4nO1xuICAgICAgZWwuc3R5bGVbc2l6ZVByb3BlcnR5XSA9IGAke2VsW29mZnNldFByb3BlcnR5XX1weGA7XG4gICAgICB2b2lkIGVsLm9mZnNldEhlaWdodDsgLy8gZm9yY2UgcmVmbG93XG5cbiAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiAoZWwuc3R5bGVbc2l6ZVByb3BlcnR5XSA9ICcwJykpO1xuICAgIH0sXG5cbiAgICBvbkFmdGVyTGVhdmUsXG4gICAgb25MZWF2ZUNhbmNlbGxlZDogb25BZnRlckxlYXZlXG4gIH07XG59XG4iXX0=