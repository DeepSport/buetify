import { shallowRef, onMounted, watchEffect } from 'vue';
import { isHTMLElement } from '../../utils/helpers';
export const UseFocusPropsDefinition = {
    isFocused: {
        type: Boolean,
        default: false
    },
    onFocus: {
        type: Function,
        required: false
    },
    onBlur: {
        type: Function,
        required: false
    },
    focusOnMount: {
        type: Boolean,
        default: false
    }
};
export function useFocus(props, ref) {
    const isFocused = shallowRef(false);
    function onFocus() {
        isFocused.value = true;
        if (props.onFocus)
            props.onFocus();
    }
    function focus() {
        if (isFocused.value || props.isFocused === false) {
            return;
        }
        if (isHTMLElement(ref.value)) {
            ref.value.focus();
            isFocused.value = true;
            if (props.onFocus)
                props.onFocus();
        }
        else {
            if (ref.value && isHTMLElement(ref.value.el)) {
                ref.value.el.focus();
                isFocused.value = true;
                if (props.onFocus)
                    props.onFocus();
            }
        }
    }
    watchEffect(() => {
        if (props.isFocused && isFocused.value === false) {
            focus();
        }
    });
    if (props.focusOnMount) {
        onMounted(focus);
    }
    function onBlur() {
        isFocused.value = false;
        if (props.onBlur)
            props.onBlur();
    }
    return {
        isFocused,
        focus,
        onFocus,
        onBlur
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlRm9jdXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29tcG9zYWJsZXMvZm9jdXMvdXNlRm9jdXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFjLFVBQVUsRUFBOEIsU0FBUyxFQUFFLFdBQVcsRUFBRSxNQUFNLEtBQUssQ0FBQztBQUNqRyxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFFcEQsTUFBTSxDQUFDLE1BQU0sdUJBQXVCLEdBQUc7SUFDckMsU0FBUyxFQUFFO1FBQ1QsSUFBSSxFQUFFLE9BQTRCO1FBQ2xDLE9BQU8sRUFBRSxLQUFLO0tBQ2Y7SUFDRCxPQUFPLEVBQUU7UUFDUCxJQUFJLEVBQUUsUUFBOEI7UUFDcEMsUUFBUSxFQUFFLEtBQWM7S0FDekI7SUFDRCxNQUFNLEVBQUU7UUFDTixJQUFJLEVBQUUsUUFBOEI7UUFDcEMsUUFBUSxFQUFFLEtBQWM7S0FDekI7SUFDRCxZQUFZLEVBQUU7UUFDWixJQUFJLEVBQUUsT0FBNEI7UUFDbEMsT0FBTyxFQUFFLEtBQUs7S0FDZjtDQUNGLENBQUM7QUFJRixNQUFNLFVBQVUsUUFBUSxDQUFDLEtBQW9CLEVBQUUsR0FBNkI7SUFDMUUsTUFBTSxTQUFTLEdBQWlCLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNsRCxTQUFTLE9BQU87UUFDZCxTQUFTLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQztRQUN2QixJQUFJLEtBQUssQ0FBQyxPQUFPO1lBQUUsS0FBSyxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQ3JDLENBQUM7SUFDRCxTQUFTLEtBQUs7UUFDWixJQUFJLFNBQVMsQ0FBQyxLQUFLLElBQUksS0FBSyxDQUFDLFNBQVMsS0FBSyxLQUFLLEVBQUU7WUFDaEQsT0FBTztTQUNSO1FBQ0QsSUFBSSxhQUFhLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQzVCLEdBQUcsQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFLENBQUM7WUFDbEIsU0FBUyxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7WUFDdkIsSUFBSSxLQUFLLENBQUMsT0FBTztnQkFBRSxLQUFLLENBQUMsT0FBTyxFQUFFLENBQUM7U0FDcEM7YUFBTTtZQUNMLElBQUksR0FBRyxDQUFDLEtBQUssSUFBSSxhQUFhLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsRUFBRTtnQkFDNUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUM7Z0JBQ3JCLFNBQVMsQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDO2dCQUN2QixJQUFJLEtBQUssQ0FBQyxPQUFPO29CQUFFLEtBQUssQ0FBQyxPQUFPLEVBQUUsQ0FBQzthQUNwQztTQUNGO0lBQ0gsQ0FBQztJQUNELFdBQVcsQ0FBQyxHQUFHLEVBQUU7UUFDZixJQUFJLEtBQUssQ0FBQyxTQUFTLElBQUksU0FBUyxDQUFDLEtBQUssS0FBSyxLQUFLLEVBQUU7WUFDaEQsS0FBSyxFQUFFLENBQUM7U0FDVDtJQUNILENBQUMsQ0FBQyxDQUFDO0lBRUgsSUFBSSxLQUFLLENBQUMsWUFBWSxFQUFFO1FBQ3RCLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQztLQUNsQjtJQUVELFNBQVMsTUFBTTtRQUNiLFNBQVMsQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ3hCLElBQUksS0FBSyxDQUFDLE1BQU07WUFBRSxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUM7SUFDbkMsQ0FBQztJQUNELE9BQU87UUFDTCxTQUFTO1FBQ1QsS0FBSztRQUNMLE9BQU87UUFDUCxNQUFNO0tBQ1AsQ0FBQztBQUNKLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJTyB9IGZyb20gJ2ZwLXRzL2xpYi9JTyc7XG5pbXBvcnQgeyBSZWYsIFZOb2RlLCBzaGFsbG93UmVmLCBQcm9wVHlwZSwgRXh0cmFjdFByb3BUeXBlcywgb25Nb3VudGVkLCB3YXRjaEVmZmVjdCB9IGZyb20gJ3Z1ZSc7XG5pbXBvcnQgeyBpc0hUTUxFbGVtZW50IH0gZnJvbSAnLi4vLi4vdXRpbHMvaGVscGVycyc7XG5cbmV4cG9ydCBjb25zdCBVc2VGb2N1c1Byb3BzRGVmaW5pdGlvbiA9IHtcbiAgaXNGb2N1c2VkOiB7XG4gICAgdHlwZTogQm9vbGVhbiBhcyBQcm9wVHlwZTxib29sZWFuPixcbiAgICBkZWZhdWx0OiBmYWxzZVxuICB9LFxuICBvbkZvY3VzOiB7XG4gICAgdHlwZTogRnVuY3Rpb24gYXMgUHJvcFR5cGU8SU88dm9pZD4+LFxuICAgIHJlcXVpcmVkOiBmYWxzZSBhcyBjb25zdFxuICB9LFxuICBvbkJsdXI6IHtcbiAgICB0eXBlOiBGdW5jdGlvbiBhcyBQcm9wVHlwZTxJTzx2b2lkPj4sXG4gICAgcmVxdWlyZWQ6IGZhbHNlIGFzIGNvbnN0XG4gIH0sXG4gIGZvY3VzT25Nb3VudDoge1xuICAgIHR5cGU6IEJvb2xlYW4gYXMgUHJvcFR5cGU8Ym9vbGVhbj4sXG4gICAgZGVmYXVsdDogZmFsc2VcbiAgfVxufTtcblxuZXhwb3J0IHR5cGUgVXNlRm9jdXNQcm9wcyA9IEV4dHJhY3RQcm9wVHlwZXM8dHlwZW9mIFVzZUZvY3VzUHJvcHNEZWZpbml0aW9uPjtcblxuZXhwb3J0IGZ1bmN0aW9uIHVzZUZvY3VzKHByb3BzOiBVc2VGb2N1c1Byb3BzLCByZWY6IFJlZjxIVE1MRWxlbWVudCB8IFZOb2RlPikge1xuICBjb25zdCBpc0ZvY3VzZWQ6IFJlZjxib29sZWFuPiA9IHNoYWxsb3dSZWYoZmFsc2UpO1xuICBmdW5jdGlvbiBvbkZvY3VzKCkge1xuICAgIGlzRm9jdXNlZC52YWx1ZSA9IHRydWU7XG4gICAgaWYgKHByb3BzLm9uRm9jdXMpIHByb3BzLm9uRm9jdXMoKTtcbiAgfVxuICBmdW5jdGlvbiBmb2N1cygpIHtcbiAgICBpZiAoaXNGb2N1c2VkLnZhbHVlIHx8IHByb3BzLmlzRm9jdXNlZCA9PT0gZmFsc2UpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGlzSFRNTEVsZW1lbnQocmVmLnZhbHVlKSkge1xuICAgICAgcmVmLnZhbHVlLmZvY3VzKCk7XG4gICAgICBpc0ZvY3VzZWQudmFsdWUgPSB0cnVlO1xuICAgICAgaWYgKHByb3BzLm9uRm9jdXMpIHByb3BzLm9uRm9jdXMoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHJlZi52YWx1ZSAmJiBpc0hUTUxFbGVtZW50KHJlZi52YWx1ZS5lbCkpIHtcbiAgICAgICAgcmVmLnZhbHVlLmVsLmZvY3VzKCk7XG4gICAgICAgIGlzRm9jdXNlZC52YWx1ZSA9IHRydWU7XG4gICAgICAgIGlmIChwcm9wcy5vbkZvY3VzKSBwcm9wcy5vbkZvY3VzKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHdhdGNoRWZmZWN0KCgpID0+IHtcbiAgICBpZiAocHJvcHMuaXNGb2N1c2VkICYmIGlzRm9jdXNlZC52YWx1ZSA9PT0gZmFsc2UpIHtcbiAgICAgIGZvY3VzKCk7XG4gICAgfVxuICB9KTtcblxuICBpZiAocHJvcHMuZm9jdXNPbk1vdW50KSB7XG4gICAgb25Nb3VudGVkKGZvY3VzKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uQmx1cigpIHtcbiAgICBpc0ZvY3VzZWQudmFsdWUgPSBmYWxzZTtcbiAgICBpZiAocHJvcHMub25CbHVyKSBwcm9wcy5vbkJsdXIoKTtcbiAgfVxuICByZXR1cm4ge1xuICAgIGlzRm9jdXNlZCxcbiAgICBmb2N1cyxcbiAgICBvbkZvY3VzLFxuICAgIG9uQmx1clxuICB9O1xufVxuIl19