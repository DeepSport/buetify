import { constVoid } from 'fp-ts/lib/function';
import { inject, shallowRef, onMounted, computed, watch, toRef, onUnmounted } from 'vue';
import { getToggleAttrs, getUseTogglePropsDefinition, useToggle } from '../toggle';
import { FadeTransitionPropsDefinition } from '../transition';
import { DEFAULT_POPUP_CONTROLLER_INJECTION, POPUP_CONTROLLER_SYMBOL } from './providePopupController';
export const UsePopupControllerPropsDefinition = {
    ...FadeTransitionPropsDefinition,
    ...getUseTogglePropsDefinition('isActive')
};
export function usePopupController(props, render) {
    const hasMounted = shallowRef(false);
    onMounted(() => {
        hasMounted.value = true;
    });
    let remove = constVoid;
    const { isOn, setOn, setOff, toggle, listeners } = useToggle(props, 'isActive');
    const { showPopup } = inject(POPUP_CONTROLLER_SYMBOL, DEFAULT_POPUP_CONTROLLER_INJECTION);
    const isOpen = computed(() => hasMounted.value && isOn.value);
    const attrs = getToggleAttrs(isOpen, toRef(props, 'hasPopup'));
    watch(isOpen, (newValue) => {
        if (newValue) {
            remove();
            remove = showPopup({
                render: render.value,
                transition: props.transition
            });
        }
        else {
            remove();
            remove = constVoid;
        }
    });
    onUnmounted(() => {
        remove();
    });
    return {
        isOpen,
        attrs,
        listeners,
        props: computed(() => ({ ...attrs.value, ...listeners })),
        open: setOn,
        close: setOff,
        toggle: toggle
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlUG9wdXBDb250cm9sbGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NvbXBvc2FibGVzL3BvcHVwQ29udHJvbGxlci91c2VQb3B1cENvbnRyb2xsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBRS9DLE9BQU8sRUFBRSxNQUFNLEVBQTJCLFVBQVUsRUFBRSxTQUFTLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsV0FBVyxFQUFPLE1BQU0sS0FBSyxDQUFDO0FBQ3ZILE9BQU8sRUFBRSxjQUFjLEVBQUUsMkJBQTJCLEVBQUUsU0FBUyxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQ25GLE9BQU8sRUFBRSw2QkFBNkIsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM5RCxPQUFPLEVBQUUsa0NBQWtDLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUV2RyxNQUFNLENBQUMsTUFBTSxpQ0FBaUMsR0FBRztJQUMvQyxHQUFHLDZCQUE2QjtJQUNoQyxHQUFHLDJCQUEyQixDQUFDLFVBQVUsQ0FBQztDQUMzQyxDQUFDO0FBSUYsTUFBTSxVQUFVLGtCQUFrQixDQUFDLEtBQW9CLEVBQUUsTUFBd0I7SUFDL0UsTUFBTSxVQUFVLEdBQUcsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3JDLFNBQVMsQ0FBQyxHQUFHLEVBQUU7UUFDYixVQUFVLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQztJQUMxQixDQUFDLENBQUMsQ0FBQztJQUNILElBQUksTUFBTSxHQUFHLFNBQVMsQ0FBQztJQUN2QixNQUFNLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLFNBQVMsRUFBRSxHQUFHLFNBQVMsQ0FBQyxLQUFLLEVBQUUsVUFBVSxDQUFDLENBQUM7SUFDaEYsTUFBTSxFQUFFLFNBQVMsRUFBRSxHQUFHLE1BQU0sQ0FBQyx1QkFBdUIsRUFBRSxrQ0FBa0MsQ0FBQyxDQUFDO0lBQzFGLE1BQU0sTUFBTSxHQUFHLFFBQVEsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUM5RCxNQUFNLEtBQUssR0FBRyxjQUFjLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxLQUFLLEVBQUUsVUFBVSxDQUFDLENBQUMsQ0FBQztJQUMvRCxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUMsUUFBUSxFQUFFLEVBQUU7UUFDekIsSUFBSSxRQUFRLEVBQUU7WUFDWixNQUFNLEVBQUUsQ0FBQztZQUNULE1BQU0sR0FBRyxTQUFTLENBQUM7Z0JBQ2pCLE1BQU0sRUFBRSxNQUFNLENBQUMsS0FBSztnQkFDcEIsVUFBVSxFQUFFLEtBQUssQ0FBQyxVQUFVO2FBQzdCLENBQUMsQ0FBQztTQUNKO2FBQU07WUFDTCxNQUFNLEVBQUUsQ0FBQztZQUNULE1BQU0sR0FBRyxTQUFTLENBQUM7U0FDcEI7SUFDSCxDQUFDLENBQUMsQ0FBQztJQUNILFdBQVcsQ0FBQyxHQUFHLEVBQUU7UUFDZixNQUFNLEVBQUUsQ0FBQztJQUNYLENBQUMsQ0FBQyxDQUFDO0lBQ0gsT0FBTztRQUNMLE1BQU07UUFDTixLQUFLO1FBQ0wsU0FBUztRQUNULEtBQUssRUFBRSxRQUFRLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxFQUFFLEdBQUcsS0FBSyxDQUFDLEtBQUssRUFBRSxHQUFHLFNBQVMsRUFBRSxDQUFDLENBQUM7UUFDekQsSUFBSSxFQUFFLEtBQUs7UUFDWCxLQUFLLEVBQUUsTUFBTTtRQUNiLE1BQU0sRUFBRSxNQUFNO0tBQ2YsQ0FBQztBQUNKLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjb25zdFZvaWQgfSBmcm9tICdmcC10cy9saWIvZnVuY3Rpb24nO1xuaW1wb3J0IHsgSU8gfSBmcm9tICdmcC10cy9saWIvSU8nO1xuaW1wb3J0IHsgaW5qZWN0LCBWTm9kZSwgRXh0cmFjdFByb3BUeXBlcywgc2hhbGxvd1JlZiwgb25Nb3VudGVkLCBjb21wdXRlZCwgd2F0Y2gsIHRvUmVmLCBvblVubW91bnRlZCwgUmVmIH0gZnJvbSAndnVlJztcbmltcG9ydCB7IGdldFRvZ2dsZUF0dHJzLCBnZXRVc2VUb2dnbGVQcm9wc0RlZmluaXRpb24sIHVzZVRvZ2dsZSB9IGZyb20gJy4uL3RvZ2dsZSc7XG5pbXBvcnQgeyBGYWRlVHJhbnNpdGlvblByb3BzRGVmaW5pdGlvbiB9IGZyb20gJy4uL3RyYW5zaXRpb24nO1xuaW1wb3J0IHsgREVGQVVMVF9QT1BVUF9DT05UUk9MTEVSX0lOSkVDVElPTiwgUE9QVVBfQ09OVFJPTExFUl9TWU1CT0wgfSBmcm9tICcuL3Byb3ZpZGVQb3B1cENvbnRyb2xsZXInO1xuXG5leHBvcnQgY29uc3QgVXNlUG9wdXBDb250cm9sbGVyUHJvcHNEZWZpbml0aW9uID0ge1xuICAuLi5GYWRlVHJhbnNpdGlvblByb3BzRGVmaW5pdGlvbixcbiAgLi4uZ2V0VXNlVG9nZ2xlUHJvcHNEZWZpbml0aW9uKCdpc0FjdGl2ZScpXG59O1xuXG5leHBvcnQgdHlwZSBVc2VQb3B1cFByb3BzID0gRXh0cmFjdFByb3BUeXBlczx0eXBlb2YgVXNlUG9wdXBDb250cm9sbGVyUHJvcHNEZWZpbml0aW9uPjtcblxuZXhwb3J0IGZ1bmN0aW9uIHVzZVBvcHVwQ29udHJvbGxlcihwcm9wczogVXNlUG9wdXBQcm9wcywgcmVuZGVyOiBSZWY8SU88Vk5vZGVbXT4+KSB7XG4gIGNvbnN0IGhhc01vdW50ZWQgPSBzaGFsbG93UmVmKGZhbHNlKTtcbiAgb25Nb3VudGVkKCgpID0+IHtcbiAgICBoYXNNb3VudGVkLnZhbHVlID0gdHJ1ZTtcbiAgfSk7XG4gIGxldCByZW1vdmUgPSBjb25zdFZvaWQ7XG4gIGNvbnN0IHsgaXNPbiwgc2V0T24sIHNldE9mZiwgdG9nZ2xlLCBsaXN0ZW5lcnMgfSA9IHVzZVRvZ2dsZShwcm9wcywgJ2lzQWN0aXZlJyk7XG4gIGNvbnN0IHsgc2hvd1BvcHVwIH0gPSBpbmplY3QoUE9QVVBfQ09OVFJPTExFUl9TWU1CT0wsIERFRkFVTFRfUE9QVVBfQ09OVFJPTExFUl9JTkpFQ1RJT04pO1xuICBjb25zdCBpc09wZW4gPSBjb21wdXRlZCgoKSA9PiBoYXNNb3VudGVkLnZhbHVlICYmIGlzT24udmFsdWUpO1xuICBjb25zdCBhdHRycyA9IGdldFRvZ2dsZUF0dHJzKGlzT3BlbiwgdG9SZWYocHJvcHMsICdoYXNQb3B1cCcpKTtcbiAgd2F0Y2goaXNPcGVuLCAobmV3VmFsdWUpID0+IHtcbiAgICBpZiAobmV3VmFsdWUpIHtcbiAgICAgIHJlbW92ZSgpO1xuICAgICAgcmVtb3ZlID0gc2hvd1BvcHVwKHtcbiAgICAgICAgcmVuZGVyOiByZW5kZXIudmFsdWUsXG4gICAgICAgIHRyYW5zaXRpb246IHByb3BzLnRyYW5zaXRpb25cbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZW1vdmUoKTtcbiAgICAgIHJlbW92ZSA9IGNvbnN0Vm9pZDtcbiAgICB9XG4gIH0pO1xuICBvblVubW91bnRlZCgoKSA9PiB7XG4gICAgcmVtb3ZlKCk7XG4gIH0pO1xuICByZXR1cm4ge1xuICAgIGlzT3BlbixcbiAgICBhdHRycyxcbiAgICBsaXN0ZW5lcnMsXG4gICAgcHJvcHM6IGNvbXB1dGVkKCgpID0+ICh7IC4uLmF0dHJzLnZhbHVlLCAuLi5saXN0ZW5lcnMgfSkpLFxuICAgIG9wZW46IHNldE9uLFxuICAgIGNsb3NlOiBzZXRPZmYsXG4gICAgdG9nZ2xlOiB0b2dnbGVcbiAgfTtcbn1cblxuZXhwb3J0IHR5cGUgUG9wdXBDb250cm9sbGVyID0gUmV0dXJuVHlwZTx0eXBlb2YgdXNlUG9wdXBDb250cm9sbGVyPjtcbiJdfQ==