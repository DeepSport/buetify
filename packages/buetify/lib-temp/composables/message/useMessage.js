import { constant } from 'fp-ts/lib/function';
import { defineAsyncComponent, computed } from 'vue';
import { getUseTogglePropsDefinition, useToggle } from '../toggle';
const DEFAULT_MESSAGE_ICONS = {
    'is-info': defineAsyncComponent(() => import('../../components/icons/infoCircle')),
    'is-success': defineAsyncComponent(() => import('../../components/icons/checkCircle')),
    'is-warning': defineAsyncComponent(() => import('../../components/icons/exclamationTriangle')),
    'is-danger': defineAsyncComponent(() => import('../../components/icons/exclamationCircle'))
};
export function getMessageIcons(icons) {
    return {
        ...DEFAULT_MESSAGE_ICONS,
        ...icons
    };
}
export const UseMessagePropsDefinition = {
    ...getUseTogglePropsDefinition('isActive'),
    title: {
        type: String
    },
    isClosable: {
        type: Boolean,
        default: true
    },
    message: {
        type: String
    },
    variant: {
        type: String,
        default: ''
    },
    size: {
        type: String,
        default: ''
    },
    iconSize: {
        type: String,
        default: ''
    },
    useAutoClose: {
        type: Boolean,
        default: false
    },
    duration: {
        type: Number,
        default: 2000
    },
    useIcon: {
        type: Boolean,
        default: false
    },
    icons: {
        type: Object,
        default: constant(DEFAULT_MESSAGE_ICONS)
    }
};
export function useMessage(props) {
    const toggle = useToggle(props, 'isActive');
    const icon = computed(() => props.icons[props.variant]);
    const iconSize = computed(() => props.iconSize || props.size || 'is-large');
    function setAutoClose() {
        if (props.useAutoClose) {
            setTimeout(() => {
                if (toggle.isOn.value) {
                    toggle.setOff();
                }
            }, props.duration);
        }
    }
    return {
        ...toggle,
        icon,
        iconSize,
        setAutoClose
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlTWVzc2FnZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21wb3NhYmxlcy9tZXNzYWdlL3VzZU1lc3NhZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQzlDLE9BQU8sRUFBRSxvQkFBb0IsRUFBeUMsUUFBUSxFQUFFLE1BQU0sS0FBSyxDQUFDO0FBRTVGLE9BQU8sRUFBRSwyQkFBMkIsRUFBRSxTQUFTLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFRbkUsTUFBTSxxQkFBcUIsR0FBMEI7SUFDbkQsU0FBUyxFQUFFLG9CQUFvQixDQUFDLEdBQUcsRUFBRSxDQUFDLE1BQU0sQ0FBQyxtQ0FBbUMsQ0FBQyxDQUFDO0lBQ2xGLFlBQVksRUFBRSxvQkFBb0IsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxNQUFNLENBQUMsb0NBQW9DLENBQUMsQ0FBQztJQUN0RixZQUFZLEVBQUUsb0JBQW9CLENBQUMsR0FBRyxFQUFFLENBQUMsTUFBTSxDQUFDLDRDQUE0QyxDQUFDLENBQUM7SUFDOUYsV0FBVyxFQUFFLG9CQUFvQixDQUFDLEdBQUcsRUFBRSxDQUFDLE1BQU0sQ0FBQywwQ0FBMEMsQ0FBQyxDQUFDO0NBQzVGLENBQUM7QUFFRixNQUFNLFVBQVUsZUFBZSxDQUFDLEtBQTRCO0lBQzFELE9BQU87UUFDTCxHQUFHLHFCQUFxQjtRQUN4QixHQUFHLEtBQUs7S0FDVCxDQUFDO0FBQ0osQ0FBQztBQUVELE1BQU0sQ0FBQyxNQUFNLHlCQUF5QixHQUFHO0lBQ3ZDLEdBQUcsMkJBQTJCLENBQUMsVUFBVSxDQUFDO0lBQzFDLEtBQUssRUFBRTtRQUNMLElBQUksRUFBRSxNQUEwQjtLQUNqQztJQUNELFVBQVUsRUFBRTtRQUNWLElBQUksRUFBRSxPQUFPO1FBQ2IsT0FBTyxFQUFFLElBQUk7S0FDZDtJQUNELE9BQU8sRUFBRTtRQUNQLElBQUksRUFBRSxNQUEwQjtLQUNqQztJQUNELE9BQU8sRUFBRTtRQUNQLElBQUksRUFBRSxNQUFvQztRQUMxQyxPQUFPLEVBQUUsRUFBVztLQUNyQjtJQUNELElBQUksRUFBRTtRQUNKLElBQUksRUFBRSxNQUErQjtRQUNyQyxPQUFPLEVBQUUsRUFBVztLQUNyQjtJQUNELFFBQVEsRUFBRTtRQUNSLElBQUksRUFBRSxNQUErQjtRQUNyQyxPQUFPLEVBQUUsRUFBVztLQUNyQjtJQUNELFlBQVksRUFBRTtRQUNaLElBQUksRUFBRSxPQUE0QjtRQUNsQyxPQUFPLEVBQUUsS0FBSztLQUNmO0lBQ0QsUUFBUSxFQUFFO1FBQ1IsSUFBSSxFQUFFLE1BQTBCO1FBQ2hDLE9BQU8sRUFBRSxJQUFJO0tBQ2Q7SUFDRCxPQUFPLEVBQUU7UUFDUCxJQUFJLEVBQUUsT0FBNEI7UUFDbEMsT0FBTyxFQUFFLEtBQUs7S0FDZjtJQUNELEtBQUssRUFBRTtRQUNMLElBQUksRUFBRSxNQUF5QztRQUMvQyxPQUFPLEVBQUUsUUFBUSxDQUFDLHFCQUFxQixDQUFDO0tBQ3pDO0NBQ0YsQ0FBQztBQUlGLE1BQU0sVUFBVSxVQUFVLENBQUMsS0FBc0I7SUFDL0MsTUFBTSxNQUFNLEdBQUcsU0FBUyxDQUFDLEtBQUssRUFBRSxVQUFVLENBQUMsQ0FBQztJQUM1QyxNQUFNLElBQUksR0FBRyxRQUFRLENBQUMsR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztJQUN4RCxNQUFNLFFBQVEsR0FBRyxRQUFRLENBQUMsR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDLFFBQVEsSUFBSSxLQUFLLENBQUMsSUFBSSxJQUFJLFVBQVUsQ0FBQyxDQUFDO0lBQzVFLFNBQVMsWUFBWTtRQUNuQixJQUFJLEtBQUssQ0FBQyxZQUFZLEVBQUU7WUFDdEIsVUFBVSxDQUFDLEdBQUcsRUFBRTtnQkFDZCxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFO29CQUNyQixNQUFNLENBQUMsTUFBTSxFQUFFLENBQUM7aUJBQ2pCO1lBQ0gsQ0FBQyxFQUFFLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztTQUNwQjtJQUNILENBQUM7SUFDRCxPQUFPO1FBQ0wsR0FBRyxNQUFNO1FBQ1QsSUFBSTtRQUNKLFFBQVE7UUFDUixZQUFZO0tBQ2IsQ0FBQztBQUNKLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjb25zdGFudCB9IGZyb20gJ2ZwLXRzL2xpYi9mdW5jdGlvbic7XG5pbXBvcnQgeyBkZWZpbmVBc3luY0NvbXBvbmVudCwgUHJvcFR5cGUsIEV4dHJhY3RQcm9wVHlwZXMsIENvbXBvbmVudCwgY29tcHV0ZWQgfSBmcm9tICd2dWUnO1xuaW1wb3J0IHsgQWxsQ29sb3JzVmFyaWFudCB9IGZyb20gJy4uLy4uL3R5cGVzL0NvbG9yVmFyaWFudHMnO1xuaW1wb3J0IHsgZ2V0VXNlVG9nZ2xlUHJvcHNEZWZpbml0aW9uLCB1c2VUb2dnbGUgfSBmcm9tICcuLi90b2dnbGUnO1xuXG5leHBvcnQgdHlwZSBNZXNzYWdlU2l6ZSA9ICdpcy1zbWFsbCcgfCAnaXMtbWVkaXVtJyB8ICdpcy1sYXJnZScgfCAnJztcblxuZXhwb3J0IHR5cGUgTWVzc2FnZUljb25zID0ge1xuICBbSyBpbiBBbGxDb2xvcnNWYXJpYW50XTogQ29tcG9uZW50O1xufTtcblxuY29uc3QgREVGQVVMVF9NRVNTQUdFX0lDT05TOiBQYXJ0aWFsPE1lc3NhZ2VJY29ucz4gPSB7XG4gICdpcy1pbmZvJzogZGVmaW5lQXN5bmNDb21wb25lbnQoKCkgPT4gaW1wb3J0KCcuLi8uLi9jb21wb25lbnRzL2ljb25zL2luZm9DaXJjbGUnKSksXG4gICdpcy1zdWNjZXNzJzogZGVmaW5lQXN5bmNDb21wb25lbnQoKCkgPT4gaW1wb3J0KCcuLi8uLi9jb21wb25lbnRzL2ljb25zL2NoZWNrQ2lyY2xlJykpLFxuICAnaXMtd2FybmluZyc6IGRlZmluZUFzeW5jQ29tcG9uZW50KCgpID0+IGltcG9ydCgnLi4vLi4vY29tcG9uZW50cy9pY29ucy9leGNsYW1hdGlvblRyaWFuZ2xlJykpLFxuICAnaXMtZGFuZ2VyJzogZGVmaW5lQXN5bmNDb21wb25lbnQoKCkgPT4gaW1wb3J0KCcuLi8uLi9jb21wb25lbnRzL2ljb25zL2V4Y2xhbWF0aW9uQ2lyY2xlJykpXG59O1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0TWVzc2FnZUljb25zKGljb25zOiBQYXJ0aWFsPE1lc3NhZ2VJY29ucz4pIHtcbiAgcmV0dXJuIHtcbiAgICAuLi5ERUZBVUxUX01FU1NBR0VfSUNPTlMsXG4gICAgLi4uaWNvbnNcbiAgfTtcbn1cblxuZXhwb3J0IGNvbnN0IFVzZU1lc3NhZ2VQcm9wc0RlZmluaXRpb24gPSB7XG4gIC4uLmdldFVzZVRvZ2dsZVByb3BzRGVmaW5pdGlvbignaXNBY3RpdmUnKSxcbiAgdGl0bGU6IHtcbiAgICB0eXBlOiBTdHJpbmcgYXMgUHJvcFR5cGU8c3RyaW5nPlxuICB9LFxuICBpc0Nsb3NhYmxlOiB7XG4gICAgdHlwZTogQm9vbGVhbixcbiAgICBkZWZhdWx0OiB0cnVlXG4gIH0sXG4gIG1lc3NhZ2U6IHtcbiAgICB0eXBlOiBTdHJpbmcgYXMgUHJvcFR5cGU8c3RyaW5nPlxuICB9LFxuICB2YXJpYW50OiB7XG4gICAgdHlwZTogU3RyaW5nIGFzIFByb3BUeXBlPEFsbENvbG9yc1ZhcmlhbnQ+LFxuICAgIGRlZmF1bHQ6ICcnIGFzIGNvbnN0XG4gIH0sXG4gIHNpemU6IHtcbiAgICB0eXBlOiBTdHJpbmcgYXMgUHJvcFR5cGU8TWVzc2FnZVNpemU+LFxuICAgIGRlZmF1bHQ6ICcnIGFzIGNvbnN0XG4gIH0sXG4gIGljb25TaXplOiB7XG4gICAgdHlwZTogU3RyaW5nIGFzIFByb3BUeXBlPE1lc3NhZ2VTaXplPixcbiAgICBkZWZhdWx0OiAnJyBhcyBjb25zdFxuICB9LFxuICB1c2VBdXRvQ2xvc2U6IHtcbiAgICB0eXBlOiBCb29sZWFuIGFzIFByb3BUeXBlPGJvb2xlYW4+LFxuICAgIGRlZmF1bHQ6IGZhbHNlXG4gIH0sXG4gIGR1cmF0aW9uOiB7XG4gICAgdHlwZTogTnVtYmVyIGFzIFByb3BUeXBlPG51bWJlcj4sXG4gICAgZGVmYXVsdDogMjAwMFxuICB9LFxuICB1c2VJY29uOiB7XG4gICAgdHlwZTogQm9vbGVhbiBhcyBQcm9wVHlwZTxib29sZWFuPixcbiAgICBkZWZhdWx0OiBmYWxzZVxuICB9LFxuICBpY29uczoge1xuICAgIHR5cGU6IE9iamVjdCBhcyBQcm9wVHlwZTxQYXJ0aWFsPE1lc3NhZ2VJY29ucz4+LFxuICAgIGRlZmF1bHQ6IGNvbnN0YW50KERFRkFVTFRfTUVTU0FHRV9JQ09OUylcbiAgfVxufTtcblxuZXhwb3J0IHR5cGUgVXNlTWVzc2FnZVByb3BzID0gRXh0cmFjdFByb3BUeXBlczx0eXBlb2YgVXNlTWVzc2FnZVByb3BzRGVmaW5pdGlvbj47XG5cbmV4cG9ydCBmdW5jdGlvbiB1c2VNZXNzYWdlKHByb3BzOiBVc2VNZXNzYWdlUHJvcHMpIHtcbiAgY29uc3QgdG9nZ2xlID0gdXNlVG9nZ2xlKHByb3BzLCAnaXNBY3RpdmUnKTtcbiAgY29uc3QgaWNvbiA9IGNvbXB1dGVkKCgpID0+IHByb3BzLmljb25zW3Byb3BzLnZhcmlhbnRdKTtcbiAgY29uc3QgaWNvblNpemUgPSBjb21wdXRlZCgoKSA9PiBwcm9wcy5pY29uU2l6ZSB8fCBwcm9wcy5zaXplIHx8ICdpcy1sYXJnZScpO1xuICBmdW5jdGlvbiBzZXRBdXRvQ2xvc2UoKSB7XG4gICAgaWYgKHByb3BzLnVzZUF1dG9DbG9zZSkge1xuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIGlmICh0b2dnbGUuaXNPbi52YWx1ZSkge1xuICAgICAgICAgIHRvZ2dsZS5zZXRPZmYoKTtcbiAgICAgICAgfVxuICAgICAgfSwgcHJvcHMuZHVyYXRpb24pO1xuICAgIH1cbiAgfVxuICByZXR1cm4ge1xuICAgIC4uLnRvZ2dsZSxcbiAgICBpY29uLFxuICAgIGljb25TaXplLFxuICAgIHNldEF1dG9DbG9zZVxuICB9O1xufVxuXG5leHBvcnQgdHlwZSBNZXNzYWdlID0gUmV0dXJuVHlwZTx0eXBlb2YgdXNlTWVzc2FnZT47XG4iXX0=