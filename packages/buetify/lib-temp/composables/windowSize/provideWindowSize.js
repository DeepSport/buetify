import { constant } from 'fp-ts/lib/function';
import { none, some } from 'fp-ts/lib/Option';
import debounce from 'lodash.debounce';
import { watchEffect, provide, shallowRef, computed, onMounted, onUnmounted } from 'vue';
export const DEFAULT_WINDOW_SIZE_INJECTION = {
    windowSize: shallowRef(none)
};
export const DEFAULT_BREAK_POINTS = shallowRef({
    mobile: 768,
    tablet: 1023,
    desktop: 1215,
    widescreen: 1407,
    fullHD: 1408
});
export const WINDOW_SIZE_SYMBOL = Symbol('window-size');
export const ProvideWindowSizePropsDefinition = {
    breakPoints: {
        type: Object,
        required: false,
        default: constant(DEFAULT_BREAK_POINTS.value)
    }
};
export function getWindowSize() {
    const windowWidth = shallowRef(window.innerWidth);
    const resizeHandler = debounce(() => {
        windowWidth.value = window.innerWidth;
    }, 250);
    onMounted(() => window.addEventListener('resize', resizeHandler, { passive: true }));
    onUnmounted(() => window.removeEventListener('resize', resizeHandler));
    return computed(() => {
        const breakPoints = DEFAULT_BREAK_POINTS.value;
        const innerWidth = windowWidth.value;
        const isMobile = innerWidth <= breakPoints.mobile;
        const isTablet = innerWidth <= breakPoints.tablet && innerWidth > breakPoints.mobile;
        return {
            windowWidth: innerWidth,
            isMobile,
            isTablet,
            isTouch: isMobile || isTablet,
            isDesktop: innerWidth <= breakPoints.desktop && innerWidth > breakPoints.tablet,
            isWidescreen: innerWidth <= breakPoints.widescreen && innerWidth > breakPoints.desktop,
            isFullHD: innerWidth >= breakPoints.fullHD
        };
    });
}
export function provideWindowSize(props) {
    watchEffect(() => {
        DEFAULT_BREAK_POINTS.value = props.breakPoints;
    });
    const windowSize = getWindowSize();
    const injection = {
        windowSize: computed(() => some(windowSize.value))
    };
    provide(WINDOW_SIZE_SYMBOL, injection);
    return {
        windowSize
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvdmlkZVdpbmRvd1NpemUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29tcG9zYWJsZXMvd2luZG93U2l6ZS9wcm92aWRlV2luZG93U2l6ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDOUMsT0FBTyxFQUFFLElBQUksRUFBVSxJQUFJLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUN0RCxPQUFPLFFBQVEsTUFBTSxpQkFBaUIsQ0FBQztBQUN2QyxPQUFPLEVBQ0wsV0FBVyxFQUNYLE9BQU8sRUFDUCxVQUFVLEVBSVYsUUFBUSxFQUNSLFNBQVMsRUFDVCxXQUFXLEVBQ1osTUFBTSxLQUFLLENBQUM7QUFnQmIsTUFBTSxDQUFDLE1BQU0sNkJBQTZCLEdBQXdCO0lBQ2hFLFVBQVUsRUFBRSxVQUFVLENBQUMsSUFBSSxDQUFDO0NBQzdCLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxvQkFBb0IsR0FBRyxVQUFVLENBQUM7SUFDN0MsTUFBTSxFQUFFLEdBQUc7SUFDWCxNQUFNLEVBQUUsSUFBSTtJQUNaLE9BQU8sRUFBRSxJQUFJO0lBQ2IsVUFBVSxFQUFFLElBQUk7SUFDaEIsTUFBTSxFQUFFLElBQUk7Q0FDYixDQUFDLENBQUM7QUFJSCxNQUFNLENBQUMsTUFBTSxrQkFBa0IsR0FBRyxNQUFNLENBQUMsYUFBYSxDQUFDLENBQUM7QUFFeEQsTUFBTSxDQUFDLE1BQU0sZ0NBQWdDLEdBQUc7SUFDOUMsV0FBVyxFQUFFO1FBQ1gsSUFBSSxFQUFFLE1BQStCO1FBQ3JDLFFBQVEsRUFBRSxLQUFLO1FBQ2YsT0FBTyxFQUFFLFFBQVEsQ0FBQyxvQkFBb0IsQ0FBQyxLQUFLLENBQUM7S0FDOUM7Q0FDRixDQUFDO0FBSUYsTUFBTSxVQUFVLGFBQWE7SUFDM0IsTUFBTSxXQUFXLEdBQUcsVUFBVSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUVsRCxNQUFNLGFBQWEsR0FBRyxRQUFRLENBQUMsR0FBRyxFQUFFO1FBQ2xDLFdBQVcsQ0FBQyxLQUFLLEdBQUcsTUFBTSxDQUFDLFVBQVUsQ0FBQztJQUN4QyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFFUixTQUFTLENBQUMsR0FBRyxFQUFFLENBQUMsTUFBTSxDQUFDLGdCQUFnQixDQUFDLFFBQVEsRUFBRSxhQUFhLEVBQUUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ3JGLFdBQVcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxNQUFNLENBQUMsbUJBQW1CLENBQUMsUUFBUSxFQUFFLGFBQWEsQ0FBQyxDQUFDLENBQUM7SUFFdkUsT0FBTyxRQUFRLENBQUMsR0FBRyxFQUFFO1FBQ25CLE1BQU0sV0FBVyxHQUFHLG9CQUFvQixDQUFDLEtBQUssQ0FBQztRQUMvQyxNQUFNLFVBQVUsR0FBRyxXQUFXLENBQUMsS0FBSyxDQUFDO1FBQ3JDLE1BQU0sUUFBUSxHQUFHLFVBQVUsSUFBSSxXQUFXLENBQUMsTUFBTSxDQUFDO1FBQ2xELE1BQU0sUUFBUSxHQUFHLFVBQVUsSUFBSSxXQUFXLENBQUMsTUFBTSxJQUFJLFVBQVUsR0FBRyxXQUFXLENBQUMsTUFBTSxDQUFDO1FBQ3JGLE9BQU87WUFDTCxXQUFXLEVBQUUsVUFBVTtZQUN2QixRQUFRO1lBQ1IsUUFBUTtZQUNSLE9BQU8sRUFBRSxRQUFRLElBQUksUUFBUTtZQUM3QixTQUFTLEVBQUUsVUFBVSxJQUFJLFdBQVcsQ0FBQyxPQUFPLElBQUksVUFBVSxHQUFHLFdBQVcsQ0FBQyxNQUFNO1lBQy9FLFlBQVksRUFBRSxVQUFVLElBQUksV0FBVyxDQUFDLFVBQVUsSUFBSSxVQUFVLEdBQUcsV0FBVyxDQUFDLE9BQU87WUFDdEYsUUFBUSxFQUFFLFVBQVUsSUFBSSxXQUFXLENBQUMsTUFBTTtTQUMzQyxDQUFDO0lBQ0osQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDO0FBRUQsTUFBTSxVQUFVLGlCQUFpQixDQUFDLEtBQTZCO0lBQzdELFdBQVcsQ0FBQyxHQUFHLEVBQUU7UUFDZixvQkFBb0IsQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDLFdBQVcsQ0FBQztJQUNqRCxDQUFDLENBQUMsQ0FBQztJQUNILE1BQU0sVUFBVSxHQUFHLGFBQWEsRUFBRSxDQUFDO0lBRW5DLE1BQU0sU0FBUyxHQUF3QjtRQUNyQyxVQUFVLEVBQUUsUUFBUSxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7S0FDbkQsQ0FBQztJQUVGLE9BQU8sQ0FBQyxrQkFBa0IsRUFBRSxTQUFTLENBQUMsQ0FBQztJQUV2QyxPQUFPO1FBQ0wsVUFBVTtLQUNYLENBQUM7QUFDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY29uc3RhbnQgfSBmcm9tICdmcC10cy9saWIvZnVuY3Rpb24nO1xuaW1wb3J0IHsgbm9uZSwgT3B0aW9uLCBzb21lIH0gZnJvbSAnZnAtdHMvbGliL09wdGlvbic7XG5pbXBvcnQgZGVib3VuY2UgZnJvbSAnbG9kYXNoLmRlYm91bmNlJztcbmltcG9ydCB7XG4gIHdhdGNoRWZmZWN0LFxuICBwcm92aWRlLFxuICBzaGFsbG93UmVmLFxuICBSZWYsXG4gIFByb3BUeXBlLFxuICBFeHRyYWN0UHJvcFR5cGVzLFxuICBjb21wdXRlZCxcbiAgb25Nb3VudGVkLFxuICBvblVubW91bnRlZFxufSBmcm9tICd2dWUnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFdpbmRvd1NpemUge1xuICB3aW5kb3dXaWR0aDogbnVtYmVyO1xuICBpc01vYmlsZTogYm9vbGVhbjtcbiAgaXNUYWJsZXQ6IGJvb2xlYW47XG4gIGlzVG91Y2g6IGJvb2xlYW47XG4gIGlzRGVza3RvcDogYm9vbGVhbjtcbiAgaXNXaWRlc2NyZWVuOiBib29sZWFuO1xuICBpc0Z1bGxIRDogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBXaW5kb3dTaXplSW5qZWN0aW9uIHtcbiAgd2luZG93U2l6ZTogUmVmPE9wdGlvbjxXaW5kb3dTaXplPj47XG59XG5cbmV4cG9ydCBjb25zdCBERUZBVUxUX1dJTkRPV19TSVpFX0lOSkVDVElPTjogV2luZG93U2l6ZUluamVjdGlvbiA9IHtcbiAgd2luZG93U2l6ZTogc2hhbGxvd1JlZihub25lKVxufTtcblxuZXhwb3J0IGNvbnN0IERFRkFVTFRfQlJFQUtfUE9JTlRTID0gc2hhbGxvd1JlZih7XG4gIG1vYmlsZTogNzY4LFxuICB0YWJsZXQ6IDEwMjMsXG4gIGRlc2t0b3A6IDEyMTUsXG4gIHdpZGVzY3JlZW46IDE0MDcsXG4gIGZ1bGxIRDogMTQwOFxufSk7XG5cbmV4cG9ydCB0eXBlIEJyZWFrUG9pbnRzID0gdHlwZW9mIERFRkFVTFRfQlJFQUtfUE9JTlRTLnZhbHVlO1xuXG5leHBvcnQgY29uc3QgV0lORE9XX1NJWkVfU1lNQk9MID0gU3ltYm9sKCd3aW5kb3ctc2l6ZScpO1xuXG5leHBvcnQgY29uc3QgUHJvdmlkZVdpbmRvd1NpemVQcm9wc0RlZmluaXRpb24gPSB7XG4gIGJyZWFrUG9pbnRzOiB7XG4gICAgdHlwZTogT2JqZWN0IGFzIFByb3BUeXBlPEJyZWFrUG9pbnRzPixcbiAgICByZXF1aXJlZDogZmFsc2UsXG4gICAgZGVmYXVsdDogY29uc3RhbnQoREVGQVVMVF9CUkVBS19QT0lOVFMudmFsdWUpXG4gIH1cbn07XG5cbmV4cG9ydCB0eXBlIFByb3ZpZGVXaW5kb3dTaXplUHJvcHMgPSBFeHRyYWN0UHJvcFR5cGVzPHR5cGVvZiBQcm92aWRlV2luZG93U2l6ZVByb3BzRGVmaW5pdGlvbj47XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRXaW5kb3dTaXplKCk6IFJlZjxXaW5kb3dTaXplPiB7XG4gIGNvbnN0IHdpbmRvd1dpZHRoID0gc2hhbGxvd1JlZih3aW5kb3cuaW5uZXJXaWR0aCk7XG5cbiAgY29uc3QgcmVzaXplSGFuZGxlciA9IGRlYm91bmNlKCgpID0+IHtcbiAgICB3aW5kb3dXaWR0aC52YWx1ZSA9IHdpbmRvdy5pbm5lcldpZHRoO1xuICB9LCAyNTApO1xuXG4gIG9uTW91bnRlZCgoKSA9PiB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgcmVzaXplSGFuZGxlciwgeyBwYXNzaXZlOiB0cnVlIH0pKTtcbiAgb25Vbm1vdW50ZWQoKCkgPT4gd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHJlc2l6ZUhhbmRsZXIpKTtcblxuICByZXR1cm4gY29tcHV0ZWQoKCkgPT4ge1xuICAgIGNvbnN0IGJyZWFrUG9pbnRzID0gREVGQVVMVF9CUkVBS19QT0lOVFMudmFsdWU7XG4gICAgY29uc3QgaW5uZXJXaWR0aCA9IHdpbmRvd1dpZHRoLnZhbHVlO1xuICAgIGNvbnN0IGlzTW9iaWxlID0gaW5uZXJXaWR0aCA8PSBicmVha1BvaW50cy5tb2JpbGU7XG4gICAgY29uc3QgaXNUYWJsZXQgPSBpbm5lcldpZHRoIDw9IGJyZWFrUG9pbnRzLnRhYmxldCAmJiBpbm5lcldpZHRoID4gYnJlYWtQb2ludHMubW9iaWxlO1xuICAgIHJldHVybiB7XG4gICAgICB3aW5kb3dXaWR0aDogaW5uZXJXaWR0aCxcbiAgICAgIGlzTW9iaWxlLFxuICAgICAgaXNUYWJsZXQsXG4gICAgICBpc1RvdWNoOiBpc01vYmlsZSB8fCBpc1RhYmxldCxcbiAgICAgIGlzRGVza3RvcDogaW5uZXJXaWR0aCA8PSBicmVha1BvaW50cy5kZXNrdG9wICYmIGlubmVyV2lkdGggPiBicmVha1BvaW50cy50YWJsZXQsXG4gICAgICBpc1dpZGVzY3JlZW46IGlubmVyV2lkdGggPD0gYnJlYWtQb2ludHMud2lkZXNjcmVlbiAmJiBpbm5lcldpZHRoID4gYnJlYWtQb2ludHMuZGVza3RvcCxcbiAgICAgIGlzRnVsbEhEOiBpbm5lcldpZHRoID49IGJyZWFrUG9pbnRzLmZ1bGxIRFxuICAgIH07XG4gIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcHJvdmlkZVdpbmRvd1NpemUocHJvcHM6IFByb3ZpZGVXaW5kb3dTaXplUHJvcHMpIHtcbiAgd2F0Y2hFZmZlY3QoKCkgPT4ge1xuICAgIERFRkFVTFRfQlJFQUtfUE9JTlRTLnZhbHVlID0gcHJvcHMuYnJlYWtQb2ludHM7XG4gIH0pO1xuICBjb25zdCB3aW5kb3dTaXplID0gZ2V0V2luZG93U2l6ZSgpO1xuXG4gIGNvbnN0IGluamVjdGlvbjogV2luZG93U2l6ZUluamVjdGlvbiA9IHtcbiAgICB3aW5kb3dTaXplOiBjb21wdXRlZCgoKSA9PiBzb21lKHdpbmRvd1NpemUudmFsdWUpKVxuICB9O1xuXG4gIHByb3ZpZGUoV0lORE9XX1NJWkVfU1lNQk9MLCBpbmplY3Rpb24pO1xuXG4gIHJldHVybiB7XG4gICAgd2luZG93U2l6ZVxuICB9O1xufVxuIl19