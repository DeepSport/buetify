import './message.sass';
import { useMessage, UseMessagePropsDefinition } from '../../composables/message';
import { FadeTransitionPropsDefinition, useTransition } from '../../composables/transition';
import { defineComponent, h, Transition } from 'vue';
function generateBody(props, context, message) {
    const nodes = [];
    if (!!message.icon.value && props.useIcon) {
        nodes.push(h('div', { class: 'media-left' }, [
            h(message.icon.value, {
                size: message.iconSize.value,
                variant: props.variant,
                class: props.variant
            })
        ]));
    }
    nodes.push(h('div', { class: 'media-content' }, (context.slots.default && context.slots.default()) || props.message));
    return h('section', {
        class: 'message-body',
        'aria-label': 'Close message'
    }, [h('div', { class: 'media' }, nodes)]);
}
function generateHeader(props, context, message) {
    const nodes = (context.slots.header && context.slots.header()) || [h('h1', props.title)];
    if (props.isClosable) {
        nodes.push(h('button', {
            class: 'delete',
            attrs: { 'aria-label': `Close message` },
            ...message.listeners
        }));
    }
    return h('header', { class: 'message-header' }, nodes);
}
function generateMessage(props, context, message) {
    return h('article', { class: ['message', props.variant, props.size] }, context.slots.title || !!props.title
        ? [generateHeader(props, context, message), generateBody(props, context, message)]
        : [generateBody(props, context, message)]);
}
export default defineComponent({
    name: 'b-message',
    props: {
        ...UseMessagePropsDefinition,
        ...FadeTransitionPropsDefinition
    },
    setup(props, context) {
        const message = useMessage(props);
        const transition = useTransition(props);
        return h(Transition, { ...transition.value }, message.isOn.value && generateMessage(props, context, message));
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQk1lc3NhZ2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29tcG9uZW50cy9tZXNzYWdlL0JNZXNzYWdlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sZ0JBQWdCLENBQUM7QUFDeEIsT0FBTyxFQUFXLFVBQVUsRUFBbUIseUJBQXlCLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUM1RyxPQUFPLEVBQUUsNkJBQTZCLEVBQUUsYUFBYSxFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFDNUYsT0FBTyxFQUFTLGVBQWUsRUFBRSxDQUFDLEVBQUUsVUFBVSxFQUFnQixNQUFNLEtBQUssQ0FBQztBQUUxRSxTQUFTLFlBQVksQ0FBQyxLQUFzQixFQUFFLE9BQXFCLEVBQUUsT0FBZ0I7SUFDbkYsTUFBTSxLQUFLLEdBQVksRUFBRSxDQUFDO0lBQzFCLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxJQUFJLEtBQUssQ0FBQyxPQUFPLEVBQUU7UUFDekMsS0FBSyxDQUFDLElBQUksQ0FDUixDQUFDLENBQUMsS0FBSyxFQUFFLEVBQUUsS0FBSyxFQUFFLFlBQVksRUFBRSxFQUFFO1lBQ2hDLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQVksRUFBRTtnQkFDM0IsSUFBSSxFQUFFLE9BQU8sQ0FBQyxRQUFRLENBQUMsS0FBSztnQkFDNUIsT0FBTyxFQUFFLEtBQUssQ0FBQyxPQUFPO2dCQUN0QixLQUFLLEVBQUUsS0FBSyxDQUFDLE9BQU87YUFDckIsQ0FBQztTQUNILENBQUMsQ0FDSCxDQUFDO0tBQ0g7SUFDRCxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxLQUFLLEVBQUUsZUFBZSxFQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLE9BQU8sSUFBSSxPQUFPLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxDQUFDLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7SUFDdEgsT0FBTyxDQUFDLENBQ04sU0FBUyxFQUNUO1FBQ0UsS0FBSyxFQUFFLGNBQWM7UUFDckIsWUFBWSxFQUFFLGVBQWU7S0FDOUIsRUFDRCxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FDdEMsQ0FBQztBQUNKLENBQUM7QUFFRCxTQUFTLGNBQWMsQ0FBQyxLQUFzQixFQUFFLE9BQXFCLEVBQUUsT0FBZ0I7SUFDckYsTUFBTSxLQUFLLEdBQUcsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLE1BQU0sSUFBSSxPQUFPLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0lBQ3pGLElBQUksS0FBSyxDQUFDLFVBQVUsRUFBRTtRQUNwQixLQUFLLENBQUMsSUFBSSxDQUNSLENBQUMsQ0FBQyxRQUFRLEVBQUU7WUFDVixLQUFLLEVBQUUsUUFBUTtZQUNmLEtBQUssRUFBRSxFQUFFLFlBQVksRUFBRSxlQUFlLEVBQUU7WUFDeEMsR0FBRyxPQUFPLENBQUMsU0FBUztTQUNyQixDQUFDLENBQ0gsQ0FBQztLQUNIO0lBQ0QsT0FBTyxDQUFDLENBQUMsUUFBUSxFQUFFLEVBQUUsS0FBSyxFQUFFLGdCQUFnQixFQUFFLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDekQsQ0FBQztBQUVELFNBQVMsZUFBZSxDQUFDLEtBQXNCLEVBQUUsT0FBcUIsRUFBRSxPQUFnQjtJQUN0RixPQUFPLENBQUMsQ0FDTixTQUFTLEVBQ1QsRUFBRSxLQUFLLEVBQUUsQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFDakQsT0FBTyxDQUFDLEtBQUssQ0FBQyxLQUFLLElBQUksQ0FBQyxDQUFDLEtBQUssQ0FBQyxLQUFLO1FBQ2xDLENBQUMsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxLQUFLLEVBQUUsT0FBTyxFQUFFLE9BQU8sQ0FBQyxFQUFFLFlBQVksQ0FBQyxLQUFLLEVBQUUsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQ2xGLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxLQUFLLEVBQUUsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQzVDLENBQUM7QUFDSixDQUFDO0FBRUQsZUFBZSxlQUFlLENBQUM7SUFDN0IsSUFBSSxFQUFFLFdBQVc7SUFDakIsS0FBSyxFQUFFO1FBQ0wsR0FBRyx5QkFBeUI7UUFDNUIsR0FBRyw2QkFBNkI7S0FDakM7SUFDRCxLQUFLLENBQUMsS0FBSyxFQUFFLE9BQU87UUFDbEIsTUFBTSxPQUFPLEdBQUcsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ2xDLE1BQU0sVUFBVSxHQUFHLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUN4QyxPQUFPLENBQUMsQ0FBQyxVQUFVLEVBQUUsRUFBRSxHQUFHLFVBQVUsQ0FBQyxLQUFLLEVBQUUsRUFBRSxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssSUFBSSxlQUFlLENBQUMsS0FBSyxFQUFFLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDO0lBQ2hILENBQUM7Q0FDRixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgJy4vbWVzc2FnZS5zYXNzJztcbmltcG9ydCB7IE1lc3NhZ2UsIHVzZU1lc3NhZ2UsIFVzZU1lc3NhZ2VQcm9wcywgVXNlTWVzc2FnZVByb3BzRGVmaW5pdGlvbiB9IGZyb20gJy4uLy4uL2NvbXBvc2FibGVzL21lc3NhZ2UnO1xuaW1wb3J0IHsgRmFkZVRyYW5zaXRpb25Qcm9wc0RlZmluaXRpb24sIHVzZVRyYW5zaXRpb24gfSBmcm9tICcuLi8uLi9jb21wb3NhYmxlcy90cmFuc2l0aW9uJztcbmltcG9ydCB7IFZOb2RlLCBkZWZpbmVDb21wb25lbnQsIGgsIFRyYW5zaXRpb24sIFNldHVwQ29udGV4dCB9IGZyb20gJ3Z1ZSc7XG5cbmZ1bmN0aW9uIGdlbmVyYXRlQm9keShwcm9wczogVXNlTWVzc2FnZVByb3BzLCBjb250ZXh0OiBTZXR1cENvbnRleHQsIG1lc3NhZ2U6IE1lc3NhZ2UpOiBWTm9kZSB7XG4gIGNvbnN0IG5vZGVzOiBWTm9kZVtdID0gW107XG4gIGlmICghIW1lc3NhZ2UuaWNvbi52YWx1ZSAmJiBwcm9wcy51c2VJY29uKSB7XG4gICAgbm9kZXMucHVzaChcbiAgICAgIGgoJ2RpdicsIHsgY2xhc3M6ICdtZWRpYS1sZWZ0JyB9LCBbXG4gICAgICAgIGgobWVzc2FnZS5pY29uLnZhbHVlIGFzIGFueSwge1xuICAgICAgICAgIHNpemU6IG1lc3NhZ2UuaWNvblNpemUudmFsdWUsXG4gICAgICAgICAgdmFyaWFudDogcHJvcHMudmFyaWFudCxcbiAgICAgICAgICBjbGFzczogcHJvcHMudmFyaWFudFxuICAgICAgICB9KVxuICAgICAgXSlcbiAgICApO1xuICB9XG4gIG5vZGVzLnB1c2goaCgnZGl2JywgeyBjbGFzczogJ21lZGlhLWNvbnRlbnQnIH0sIChjb250ZXh0LnNsb3RzLmRlZmF1bHQgJiYgY29udGV4dC5zbG90cy5kZWZhdWx0KCkpIHx8IHByb3BzLm1lc3NhZ2UpKTtcbiAgcmV0dXJuIGgoXG4gICAgJ3NlY3Rpb24nLFxuICAgIHtcbiAgICAgIGNsYXNzOiAnbWVzc2FnZS1ib2R5JyxcbiAgICAgICdhcmlhLWxhYmVsJzogJ0Nsb3NlIG1lc3NhZ2UnXG4gICAgfSxcbiAgICBbaCgnZGl2JywgeyBjbGFzczogJ21lZGlhJyB9LCBub2RlcyldXG4gICk7XG59XG5cbmZ1bmN0aW9uIGdlbmVyYXRlSGVhZGVyKHByb3BzOiBVc2VNZXNzYWdlUHJvcHMsIGNvbnRleHQ6IFNldHVwQ29udGV4dCwgbWVzc2FnZTogTWVzc2FnZSk6IFZOb2RlIHtcbiAgY29uc3Qgbm9kZXMgPSAoY29udGV4dC5zbG90cy5oZWFkZXIgJiYgY29udGV4dC5zbG90cy5oZWFkZXIoKSkgfHwgW2goJ2gxJywgcHJvcHMudGl0bGUpXTtcbiAgaWYgKHByb3BzLmlzQ2xvc2FibGUpIHtcbiAgICBub2Rlcy5wdXNoKFxuICAgICAgaCgnYnV0dG9uJywge1xuICAgICAgICBjbGFzczogJ2RlbGV0ZScsXG4gICAgICAgIGF0dHJzOiB7ICdhcmlhLWxhYmVsJzogYENsb3NlIG1lc3NhZ2VgIH0sXG4gICAgICAgIC4uLm1lc3NhZ2UubGlzdGVuZXJzXG4gICAgICB9KVxuICAgICk7XG4gIH1cbiAgcmV0dXJuIGgoJ2hlYWRlcicsIHsgY2xhc3M6ICdtZXNzYWdlLWhlYWRlcicgfSwgbm9kZXMpO1xufVxuXG5mdW5jdGlvbiBnZW5lcmF0ZU1lc3NhZ2UocHJvcHM6IFVzZU1lc3NhZ2VQcm9wcywgY29udGV4dDogU2V0dXBDb250ZXh0LCBtZXNzYWdlOiBNZXNzYWdlKTogVk5vZGUge1xuICByZXR1cm4gaChcbiAgICAnYXJ0aWNsZScsXG4gICAgeyBjbGFzczogWydtZXNzYWdlJywgcHJvcHMudmFyaWFudCwgcHJvcHMuc2l6ZV0gfSxcbiAgICBjb250ZXh0LnNsb3RzLnRpdGxlIHx8ICEhcHJvcHMudGl0bGVcbiAgICAgID8gW2dlbmVyYXRlSGVhZGVyKHByb3BzLCBjb250ZXh0LCBtZXNzYWdlKSwgZ2VuZXJhdGVCb2R5KHByb3BzLCBjb250ZXh0LCBtZXNzYWdlKV1cbiAgICAgIDogW2dlbmVyYXRlQm9keShwcm9wcywgY29udGV4dCwgbWVzc2FnZSldXG4gICk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGRlZmluZUNvbXBvbmVudCh7XG4gIG5hbWU6ICdiLW1lc3NhZ2UnLFxuICBwcm9wczoge1xuICAgIC4uLlVzZU1lc3NhZ2VQcm9wc0RlZmluaXRpb24sXG4gICAgLi4uRmFkZVRyYW5zaXRpb25Qcm9wc0RlZmluaXRpb25cbiAgfSxcbiAgc2V0dXAocHJvcHMsIGNvbnRleHQpIHtcbiAgICBjb25zdCBtZXNzYWdlID0gdXNlTWVzc2FnZShwcm9wcyk7XG4gICAgY29uc3QgdHJhbnNpdGlvbiA9IHVzZVRyYW5zaXRpb24ocHJvcHMpO1xuICAgIHJldHVybiBoKFRyYW5zaXRpb24sIHsgLi4udHJhbnNpdGlvbi52YWx1ZSB9LCBtZXNzYWdlLmlzT24udmFsdWUgJiYgZ2VuZXJhdGVNZXNzYWdlKHByb3BzLCBjb250ZXh0LCBtZXNzYWdlKSk7XG4gIH1cbn0pO1xuIl19