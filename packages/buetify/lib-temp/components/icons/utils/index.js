import { parse as faParse, icon as faIcon } from '@fortawesome/fontawesome-svg-core';
import { h, defineComponent } from 'vue';
// import { IconDefinition } from '@fortawesome/fontawesome-common-types';
import { camelize } from '../../../utils/helpers';
import { mergeClasses } from '../../../utils/mergeClasses';
import { BIcon } from '../../icon';
import { BIconPropsDefinition } from '../../icon/BIcon';
//replace iconDefinition with actual definition from fontawesome. causing some typescript issues at the moment
function objectWithKey(key, value) {
    return (Array.isArray(value) && value.length > 0) || (!Array.isArray(value) && value) ? { [key]: value } : {};
}
// eslint-disable-next-line
export function classList(props) {
    const classes = {
        'fa-spin': props.spin,
        'fa-pulse': props.pulse,
        'fa-fw': props.fixedWidth,
        'fa-border': props.border,
        'fa-li': props.listItem,
        'fa-inverse': props.inverse,
        'fa-flip-horizontal': props.flip === 'horizontal' || props.flip === 'both',
        'fa-flip-vertical': props.flip === 'vertical' || props.flip === 'both',
        [`fa-${props.size}`]: props.size !== undefined,
        [`fa-rotate-${props.rotation}`]: props.rotation !== undefined,
        [`fa-pull-${props.pull}`]: props.pull !== undefined,
        'fa-swap-opacity': props.swapOpacity
    };
    return Object.keys(classes)
        .map(key => (classes[key] ? key : null))
        .filter(key => key);
}
function styleToObject(style) {
    return style
        .split(';')
        .map(s => s.trim())
        .filter(s => s)
        .reduce((acc, pair) => {
        const i = pair.indexOf(':');
        const prop = camelize(pair.slice(0, i));
        const value = pair.slice(i + 1).trim();
        acc[prop] = value;
        return acc;
    }, {}); // eslint-disable-line
}
function classToObject(cls) {
    return cls.split(/\s+/).reduce((acc, c) => {
        acc[c] = true;
        return acc;
    }, {}); // eslint-disable-line
}
// eslint-disable-next-line
function normalizeIconArgs(icon) {
    if (icon === null) {
        return null;
    }
    if (typeof icon === 'object' && icon.prefix && icon.iconName) {
        return icon;
    }
    if (Array.isArray(icon) && icon.length === 2) {
        return { prefix: icon[0], iconName: icon[1] };
    }
    if (typeof icon === 'string') {
        return { prefix: 'fas', iconName: icon };
    }
}
// eslint-disable-next-line
function convert(element, attrs = {}) {
    if (typeof element === 'string') {
        return h(element);
    }
    const mixins = Object.keys(element.attributes || {}).reduce((acc, key) => {
        const val = element.attributes[key];
        switch (key) {
            case 'class':
                acc['class'] = classToObject(val);
                break;
            case 'style':
                acc['style'] = styleToObject(val);
                break;
            default:
                acc[key] = val;
        }
        return acc;
    }, { class: {}, style: {} } // eslint-disable-line
    );
    const { class: dClass = {}, style: dStyle = {}, ...remainingData } = attrs;
    const { class: mClass = {}, style: mStyle = {}, ...mRemainingData } = mixins;
    return h(element.tag, {
        ...attrs,
        class: mergeClasses(mClass, dClass),
        style: { ...mStyle, ...dStyle },
        ...mRemainingData,
        ...remainingData
    }, (element.children || []).map(convert));
}
// eslint-disable-next-line
export function useFontAwesomeIconComponent(iconArgs) {
    return function FontAwesomeIcon(_, { attrs }) {
        const { mask: maskArgs, symbol, title } = attrs; // eslint-disable-line
        const icon = normalizeIconArgs(iconArgs);
        const classes = objectWithKey('classes', classList(attrs));
        const transform = objectWithKey('transform', typeof attrs.transform === 'string' ? faParse.transform(attrs.transform) : attrs.transform);
        const mask = objectWithKey('mask', normalizeIconArgs(maskArgs));
        const { abstract } = faIcon(icon, { ...classes, ...transform, ...mask, symbol, title });
        return convert(abstract[0], attrs);
    };
}
// eslint-disable-next-line
export function useIconComponent(name, iconDefinition) {
    const icon = useFontAwesomeIconComponent(iconDefinition);
    return defineComponent({
        props: {
            ...BIconPropsDefinition,
            iconClass: {
                type: String
            }
        },
        setup(props) {
            return () => h(BIcon, props, () => h(icon, { class: props.iconClass }));
        }
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9pY29ucy91dGlscy9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsS0FBSyxJQUFJLE9BQU8sRUFBRSxJQUFJLElBQUksTUFBTSxFQUFFLE1BQU0sbUNBQW1DLENBQUM7QUFDckYsT0FBTyxFQUFFLENBQUMsRUFBNEMsZUFBZSxFQUFFLE1BQU0sS0FBSyxDQUFDO0FBQ25GLDBFQUEwRTtBQUMxRSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDbEQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBQzNELE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFDbkMsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFFeEQsOEdBQThHO0FBRTlHLFNBQVMsYUFBYSxDQUFDLEdBQVcsRUFBRSxLQUFjO0lBQ2hELE9BQU8sQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxJQUFJLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLElBQUksS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0FBQ2hILENBQUM7QUFFRCwyQkFBMkI7QUFDM0IsTUFBTSxVQUFVLFNBQVMsQ0FBQyxLQUFVO0lBQ2xDLE1BQU0sT0FBTyxHQUFHO1FBQ2QsU0FBUyxFQUFFLEtBQUssQ0FBQyxJQUFJO1FBQ3JCLFVBQVUsRUFBRSxLQUFLLENBQUMsS0FBSztRQUN2QixPQUFPLEVBQUUsS0FBSyxDQUFDLFVBQVU7UUFDekIsV0FBVyxFQUFFLEtBQUssQ0FBQyxN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QUFDLENBQUM7UUFFaEUsTUFBTSxFQUFFLFFBQVEsRUFBRSxHQUFHLE1BQU0sQ0FBQyxJQUFJLEVBQUUsRUFBRSxHQUFHLE9BQU8sRUFBRSxHQUFHLFNBQVMsRUFBRSxHQUFHLElBQUksRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztRQUN4RixPQUFPLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDckMsQ0FBQyxDQUFDO0FBQ0osQ0FBQztBQUVELDJCQUEyQjtBQUMzQixNQUFNLFVBQVUsZ0JBQWdCLENBQUMsSUFBWSxFQUFFLGNBQW1CO0lBQ2hFLE1BQU0sSUFBSSxHQUFHLDJCQUEyQixDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBQ3pELE9BQU8sZUFBZSxDQUFDO1FBQ3JCLEtBQUssRUFBRTtZQUNMLEdBQUcsb0JBQW9CO1lBQ3ZCLFNBQVMsRUFBRTtnQkFDVCxJQUFJLEVBQUUsTUFBTTthQUNiO1NBQ0Y7UUFDRCxLQUFLLENBQUMsS0FBSztZQUNULE9BQU8sR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFLEtBQUssRUFBRSxLQUFLLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQzFFLENBQUM7S0FDRixDQUFRLENBQUM7QUFDWixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcGFyc2UgYXMgZmFQYXJzZSwgaWNvbiBhcyBmYUljb24gfSBmcm9tICdAZm9ydGF3ZXNvbWUvZm9udGF3ZXNvbWUtc3ZnLWNvcmUnO1xuaW1wb3J0IHsgaCwgU2V0dXBDb250ZXh0LCBWTm9kZSwgRnVuY3Rpb25hbENvbXBvbmVudCwgZGVmaW5lQ29tcG9uZW50IH0gZnJvbSAndnVlJztcbi8vIGltcG9ydCB7IEljb25EZWZpbml0aW9uIH0gZnJvbSAnQGZvcnRhd2Vzb21lL2ZvbnRhd2Vzb21lLWNvbW1vbi10eXBlcyc7XG5pbXBvcnQgeyBjYW1lbGl6ZSB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL2hlbHBlcnMnO1xuaW1wb3J0IHsgbWVyZ2VDbGFzc2VzIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvbWVyZ2VDbGFzc2VzJztcbmltcG9ydCB7IEJJY29uIH0gZnJvbSAnLi4vLi4vaWNvbic7XG5pbXBvcnQgeyBCSWNvblByb3BzRGVmaW5pdGlvbiB9IGZyb20gJy4uLy4uL2ljb24vQkljb24nO1xuXG4vL3JlcGxhY2UgaWNvbkRlZmluaXRpb24gd2l0aCBhY3R1YWwgZGVmaW5pdGlvbiBmcm9tIGZvbnRhd2Vzb21lLiBjYXVzaW5nIHNvbWUgdHlwZXNjcmlwdCBpc3N1ZXMgYXQgdGhlIG1vbWVudFxuXG5mdW5jdGlvbiBvYmplY3RXaXRoS2V5KGtleTogc3RyaW5nLCB2YWx1ZTogdW5rbm93bikge1xuICByZXR1cm4gKEFycmF5LmlzQXJyYXkodmFsdWUpICYmIHZhbHVlLmxlbmd0aCA+IDApIHx8ICghQXJyYXkuaXNBcnJheSh2YWx1ZSkgJiYgdmFsdWUpID8geyBba2V5XTogdmFsdWUgfSA6IHt9O1xufVxuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbmV4cG9ydCBmdW5jdGlvbiBjbGFzc0xpc3QocHJvcHM6IGFueSkge1xuICBjb25zdCBjbGFzc2VzID0ge1xuICAgICdmYS1zcGluJzogcHJvcHMuc3BpbixcbiAgICAnZmEtcHVsc2UnOiBwcm9wcy5wdWxzZSxcbiAgICAnZmEtZncnOiBwcm9wcy5maXhlZFdpZHRoLFxuICAgICdmYS1ib3JkZXInOiBwcm9wcy5ib3JkZXIsXG4gICAgJ2ZhLWxpJzogcHJvcHMubGlzdEl0ZW0sXG4gICAgJ2ZhLWludmVyc2UnOiBwcm9wcy5pbnZlcnNlLFxuICAgICdmYS1mbGlwLWhvcml6b250YWwnOiBwcm9wcy5mbGlwID09PSAnaG9yaXpvbnRhbCcgfHwgcHJvcHMuZmxpcCA9PT0gJ2JvdGgnLFxuICAgICdmYS1mbGlwLXZlcnRpY2FsJzogcHJvcHMuZmxpcCA9PT0gJ3ZlcnRpY2FsJyB8fCBwcm9wcy5mbGlwID09PSAnYm90aCcsXG4gICAgW2BmYS0ke3Byb3BzLnNpemV9YF06IHByb3BzLnNpemUgIT09IHVuZGVmaW5lZCxcbiAgICBbYGZhLXJvdGF0ZS0ke3Byb3BzLnJvdGF0aW9ufWBdOiBwcm9wcy5yb3RhdGlvbiAhPT0gdW5kZWZpbmVkLFxuICAgIFtgZmEtcHVsbC0ke3Byb3BzLnB1bGx9YF06IHByb3BzLnB1bGwgIT09IHVuZGVmaW5lZCxcbiAgICAnZmEtc3dhcC1vcGFjaXR5JzogcHJvcHMuc3dhcE9wYWNpdHlcbiAgfTtcblxuICByZXR1cm4gT2JqZWN0LmtleXMoY2xhc3NlcylcbiAgICAubWFwKGtleSA9PiAoY2xhc3Nlc1trZXldID8ga2V5IDogbnVsbCkpXG4gICAgLmZpbHRlcihrZXkgPT4ga2V5KTtcbn1cblxuZnVuY3Rpb24gc3R5bGVUb09iamVjdChzdHlsZTogc3RyaW5nKSB7XG4gIHJldHVybiBzdHlsZVxuICAgIC5zcGxpdCgnOycpXG4gICAgLm1hcChzID0+IHMudHJpbSgpKVxuICAgIC5maWx0ZXIocyA9PiBzKVxuICAgIC5yZWR1Y2UoKGFjYywgcGFpcikgPT4ge1xuICAgICAgY29uc3QgaSA9IHBhaXIuaW5kZXhPZignOicpO1xuICAgICAgY29uc3QgcHJvcCA9IGNhbWVsaXplKHBhaXIuc2xpY2UoMCwgaSkpO1xuICAgICAgY29uc3QgdmFsdWUgPSBwYWlyLnNsaWNlKGkgKyAxKS50cmltKCk7XG5cbiAgICAgIGFjY1twcm9wXSA9IHZhbHVlO1xuXG4gICAgICByZXR1cm4gYWNjO1xuICAgIH0sIHt9IGFzIGFueSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbn1cblxuZnVuY3Rpb24gY2xhc3NUb09iamVjdChjbHM6IHN0cmluZykge1xuICByZXR1cm4gY2xzLnNwbGl0KC9cXHMrLykucmVkdWNlKChhY2MsIGMpID0+IHtcbiAgICBhY2NbY10gPSB0cnVlO1xuXG4gICAgcmV0dXJuIGFjYztcbiAgfSwge30gYXMgYW55KTsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxufVxuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbmZ1bmN0aW9uIG5vcm1hbGl6ZUljb25BcmdzKGljb246IGFueSkge1xuICBpZiAoaWNvbiA9PT0gbnVsbCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBpY29uID09PSAnb2JqZWN0JyAmJiBpY29uLnByZWZpeCAmJiBpY29uLmljb25OYW1lKSB7XG4gICAgcmV0dXJuIGljb247XG4gIH1cblxuICBpZiAoQXJyYXkuaXNBcnJheShpY29uKSAmJiBpY29uLmxlbmd0aCA9PT0gMikge1xuICAgIHJldHVybiB7IHByZWZpeDogaWNvblswXSwgaWNvbk5hbWU6IGljb25bMV0gfTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgaWNvbiA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4geyBwcmVmaXg6ICdmYXMnLCBpY29uTmFtZTogaWNvbiB9O1xuICB9XG59XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuZnVuY3Rpb24gY29udmVydChlbGVtZW50OiBhbnksIGF0dHJzOiBhbnkgPSB7fSk6IFZOb2RlIHtcbiAgaWYgKHR5cGVvZiBlbGVtZW50ID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBoKGVsZW1lbnQpO1xuICB9XG5cbiAgY29uc3QgbWl4aW5zID0gT2JqZWN0LmtleXMoZWxlbWVudC5hdHRyaWJ1dGVzIHx8IHt9KS5yZWR1Y2UoXG4gICAgKGFjYywga2V5KSA9PiB7XG4gICAgICBjb25zdCB2YWwgPSBlbGVtZW50LmF0dHJpYnV0ZXNba2V5XTtcblxuICAgICAgc3dpdGNoIChrZXkpIHtcbiAgICAgICAgY2FzZSAnY2xhc3MnOlxuICAgICAgICAgIGFjY1snY2xhc3MnXSA9IGNsYXNzVG9PYmplY3QodmFsKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnc3R5bGUnOlxuICAgICAgICAgIGFjY1snc3R5bGUnXSA9IHN0eWxlVG9PYmplY3QodmFsKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBhY2Nba2V5XSA9IHZhbDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGFjYztcbiAgICB9LFxuICAgIHsgY2xhc3M6IHt9LCBzdHlsZToge30gfSBhcyBhbnkgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICApO1xuICBjb25zdCB7IGNsYXNzOiBkQ2xhc3MgPSB7fSwgc3R5bGU6IGRTdHlsZSA9IHt9LCAuLi5yZW1haW5pbmdEYXRhIH0gPSBhdHRycztcbiAgY29uc3QgeyBjbGFzczogbUNsYXNzID0ge30sIHN0eWxlOiBtU3R5bGUgPSB7fSwgLi4ubVJlbWFpbmluZ0RhdGEgfSA9IG1peGlucztcbiAgcmV0dXJuIGgoXG4gICAgZWxlbWVudC50YWcsXG4gICAge1xuICAgICAgLi4uYXR0cnMsXG4gICAgICBjbGFzczogbWVyZ2VDbGFzc2VzKG1DbGFzcywgZENsYXNzKSxcbiAgICAgIHN0eWxlOiB7IC4uLm1TdHlsZSwgLi4uZFN0eWxlIH0sXG4gICAgICAuLi5tUmVtYWluaW5nRGF0YSxcbiAgICAgIC4uLnJlbWFpbmluZ0RhdGFcbiAgICB9LFxuICAgIChlbGVtZW50LmNoaWxkcmVuIHx8IFtdKS5tYXAoY29udmVydClcbiAgKTtcbn1cblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG5leHBvcnQgZnVuY3Rpb24gdXNlRm9udEF3ZXNvbWVJY29uQ29tcG9uZW50KGljb25BcmdzOiBhbnkpOiBGdW5jdGlvbmFsQ29tcG9uZW50IHtcbiAgcmV0dXJuIGZ1bmN0aW9uIEZvbnRBd2Vzb21lSWNvbihfLCB7IGF0dHJzIH06IFNldHVwQ29udGV4dCk6IFZOb2RlIHtcbiAgICBjb25zdCB7IG1hc2s6IG1hc2tBcmdzLCBzeW1ib2wsIHRpdGxlIH0gPSBhdHRycyBhcyBhbnk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICBjb25zdCBpY29uID0gbm9ybWFsaXplSWNvbkFyZ3MoaWNvbkFyZ3MpO1xuICAgIGNvbnN0IGNsYXNzZXMgPSBvYmplY3RXaXRoS2V5KCdjbGFzc2VzJywgY2xhc3NMaXN0KGF0dHJzKSk7XG4gICAgY29uc3QgdHJhbnNmb3JtID0gb2JqZWN0V2l0aEtleShcbiAgICAgICd0cmFuc2Zvcm0nLFxuICAgICAgdHlwZW9mIGF0dHJzLnRyYW5zZm9ybSA9PT0gJ3N0cmluZycgPyBmYVBhcnNlLnRyYW5zZm9ybShhdHRycy50cmFuc2Zvcm0pIDogYXR0cnMudHJhbnNmb3JtXG4gICAgKTtcbiAgICBjb25zdCBtYXNrID0gb2JqZWN0V2l0aEtleSgnbWFzaycsIG5vcm1hbGl6ZUljb25BcmdzKG1hc2tBcmdzKSk7XG5cbiAgICBjb25zdCB7IGFic3RyYWN0IH0gPSBmYUljb24oaWNvbiwgeyAuLi5jbGFzc2VzLCAuLi50cmFuc2Zvcm0sIC4uLm1hc2ssIHN5bWJvbCwgdGl0bGUgfSk7XG4gICAgcmV0dXJuIGNvbnZlcnQoYWJzdHJhY3RbMF0sIGF0dHJzKTtcbiAgfTtcbn1cblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG5leHBvcnQgZnVuY3Rpb24gdXNlSWNvbkNvbXBvbmVudChuYW1lOiBzdHJpbmcsIGljb25EZWZpbml0aW9uOiBhbnkpOiBGdW5jdGlvbmFsQ29tcG9uZW50IHtcbiAgY29uc3QgaWNvbiA9IHVzZUZvbnRBd2Vzb21lSWNvbkNvbXBvbmVudChpY29uRGVmaW5pdGlvbik7XG4gIHJldHVybiBkZWZpbmVDb21wb25lbnQoe1xuICAgIHByb3BzOiB7XG4gICAgICAuLi5CSWNvblByb3BzRGVmaW5pdGlvbixcbiAgICAgIGljb25DbGFzczoge1xuICAgICAgICB0eXBlOiBTdHJpbmdcbiAgICAgIH1cbiAgICB9LFxuICAgIHNldHVwKHByb3BzKSB7XG4gICAgICByZXR1cm4gKCkgPT4gaChCSWNvbiwgcHJvcHMsICgpID0+IGgoaWNvbiwgeyBjbGFzczogcHJvcHMuaWNvbkNsYXNzIH0pKTtcbiAgICB9XG4gIH0pIGFzIGFueTtcbn1cbiJdfQ==