import { eq, eqNumber } from 'fp-ts/lib/Eq';
import { defineComponent, h, Transition as transition, ref, reactive, computed, nextTick } from 'vue';
import { formatTransition } from '../../composables/transition';
import { constEmptyArray, removeListItem } from '../../utils/helpers';
export const eqPopup = eq.contramap(eqNumber, popup => popup.id);
export const removePopup = removeListItem(eqPopup);
let id = 0;
const BPopupContainer = defineComponent({
    name: 'b-popup-container',
    setup() {
        const popups = ref([]);
        function showPopup(options) {
            const nid = id++;
            const popup = reactive({ id: nid, render: constEmptyArray, transition: formatTransition(options.transition) });
            popups.value.push(popup);
            nextTick(() => { popup.render = options.render; });
            return () => {
                popup.render = constEmptyArray;
                setTimeout(() => {
                    const index = popups.value.findIndex(p => p.id === nid);
                    if (index > 0) {
                        popups.value.splice(index, 1);
                    }
                }, 250);
            };
        }
        const rootZ = computed(() => popups.value.length ? 1 : 0);
        return {
            showPopup,
            popups,
            rootZ
        };
    },
    methods: {
        generatePopup(popup, index) {
            return h('div', { key: popup.id, style: { 'z-index': index + 1 } }, [
                h(transition, popup.transition, popup.render)
            ]);
        }
    },
    render() {
        return h('div', { style: { 'z-index': this.rootZ } }, this.rootZ ? this.popups.map(this.generatePopup) : undefined);
    }
});
export default BPopupContainer;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQlBvcHVwQ29udGFpbmVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvcG9wdXBDb250YWluZXIvQlBvcHVwQ29udGFpbmVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBTSxFQUFFLEVBQUUsUUFBUSxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBRWhELE9BQU8sRUFBUyxlQUFlLEVBQUUsQ0FBQyxFQUFFLFVBQVUsSUFBSSxVQUFVLEVBQUUsR0FBRyxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLE1BQU0sS0FBSyxDQUFDO0FBQzdHLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBRWhFLE9BQU8sRUFBQyxlQUFlLEVBQUUsY0FBYyxFQUFDLE1BQU0scUJBQXFCLENBQUM7QUFZcEUsTUFBTSxDQUFDLE1BQU0sT0FBTyxHQUFjLEVBQUUsQ0FBQyxTQUFTLENBQUMsUUFBUSxFQUFFLEtBQUssQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBRTVFLE1BQU0sQ0FBQyxNQUFNLFdBQVcsR0FBRyxjQUFjLENBQUMsT0FBTyxDQUFDLENBQUM7QUFFbkQsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFBO0FBRVYsTUFBTSxlQUFlLEdBQUcsZUFBZSxDQUFDO0lBQ3RDLElBQUksRUFBRSxtQkFBbUI7SUFDekIsS0FBSztRQUNELE1BQU0sTUFBTSxHQUFHLEdBQUcsQ0FBVSxFQUFFLENBQUMsQ0FBQztRQUNoQyxTQUFTLFNBQVMsQ0FBQyxPQUFxQjtZQUN0QyxNQUFNLEdBQUcsR0FBRyxFQUFFLEVBQUUsQ0FBQTtZQUNoQixNQUFNLEtBQUssR0FBRyxRQUFRLENBQUMsRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxlQUE4QixFQUFFLFVBQVUsRUFBRSxnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQzlILE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFBO1lBQ3hCLFFBQVEsQ0FBQyxHQUFHLEVBQUUsR0FBRyxLQUFLLENBQUMsTUFBTSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUEsQ0FBQyxDQUFDLENBQUMsQ0FBQTtZQUNqRCxPQUFPLEdBQUcsRUFBRTtnQkFDVixLQUFLLENBQUMsTUFBTSxHQUFHLGVBQWUsQ0FBQTtnQkFDOUIsVUFBVSxDQUFDLEdBQUcsRUFBRTtvQkFDZCxNQUFNLEtBQUssR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLEtBQUssR0FBRyxDQUFDLENBQUM7b0JBQ3hELElBQUksS0FBSyxHQUFHLENBQUMsRUFBRTt3QkFDYixNQUFNLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUE7cUJBQzlCO2dCQUNILENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQTtZQUNULENBQUMsQ0FBQztRQUNKLENBQUM7UUFDRCxNQUFNLEtBQUssR0FBRyxRQUFRLENBQUMsR0FBRyxFQUFFLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7UUFDekQsT0FBTztZQUNMLFNBQVM7WUFDVCxNQUFNO1lBQ04sS0FBSztTQUNOLENBQUE7SUFDTCxDQUFDO0lBQ0QsT0FBTyxFQUFFO1FBQ1AsYUFBYSxDQUFDLEtBQVksRUFBRSxLQUFhO1lBQ3ZDLE9BQU8sQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFLEdBQUcsRUFBRSxLQUFLLENBQUMsRUFBRSxFQUFFLEtBQUssRUFBRSxFQUFFLFNBQVMsRUFBRSxLQUFLLEdBQUcsQ0FBQyxFQUFFLEVBQUUsRUFBRTtnQkFDbEUsQ0FBQyxDQUFDLFVBQVUsRUFBRSxLQUFLLENBQUMsVUFBVSxFQUFFLEtBQUssQ0FBQyxNQUFNLENBQUM7YUFDOUMsQ0FBQyxDQUFDO1FBQ0wsQ0FBQztLQUNGO0lBQ0QsTUFBTTtRQUNKLE9BQU8sQ0FBQyxDQUNOLEtBQUssRUFDTCxFQUFFLEtBQUssRUFBRSxFQUFFLFNBQVMsRUFBRSxJQUFJLENBQUMsS0FBSyxFQUFFLEVBQUUsRUFDcEMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQzdELENBQUM7SUFDSixDQUFDO0NBQ0YsQ0FBQyxDQUFDO0FBSUgsZUFBZSxlQUFlLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFcSwgZXEsIGVxTnVtYmVyIH0gZnJvbSAnZnAtdHMvbGliL0VxJztcbmltcG9ydCB7IElPIH0gZnJvbSAnZnAtdHMvbGliL0lPJztcbmltcG9ydCB7IFZOb2RlLCBkZWZpbmVDb21wb25lbnQsIGgsIFRyYW5zaXRpb24gYXMgdHJhbnNpdGlvbiwgcmVmLCByZWFjdGl2ZSwgY29tcHV0ZWQsIG5leHRUaWNrIH0gZnJvbSAndnVlJztcbmltcG9ydCB7IGZvcm1hdFRyYW5zaXRpb24gfSBmcm9tICcuLi8uLi9jb21wb3NhYmxlcy90cmFuc2l0aW9uJztcbmltcG9ydCB7IFRyYW5zaXRpb24sIFRyYW5zaXRpb25DbGFzc2VzIH0gZnJvbSAnLi4vLi4vdHlwZXMvVHJhbnNpdGlvbic7XG5pbXBvcnQge2NvbnN0RW1wdHlBcnJheSwgcmVtb3ZlTGlzdEl0ZW19IGZyb20gJy4uLy4uL3V0aWxzL2hlbHBlcnMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFBvcHVwT3B0aW9ucyB7XG4gIHRyYW5zaXRpb246IFRyYW5zaXRpb247XG4gIHJlbmRlcjogSU88Vk5vZGVbXT47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUG9wdXAgZXh0ZW5kcyBQb3B1cE9wdGlvbnMge1xuICB0cmFuc2l0aW9uOiBUcmFuc2l0aW9uQ2xhc3NlcztcbiAgaWQ6IG51bWJlcjtcbn1cblxuZXhwb3J0IGNvbnN0IGVxUG9wdXA6IEVxPFBvcHVwPiA9IGVxLmNvbnRyYW1hcChlcU51bWJlciwgcG9wdXAgPT4gcG9wdXAuaWQpO1xuXG5leHBvcnQgY29uc3QgcmVtb3ZlUG9wdXAgPSByZW1vdmVMaXN0SXRlbShlcVBvcHVwKTtcblxubGV0IGlkID0gMFxuXG5jb25zdCBCUG9wdXBDb250YWluZXIgPSBkZWZpbmVDb21wb25lbnQoe1xuICBuYW1lOiAnYi1wb3B1cC1jb250YWluZXInLFxuICBzZXR1cCgpIHtcbiAgICAgIGNvbnN0IHBvcHVwcyA9IHJlZjxQb3B1cFtdPihbXSk7XG4gICAgICBmdW5jdGlvbiBzaG93UG9wdXAob3B0aW9uczogUG9wdXBPcHRpb25zKTogSU88dm9pZD4ge1xuICAgICAgICBjb25zdCBuaWQgPSBpZCsrXG4gICAgICAgIGNvbnN0IHBvcHVwID0gcmVhY3RpdmUoeyBpZDogbmlkLCByZW5kZXI6IGNvbnN0RW1wdHlBcnJheSBhcyBJTzxWTm9kZVtdPiwgdHJhbnNpdGlvbjogZm9ybWF0VHJhbnNpdGlvbihvcHRpb25zLnRyYW5zaXRpb24pIH0pO1xuICAgICAgICBwb3B1cHMudmFsdWUucHVzaChwb3B1cClcbiAgICAgICAgbmV4dFRpY2soKCkgPT4geyBwb3B1cC5yZW5kZXIgPSBvcHRpb25zLnJlbmRlciB9KVxuICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgIHBvcHVwLnJlbmRlciA9IGNvbnN0RW1wdHlBcnJheVxuICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgaW5kZXggPSBwb3B1cHMudmFsdWUuZmluZEluZGV4KHAgPT4gcC5pZCA9PT0gbmlkKTtcbiAgICAgICAgICAgIGlmIChpbmRleCA+IDApIHtcbiAgICAgICAgICAgICAgcG9wdXBzLnZhbHVlLnNwbGljZShpbmRleCwgMSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LCAyNTApXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICBjb25zdCByb290WiA9IGNvbXB1dGVkKCgpID0+IHBvcHVwcy52YWx1ZS5sZW5ndGggPyAxIDogMClcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHNob3dQb3B1cCxcbiAgICAgICAgcG9wdXBzLFxuICAgICAgICByb290WlxuICAgICAgfVxuICB9LFxuICBtZXRob2RzOiB7XG4gICAgZ2VuZXJhdGVQb3B1cChwb3B1cDogUG9wdXAsIGluZGV4OiBudW1iZXIpOiBWTm9kZSB7XG4gICAgICByZXR1cm4gaCgnZGl2JywgeyBrZXk6IHBvcHVwLmlkLCBzdHlsZTogeyAnei1pbmRleCc6IGluZGV4ICsgMSB9IH0sIFtcbiAgICAgICAgaCh0cmFuc2l0aW9uLCBwb3B1cC50cmFuc2l0aW9uLCBwb3B1cC5yZW5kZXIpXG4gICAgICBdKTtcbiAgICB9XG4gIH0sXG4gIHJlbmRlcigpOiBWTm9kZSB7XG4gICAgcmV0dXJuIGgoXG4gICAgICAnZGl2JyxcbiAgICAgIHsgc3R5bGU6IHsgJ3otaW5kZXgnOiB0aGlzLnJvb3RaIH0gfSxcbiAgICAgIHRoaXMucm9vdFogPyB0aGlzLnBvcHVwcy5tYXAodGhpcy5nZW5lcmF0ZVBvcHVwKSA6IHVuZGVmaW5lZFxuICAgICk7XG4gIH1cbn0pO1xuXG5leHBvcnQgdHlwZSBQb3B1cENvbnRhaW5lciA9IEluc3RhbmNlVHlwZTx0eXBlb2YgQlBvcHVwQ29udGFpbmVyPjtcblxuZXhwb3J0IGRlZmF1bHQgQlBvcHVwQ29udGFpbmVyO1xuIl19