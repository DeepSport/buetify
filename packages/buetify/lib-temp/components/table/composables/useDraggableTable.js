import { isNone, isSome, none, some } from 'fp-ts/lib/Option';
import { shallowRef } from 'vue';
import { constant, constVoid } from 'fp-ts/lib/function';
import { eqBTableRow } from '../shared';
export const BTableDraggablePropsDefinition = {
    isDraggable: {
        type: Boolean,
        default: false
    },
    dropEffect: {
        type: String,
        default: 'move'
    },
    onDragstart: {
        type: Function,
        default: constant(constVoid)
    },
    onDragenter: {
        type: Function,
        default: constant(constVoid)
    },
    onDragover: {
        type: Function,
        default: constant(constVoid)
    },
    onDragleave: {
        type: Function,
        default: constant(constVoid)
    },
    onDragend: {
        type: Function,
        default: constant(constVoid)
    },
    onDrop: {
        type: Function,
        default: constant(constVoid)
    }
};
export function useDraggableTable(props) {
    const dragIsActive = shallowRef(false);
    const dropTarget = shallowRef(none);
    function getOnDragStartListener(row, index) {
        return (e) => {
            dragIsActive.value = true;
            if (e.dataTransfer) {
                e.dataTransfer.setData('text/plain', String(index));
                e.dataTransfer.dropEffect = props.dropEffect;
            }
            dropTarget.value = some(row);
            props.onDragstart(row, e, index);
        };
    }
    function getOnDropListener(row, index) {
        return (e) => {
            if (row.isDroppable) {
                e.preventDefault();
                props.onDrop(row, e, index);
            }
            dragIsActive.value = false;
        };
    }
    function getOnDragEnterListener(row, index) {
        return (e) => {
            if (row.isDroppable) {
                e.preventDefault();
                dropTarget.value = some(row);
                props.onDragenter(row, e, index);
            }
        };
    }
    function getOnDragOverListener(row, index) {
        return (e) => {
            if (row.isDroppable) {
                e.preventDefault();
                const target = dropTarget.value;
                if (isNone(target) || (isSome(target) && !eqBTableRow.equals(target.value, row))) {
                    dropTarget.value = some(row);
                }
                props.onDragover(row, e, index);
            }
        };
    }
    function getOnDragLeaveListener(row, index) {
        return (e) => {
            if (row.isDroppable) {
                e.preventDefault();
                const target = dropTarget.value;
                if (isSome(target) && eqBTableRow.equals(target.value, row)) {
                    dropTarget.value = none;
                }
                props.onDragleave(row, e, index);
            }
        };
    }
    function getOnDragEndListener(row, index) {
        return e => {
            props.onDragend(row, e, index);
            if (isSome(dropTarget.value)) {
                dropTarget.value = none;
            }
            dragIsActive.value = false;
        };
    }
    function getRowDragListeners(row, index) {
        if (row.isDraggable) {
            return {
                onDragstart: getOnDragStartListener(row, index),
                onDrop: getOnDropListener(row, index),
                onDragenter: getOnDragEnterListener(row, index),
                onDragleave: getOnDragLeaveListener(row, index),
                onDragover: getOnDragOverListener(row, index),
                onDragend: getOnDragEndListener(row, index)
            };
        }
        else {
            return {};
        }
    }
    return {
        getRowDragListeners,
        dragIsActive,
        dropTarget
    };
}
//# sourceMappingURL=data:application/json;base64,