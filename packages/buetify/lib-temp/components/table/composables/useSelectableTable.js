import { constant, constVoid } from 'fp-ts/lib/function';
import { computed, toRef, provide, inject } from 'vue';
import { useProxy } from '../../../composables/proxy/useProxy';
import { constEmptyArray } from '../../../utils/helpers';
import { toggleBTableRow } from '../shared';
import { toSet } from './shared';
export const BTableSelectablePropsDefinition = {
    isSelectable: {
        type: Boolean,
        default: false
    },
    selectedRows: {
        type: Array,
        default: constEmptyArray
    },
    'onUpdate:selectedRows': {
        type: Function,
        default: constant(constVoid)
    },
    onSelectRow: {
        type: Function,
        default: constant(constVoid)
    },
    onUnselectRow: {
        type: Function,
        default: constant(constVoid)
    }
};
const USE_SELECTABLE_TABLE_INJECTION_SYMBOL = Symbol();
export function useSelectableTable(props) {
    const { value: selectedRows } = useProxy(computed(() => (props.isSelectable ? props.selectedRows : [])), toRef(props, 'onUpdate:selectedRows'));
    const selectedRowIds = computed(() => toSet(selectedRows.value));
    function toggleRowSelection(row) {
        if (row.isSelectable) {
            const ids = selectedRowIds.value;
            ids.has(row.id) ? props.onUnselectRow(row) : props.onSelectRow(row);
            selectedRows.value = toggleBTableRow(row, selectedRows.value);
        }
    }
    const state = {
        selectedRowIds,
        toggleRowSelection
    };
    provide(USE_SELECTABLE_TABLE_INJECTION_SYMBOL, state);
    return state;
}
function useDefaultSelectableTableState() {
    return {
        selectedRowIds: computed(() => new Set()),
        toggleRowSelection: constVoid
    };
}
export function useInjectedSelectableTable() {
    return inject(USE_SELECTABLE_TABLE_INJECTION_SYMBOL, useDefaultSelectableTableState, true);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlU2VsZWN0YWJsZVRhYmxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvdGFibGUvY29tcG9zYWJsZXMvdXNlU2VsZWN0YWJsZVRhYmxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQUUsU0FBUyxFQUFhLE1BQU0sb0JBQW9CLENBQUM7QUFDcEUsT0FBTyxFQUFFLFFBQVEsRUFBOEIsS0FBSyxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQWUsTUFBTSxLQUFLLENBQUM7QUFDaEcsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLHFDQUFxQyxDQUFDO0FBQy9ELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUN6RCxPQUFPLEVBQTRCLGVBQWUsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUN0RSxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBRWpDLE1BQU0sQ0FBQyxNQUFNLCtCQUErQixHQUFHO0lBQzdDLFlBQVksRUFBRTtRQUNaLElBQUksRUFBRSxPQUE0QjtRQUNsQyxPQUFPLEVBQUUsS0FBSztLQUNmO0lBQ0QsWUFBWSxFQUFFO1FBQ1osSUFBSSxFQUFFLEtBQWtDO1FBQ3hDLE9BQU8sRUFBRSxlQUFlO0tBQ3pCO0lBQ0QsdUJBQXVCLEVBQUU7UUFDdkIsSUFBSSxFQUFFLFFBQXdEO1FBQzlELE9BQU8sRUFBRSxRQUFRLENBQUMsU0FBUyxDQUFDO0tBQzdCO0lBQ0QsV0FBVyxFQUFFO1FBQ1gsSUFBSSxFQUFFLFFBQXNEO1FBQzVELE9BQU8sRUFBRSxRQUFRLENBQUMsU0FBUyxDQUFDO0tBQzdCO0lBQ0QsYUFBYSxFQUFFO1FBQ2IsSUFBSSxFQUFFLFFBQXNEO1FBQzVELE9BQU8sRUFBRSxRQUFRLENBQUMsU0FBUyxDQUFDO0tBQzdCO0NBQ0YsQ0FBQztBQUlGLE1BQU0scUNBQXFDLEdBQUcsTUFBTSxFQUFFLENBQUM7QUFFdkQsTUFBTSxVQUFVLGtCQUFrQixDQUFDLEtBQTRCO0lBQzdELE1BQU0sRUFBRSxLQUFLLEVBQUUsWUFBWSxFQUFFLEdBQUcsUUFBUSxDQUN0QyxRQUFRLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUM5RCxLQUFLLENBQUMsS0FBSyxFQUFFLHVCQUF1QixDQUFDLENBQ3RDLENBQUM7SUFFRixNQUFNLGNBQWMsR0FBRyxRQUFRLENBQUMsR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0lBRWpFLFNBQVMsa0JBQWtCLENBQUMsR0FBYztRQUN4QyxJQUFJLEdBQUcsQ0FBQyxZQUFZLEVBQUU7WUFDcEIsTUFBTSxHQUFHLEdBQUcsY0FBYyxDQUFDLEtBQUssQ0FBQztZQUNqQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUNwRSxZQUFZLENBQUMsS0FBSyxHQUFHLGVBQWUsQ0FBQyxHQUFHLEVBQUUsWUFBWSxDQUFDLEtBQW9CLENBQUMsQ0FBQztTQUM5RTtJQUNILENBQUM7SUFFRCxNQUFNLEtBQUssR0FBNEI7UUFDckMsY0FBYztRQUNkLGtCQUFrQjtLQUNuQixDQUFDO0lBRUYsT0FBTyxDQUFDLHFDQUFxQyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBRXRELE9BQU8sS0FBSyxDQUFDO0FBQ2YsQ0FBQztBQU9ELFNBQVMsOEJBQThCO0lBQ3JDLE9BQU87UUFDTCxjQUFjLEVBQUUsUUFBUSxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksR0FBRyxFQUFFLENBQUM7UUFDekMsa0JBQWtCLEVBQUUsU0FBUztLQUM5QixDQUFDO0FBQ0osQ0FBQztBQUVELE1BQU0sVUFBVSwwQkFBMEI7SUFDeEMsT0FBTyxNQUFNLENBQUMscUNBQXFDLEVBQUUsOEJBQThCLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDN0YsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNvbnN0YW50LCBjb25zdFZvaWQsIEZ1bmN0aW9uTiB9IGZyb20gJ2ZwLXRzL2xpYi9mdW5jdGlvbic7XG5pbXBvcnQgeyBjb21wdXRlZCwgRXh0cmFjdFByb3BUeXBlcywgUHJvcFR5cGUsIHRvUmVmLCBwcm92aWRlLCBpbmplY3QsIENvbXB1dGVkUmVmIH0gZnJvbSAndnVlJztcbmltcG9ydCB7IHVzZVByb3h5IH0gZnJvbSAnLi4vLi4vLi4vY29tcG9zYWJsZXMvcHJveHkvdXNlUHJveHknO1xuaW1wb3J0IHsgY29uc3RFbXB0eUFycmF5IH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvaGVscGVycyc7XG5pbXBvcnQgeyBCVGFibGVSb3csIEJUYWJsZVJvd0RhdGEsIHRvZ2dsZUJUYWJsZVJvdyB9IGZyb20gJy4uL3NoYXJlZCc7XG5pbXBvcnQgeyB0b1NldCB9IGZyb20gJy4vc2hhcmVkJztcblxuZXhwb3J0IGNvbnN0IEJUYWJsZVNlbGVjdGFibGVQcm9wc0RlZmluaXRpb24gPSB7XG4gIGlzU2VsZWN0YWJsZToge1xuICAgIHR5cGU6IEJvb2xlYW4gYXMgUHJvcFR5cGU8Ym9vbGVhbj4sXG4gICAgZGVmYXVsdDogZmFsc2VcbiAgfSxcbiAgc2VsZWN0ZWRSb3dzOiB7XG4gICAgdHlwZTogQXJyYXkgYXMgUHJvcFR5cGU8QlRhYmxlUm93RGF0YVtdPixcbiAgICBkZWZhdWx0OiBjb25zdEVtcHR5QXJyYXlcbiAgfSxcbiAgJ29uVXBkYXRlOnNlbGVjdGVkUm93cyc6IHtcbiAgICB0eXBlOiBGdW5jdGlvbiBhcyBQcm9wVHlwZTxGdW5jdGlvbk48W0JUYWJsZVJvd0RhdGFbXV0sIHZvaWQ+PixcbiAgICBkZWZhdWx0OiBjb25zdGFudChjb25zdFZvaWQpXG4gIH0sXG4gIG9uU2VsZWN0Um93OiB7XG4gICAgdHlwZTogRnVuY3Rpb24gYXMgUHJvcFR5cGU8RnVuY3Rpb25OPFtCVGFibGVSb3dEYXRhXSwgdm9pZD4+LFxuICAgIGRlZmF1bHQ6IGNvbnN0YW50KGNvbnN0Vm9pZClcbiAgfSxcbiAgb25VbnNlbGVjdFJvdzoge1xuICAgIHR5cGU6IEZ1bmN0aW9uIGFzIFByb3BUeXBlPEZ1bmN0aW9uTjxbQlRhYmxlUm93RGF0YV0sIHZvaWQ+PixcbiAgICBkZWZhdWx0OiBjb25zdGFudChjb25zdFZvaWQpXG4gIH1cbn07XG5cbmV4cG9ydCBpbnRlcmZhY2UgQlRhYmxlU2VsZWN0YWJsZVByb3BzIGV4dGVuZHMgRXh0cmFjdFByb3BUeXBlczx0eXBlb2YgQlRhYmxlU2VsZWN0YWJsZVByb3BzRGVmaW5pdGlvbj4ge31cblxuY29uc3QgVVNFX1NFTEVDVEFCTEVfVEFCTEVfSU5KRUNUSU9OX1NZTUJPTCA9IFN5bWJvbCgpO1xuXG5leHBvcnQgZnVuY3Rpb24gdXNlU2VsZWN0YWJsZVRhYmxlKHByb3BzOiBCVGFibGVTZWxlY3RhYmxlUHJvcHMpIHtcbiAgY29uc3QgeyB2YWx1ZTogc2VsZWN0ZWRSb3dzIH0gPSB1c2VQcm94eTxCVGFibGVSb3dEYXRhW10+KFxuICAgIGNvbXB1dGVkKCgpID0+IChwcm9wcy5pc1NlbGVjdGFibGUgPyBwcm9wcy5zZWxlY3RlZFJvd3MgOiBbXSkpLFxuICAgIHRvUmVmKHByb3BzLCAnb25VcGRhdGU6c2VsZWN0ZWRSb3dzJylcbiAgKTtcblxuICBjb25zdCBzZWxlY3RlZFJvd0lkcyA9IGNvbXB1dGVkKCgpID0+IHRvU2V0KHNlbGVjdGVkUm93cy52YWx1ZSkpO1xuXG4gIGZ1bmN0aW9uIHRvZ2dsZVJvd1NlbGVjdGlvbihyb3c6IEJUYWJsZVJvdykge1xuICAgIGlmIChyb3cuaXNTZWxlY3RhYmxlKSB7XG4gICAgICBjb25zdCBpZHMgPSBzZWxlY3RlZFJvd0lkcy52YWx1ZTtcbiAgICAgIGlkcy5oYXMocm93LmlkKSA/IHByb3BzLm9uVW5zZWxlY3RSb3cocm93KSA6IHByb3BzLm9uU2VsZWN0Um93KHJvdyk7XG4gICAgICBzZWxlY3RlZFJvd3MudmFsdWUgPSB0b2dnbGVCVGFibGVSb3cocm93LCBzZWxlY3RlZFJvd3MudmFsdWUgYXMgQlRhYmxlUm93W10pO1xuICAgIH1cbiAgfVxuXG4gIGNvbnN0IHN0YXRlOiBVc2VTZWxlY3RhYmxlVGFibGVTdGF0ZSA9IHtcbiAgICBzZWxlY3RlZFJvd0lkcyxcbiAgICB0b2dnbGVSb3dTZWxlY3Rpb25cbiAgfTtcblxuICBwcm92aWRlKFVTRV9TRUxFQ1RBQkxFX1RBQkxFX0lOSkVDVElPTl9TWU1CT0wsIHN0YXRlKTtcblxuICByZXR1cm4gc3RhdGU7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVXNlU2VsZWN0YWJsZVRhYmxlU3RhdGUge1xuICBzZWxlY3RlZFJvd0lkczogQ29tcHV0ZWRSZWY8U2V0PHN0cmluZz4+O1xuICB0b2dnbGVSb3dTZWxlY3Rpb246IEZ1bmN0aW9uTjxbQlRhYmxlUm93XSwgdm9pZD47XG59XG5cbmZ1bmN0aW9uIHVzZURlZmF1bHRTZWxlY3RhYmxlVGFibGVTdGF0ZSgpOiBVc2VTZWxlY3RhYmxlVGFibGVTdGF0ZSB7XG4gIHJldHVybiB7XG4gICAgc2VsZWN0ZWRSb3dJZHM6IGNvbXB1dGVkKCgpID0+IG5ldyBTZXQoKSksXG4gICAgdG9nZ2xlUm93U2VsZWN0aW9uOiBjb25zdFZvaWRcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVzZUluamVjdGVkU2VsZWN0YWJsZVRhYmxlKCk6IFVzZVNlbGVjdGFibGVUYWJsZVN0YXRlIHtcbiAgcmV0dXJuIGluamVjdChVU0VfU0VMRUNUQUJMRV9UQUJMRV9JTkpFQ1RJT05fU1lNQk9MLCB1c2VEZWZhdWx0U2VsZWN0YWJsZVRhYmxlU3RhdGUsIHRydWUpO1xufVxuIl19