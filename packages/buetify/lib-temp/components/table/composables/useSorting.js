import { sort } from 'fp-ts/lib/Array';
import { isSome, some } from 'fp-ts/lib/Option';
import { pipe } from 'fp-ts/lib/pipeable';
import { toRef, computed, watch } from 'vue';
import { useProxy } from '../../../composables/proxy/useProxy';
export const BTableSortingPropsDefinition = {
    rows: {
        type: Array,
        required: true
    },
    sortColumn: {
        type: Object
    },
    'onUpdate:sortColumn': {
        type: Function
    },
    sortType: {
        type: String,
        default: 'Descending'
    },
    'onUpdate:sortType': {
        type: Function
    }
};
export function useSorting(props, sortColumn, rows, columns) {
    const { value: sortType } = useProxy(toRef(props, 'sortType'), toRef(props, 'onUpdate:sortType'));
    function sortRows(ord) {
        rows.value = pipe(rows.value, sort(ord));
    }
    function checkSort() {
        if (isSome(sortColumn.value) && sortColumn.value.value.ord !== undefined) {
            sortRows(sortColumn.value.value.ord);
        }
    }
    watch(() => props.rows, checkSort, {
        immediate: true
    });
    return {
        sortColumn,
        sortType,
        'onUpdate:sortColumn': (column) => {
            sortColumn.value = some(column);
        },
        'onUpdate:sortType': (type) => {
            sortType.value = type;
        },
        hasSortableColumns: computed(() => columns.value.some(column => column.isSortable))
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlU29ydGluZy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3RhYmxlL2NvbXBvc2FibGVzL3VzZVNvcnRpbmcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ3ZDLE9BQU8sRUFBRSxNQUFNLEVBQVUsSUFBSSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFFeEQsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQzFDLE9BQU8sRUFBb0IsS0FBSyxFQUFFLFFBQVEsRUFBTyxLQUFLLEVBQUUsTUFBTSxLQUFLLENBQUM7QUFHcEUsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLHFDQUFxQyxDQUFDO0FBRy9ELE1BQU0sQ0FBQyxNQUFNLDRCQUE0QixHQUFHO0lBQzFDLElBQUksRUFBRTtRQUNKLElBQUksRUFBRSxLQUFrQztRQUN4QyxRQUFRLEVBQUUsSUFBYTtLQUN4QjtJQUNELFVBQVUsRUFBRTtRQUNWLElBQUksRUFBRSxNQUFvQztLQUMzQztJQUNELHFCQUFxQixFQUFFO1FBQ3JCLElBQUksRUFBRSxRQUF5RDtLQUNoRTtJQUNELFFBQVEsRUFBRTtRQUNSLElBQUksRUFBRSxNQUE0QjtRQUNsQyxPQUFPLEVBQUUsWUFBcUI7S0FDL0I7SUFDRCxtQkFBbUIsRUFBRTtRQUNuQixJQUFJLEVBQUUsUUFBaUQ7S0FDeEQ7Q0FDRixDQUFDO0FBSUYsTUFBTSxVQUFVLFVBQVUsQ0FDeEIsS0FBeUIsRUFDekIsVUFBa0QsRUFDbEQsSUFBc0IsRUFDdEIsT0FBNEI7SUFFNUIsTUFBTSxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsR0FBRyxRQUFRLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxVQUFVLENBQUMsRUFBRSxLQUFLLENBQUMsS0FBSyxFQUFFLG1CQUFtQixDQUFDLENBQUMsQ0FBQztJQUVsRyxTQUFTLFFBQVEsQ0FBQyxHQUFtQjtRQUNuQyxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQzNDLENBQUM7SUFFRCxTQUFTLFNBQVM7UUFDaEIsSUFBSSxNQUFNLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxJQUFJLFVBQVUsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQUcsS0FBSyxTQUFTLEVBQUU7WUFDeEUsUUFBUSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQ3RDO0lBQ0gsQ0FBQztJQUVELEtBQUssQ0FBQyxHQUFHLEVBQUUsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLFNBQVMsRUFBRTtRQUNqQyxTQUFTLEVBQUUsSUFBSTtLQUNoQixDQUFDLENBQUM7SUFFSCxPQUFPO1FBQ0wsVUFBVTtRQUNWLFFBQVE7UUFDUixxQkFBcUIsRUFBRSxDQUFDLE1BQW9CLEVBQUUsRUFBRTtZQUM5QyxVQUFVLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNsQyxDQUFDO1FBQ0QsbUJBQW1CLEVBQUUsQ0FBQyxJQUFjLEVBQUUsRUFBRTtZQUN0QyxRQUFRLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQztRQUN4QixDQUFDO1FBQ0Qsa0JBQWtCLEVBQUUsUUFBUSxDQUFDLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0tBQ3BGLENBQUM7QUFDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgc29ydCB9IGZyb20gJ2ZwLXRzL2xpYi9BcnJheSc7XG5pbXBvcnQgeyBpc1NvbWUsIE9wdGlvbiwgc29tZSB9IGZyb20gJ2ZwLXRzL2xpYi9PcHRpb24nO1xuaW1wb3J0IHsgT3JkIH0gZnJvbSAnZnAtdHMvbGliL09yZCc7XG5pbXBvcnQgeyBwaXBlIH0gZnJvbSAnZnAtdHMvbGliL3BpcGVhYmxlJztcbmltcG9ydCB7IEV4dHJhY3RQcm9wVHlwZXMsIHRvUmVmLCBjb21wdXRlZCwgUmVmLCB3YXRjaCB9IGZyb20gJ3Z1ZSc7XG5pbXBvcnQgeyBGdW5jdGlvbk4gfSBmcm9tICdmcC10cy9saWIvZnVuY3Rpb24nO1xuaW1wb3J0IHsgUHJvcFR5cGUgfSBmcm9tICd2dWUnO1xuaW1wb3J0IHsgdXNlUHJveHkgfSBmcm9tICcuLi8uLi8uLi9jb21wb3NhYmxlcy9wcm94eS91c2VQcm94eSc7XG5pbXBvcnQgeyBCVGFibGVDb2x1bW4sIEJUYWJsZUNvbHVtbkRhdGEsIEJUYWJsZVJvdywgQlRhYmxlUm93RGF0YSwgU29ydFR5cGUgfSBmcm9tICcuLi9zaGFyZWQnO1xuXG5leHBvcnQgY29uc3QgQlRhYmxlU29ydGluZ1Byb3BzRGVmaW5pdGlvbiA9IHtcbiAgcm93czoge1xuICAgIHR5cGU6IEFycmF5IGFzIFByb3BUeXBlPEJUYWJsZVJvd0RhdGFbXT4sXG4gICAgcmVxdWlyZWQ6IHRydWUgYXMgY29uc3RcbiAgfSxcbiAgc29ydENvbHVtbjoge1xuICAgIHR5cGU6IE9iamVjdCBhcyBQcm9wVHlwZTxCVGFibGVDb2x1bW5EYXRhPlxuICB9LFxuICAnb25VcGRhdGU6c29ydENvbHVtbic6IHtcbiAgICB0eXBlOiBGdW5jdGlvbiBhcyBQcm9wVHlwZTxGdW5jdGlvbk48W0JUYWJsZUNvbHVtbkRhdGFdLCB2b2lkPj5cbiAgfSxcbiAgc29ydFR5cGU6IHtcbiAgICB0eXBlOiBTdHJpbmcgYXMgUHJvcFR5cGU8U29ydFR5cGU+LFxuICAgIGRlZmF1bHQ6ICdEZXNjZW5kaW5nJyBhcyBjb25zdFxuICB9LFxuICAnb25VcGRhdGU6c29ydFR5cGUnOiB7XG4gICAgdHlwZTogRnVuY3Rpb24gYXMgUHJvcFR5cGU8RnVuY3Rpb25OPFtTb3J0VHlwZV0sIHZvaWQ+PlxuICB9XG59O1xuXG5leHBvcnQgaW50ZXJmYWNlIEJUYWJsZVNvcnRpbmdQcm9wcyBleHRlbmRzIEV4dHJhY3RQcm9wVHlwZXM8dHlwZW9mIEJUYWJsZVNvcnRpbmdQcm9wc0RlZmluaXRpb24+IHt9XG5cbmV4cG9ydCBmdW5jdGlvbiB1c2VTb3J0aW5nKFxuICBwcm9wczogQlRhYmxlU29ydGluZ1Byb3BzLFxuICBzb3J0Q29sdW1uOiBSZWY8T3B0aW9uPEJUYWJsZUNvbHVtbkRhdGE8dW5rbm93bj4+PixcbiAgcm93czogUmVmPEJUYWJsZVJvd1tdPixcbiAgY29sdW1uczogUmVmPEJUYWJsZUNvbHVtbltdPlxuKSB7XG4gIGNvbnN0IHsgdmFsdWU6IHNvcnRUeXBlIH0gPSB1c2VQcm94eSh0b1JlZihwcm9wcywgJ3NvcnRUeXBlJyksIHRvUmVmKHByb3BzLCAnb25VcGRhdGU6c29ydFR5cGUnKSk7XG5cbiAgZnVuY3Rpb24gc29ydFJvd3Mob3JkOiBPcmQ8QlRhYmxlUm93Pikge1xuICAgIHJvd3MudmFsdWUgPSBwaXBlKHJvd3MudmFsdWUsIHNvcnQob3JkKSk7XG4gIH1cblxuICBmdW5jdGlvbiBjaGVja1NvcnQoKTogdm9pZCB7XG4gICAgaWYgKGlzU29tZShzb3J0Q29sdW1uLnZhbHVlKSAmJiBzb3J0Q29sdW1uLnZhbHVlLnZhbHVlLm9yZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBzb3J0Um93cyhzb3J0Q29sdW1uLnZhbHVlLnZhbHVlLm9yZCk7XG4gICAgfVxuICB9XG5cbiAgd2F0Y2goKCkgPT4gcHJvcHMucm93cywgY2hlY2tTb3J0LCB7XG4gICAgaW1tZWRpYXRlOiB0cnVlXG4gIH0pO1xuXG4gIHJldHVybiB7XG4gICAgc29ydENvbHVtbixcbiAgICBzb3J0VHlwZSxcbiAgICAnb25VcGRhdGU6c29ydENvbHVtbic6IChjb2x1bW46IEJUYWJsZUNvbHVtbikgPT4ge1xuICAgICAgc29ydENvbHVtbi52YWx1ZSA9IHNvbWUoY29sdW1uKTtcbiAgICB9LFxuICAgICdvblVwZGF0ZTpzb3J0VHlwZSc6ICh0eXBlOiBTb3J0VHlwZSkgPT4ge1xuICAgICAgc29ydFR5cGUudmFsdWUgPSB0eXBlO1xuICAgIH0sXG4gICAgaGFzU29ydGFibGVDb2x1bW5zOiBjb21wdXRlZCgoKSA9PiBjb2x1bW5zLnZhbHVlLnNvbWUoY29sdW1uID0+IGNvbHVtbi5pc1NvcnRhYmxlKSlcbiAgfTtcbn1cblxuZXhwb3J0IHR5cGUgVXNlU29ydGluZyA9IFJldHVyblR5cGU8dHlwZW9mIHVzZVNvcnRpbmc+O1xuIl19