import { isEmpty } from 'fp-ts/lib/Array';
import { exists, fromNullable, isSome } from 'fp-ts/lib/Option';
import { pipe } from 'fp-ts/lib/pipeable';
import { defineComponent, h, computed } from 'vue';
import { useProxy } from '../../composables/proxy';
import { useWindowSize } from '../../composables/windowSize';
import BSimpleTable from './BSimpleTable';
import BTableHeader from './BTableHeader';
import BTableMobileSort from './BTableMobileSort';
import BTableRowElement from './BTableRow';
import { BTableCheckPropsDefinition, useCheckableTable } from './composables/useCheckableTable';
import { BTableDraggablePropsDefinition, useDraggableTable } from './composables/useDraggableTable';
import { BTableSelectablePropsDefinition, useSelectableTable } from './composables/useSelectableTable';
import { BTableSortingPropsDefinition, useSorting } from './composables/useSorting';
import { eqBTableRow, eqColumnTableData } from './shared';
import './table.sass';
export const BTablePropsDefinition = {
    isBordered: {
        type: Boolean,
        default: false
    },
    isStriped: {
        type: Boolean,
        default: false
    },
    isNarrow: {
        type: Boolean,
        default: false
    },
    isFullwidth: {
        type: Boolean,
        default: true
    },
    size: {
        type: String,
        default: ''
    },
    isHoverable: {
        type: Boolean,
        default: false
    },
    isLoading: {
        type: Boolean,
        default: false
    },
    isScrollable: {
        type: Boolean,
        default: true
    },
    columns: {
        type: Array,
        required: true
    },
    isFocusable: {
        type: Boolean,
        default: false
    },
    useMobileCards: {
        type: Boolean,
        default: true
    },
    mobileSortPlaceholder: {
        type: String
    },
    headerClasses: {
        type: [String, Object, Array],
        default: undefined
    },
    onRowClick: {
        type: Function,
        required: false
    },
    ...BTableCheckPropsDefinition,
    ...BTableDraggablePropsDefinition,
    ...BTableSelectablePropsDefinition,
    ...BTableSortingPropsDefinition
};
function getBTableRow(rowProps) {
    return (data, index) => ({
        ...data,
        index,
        isDroppable: data.isDroppable !== undefined ? data.isDroppable : rowProps.isDraggable,
        isDraggable: data.isDraggable !== undefined ? data.isDraggable : rowProps.isDraggable,
        isSelectable: data.isSelectable !== undefined ? data.isSelectable : rowProps.isSelectable,
        isCheckable: data.isCheckable !== undefined ? data.isCheckable : rowProps.isCheckable
    });
}
function generateMobileSort(props, sort, visibleColumns) {
    return h(BTableMobileSort, {
        sortColumn: sort.sortColumn.value,
        'onUpdate:sortColumn': sort['onUpdate:sortColumn'],
        sortType: sort.sortType.value,
        'onUpdate:sortType': sort['onUpdate:sortType'],
        columns: visibleColumns.value,
        placeholder: props.mobileSortPlaceholder
    });
}
function generateTableHeader(props, sort, visibleColumns, slots) {
    return h(BTableHeader, {
        class: props.headerClasses,
        columns: visibleColumns.value,
        sortType: sort.sortType.value,
        'onUpdate:sortType': sort['onUpdate:sortType'],
        'onUpdate:sortColumn': sort['onUpdate:sortColumn']
    }, { ...slots });
}
function generateEmptyTable(columns, slots) {
    return h('tbody', [
        h('tr', { class: 'is-empty' }, [
            h('td', { colspan: columns.value.filter(column => column.isVisible).length }, slots.empty && slots.empty())
        ])
    ]);
}
function generateRows(props, rows, visibleColumns, drag, slots) {
    return rows.value.map((row, index) => h(BTableRowElement, {
        key: row.id,
        class: {
            'is-drop-target': isSome(drag.dropTarget.value)
                ? eqBTableRow.equals(row, drag.dropTarget.value.value)
                : false,
            'is-undroppable': drag.dragIsActive.value && !row.isDroppable
        },
        row,
        onRowClick: props.onRowClick,
        columns: visibleColumns.value,
        ...drag.getRowDragListeners(row, index)
    }, { ...slots }));
}
function generateTableBody(props, rows, visibleColumns, drag, slots) {
    if (isEmpty(rows.value) || isEmpty(visibleColumns.value)) {
        return generateEmptyTable(visibleColumns, slots);
    }
    if (slots.row) {
        return h('tbody', rows.value.map((row, index) => h('tr', { key: row.id }, slots.row &&
            slots.row({
                row,
                index,
                columns: visibleColumns.value
            }))));
    }
    else {
        return h('tbody', generateRows(props, rows, visibleColumns, drag, slots));
    }
}
function generateTableFooter(visibleColumns, slots) {
    return h('tfoot', [
        h('tr', { class: 'table-footer' }, slots.footer && slots.footer({ numberOfColumns: visibleColumns.value.length }))
    ]);
}
function generateTable(props, rows, visibleColumns, drag, sort, slots) {
    return h(BSimpleTable, {
        tableClasses: [
            {
                'is-bordered': props.isBordered,
                'is-striped': props.isStriped,
                'is-narrow': props.isNarrow,
                'is-fullwidth': props.isFullwidth,
                'is-hoverable': props.isHoverable,
                'has-mobile-cards': props.useMobileCards
            },
            props.size
        ],
        isLoading: props.isLoading,
        isScrollable: props.isScrollable
    }, () => {
        const nodes = [
            generateTableHeader(props, sort, visibleColumns, slots),
            generateTableBody(props, rows, visibleColumns, drag, slots)
        ];
        if (slots.footer) {
            nodes.push(generateTableFooter(visibleColumns, slots));
        }
        return nodes;
    });
}
export default defineComponent({
    name: 'b-table',
    props: BTablePropsDefinition,
    setup(props, { slots }) {
        const rows = computed(() => props.rows.map(getBTableRow(props)));
        const { value: sortColumn } = useProxy(computed(() => fromNullable(props.sortColumn)), (column) => {
            if (props['onUpdate:sortColumn'] && isSome(column)) {
                props['onUpdate:sortColumn'](column.value);
            }
        });
        function isCurrentSortColumn(column) {
            return pipe(sortColumn.value, exists(c => eqColumnTableData.equals(column, c)));
        }
        const columns = computed(() => props.columns.map((column) => {
            return {
                ...column,
                position: column.position ?? 'is-centered',
                isVisible: column.isVisible ?? true,
                isSortColumn: isCurrentSortColumn(column),
                isSortable: !!column.isSortable || !!column.ord
            };
        }));
        const sort = useSorting(props, sortColumn, rows, columns);
        useCheckableTable(props, rows);
        useSelectableTable(props);
        const drag = useDraggableTable(props);
        const windowSize = useWindowSize();
        const useMobileSorting = computed(() => props.useMobileCards && windowSize.value.isTouch);
        const visibleColumns = computed(() => columns.value.filter(column => column.isVisible));
        return () => h('div', useMobileSorting.value
            ? [generateMobileSort(props, sort, visibleColumns)]
            : [generateTable(props, rows, visibleColumns, drag, sort, slots)]);
    }
});
//# sourceMappingURL=data:application/json;base64,