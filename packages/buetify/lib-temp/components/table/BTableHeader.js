import { BCheckbox } from '../form/checkbox/BCheckbox';
import BTableColumn from './BTableColumn';
import { useInjectedCheckableTable } from './composables/useCheckableTable';
import { h } from 'vue';
export default function BTableHeader(props, { slots }) {
    const { allRowsChecked, toggleAllRows, variant, isCheckable } = useInjectedCheckableTable();
    const nodes = props.columns.map(column => h(BTableColumn, {
        key: column.label,
        column,
        sortType: props.sortType,
        'onUpdate:sortType': props['onUpdate:sortType'],
        'onUpdate:sortColumn': props['onUpdate:sortColumn']
    }, slots));
    if (isCheckable.value) {
        nodes.unshift(slots['header.checkbox']
            ? h('th', slots['header.checkbox']({
                modelValue: allRowsChecked.value,
                variant: variant.value,
                isDisabled: props.isDisabled,
                'onUpdate:modelValue': toggleAllRows
            }))
            : h('th', { class: 'checkbox-cell' }, [
                h(BCheckbox, {
                    modelValue: allRowsChecked.value,
                    variant: variant.value,
                    isDisabled: props.isDisabled,
                    'onUpdate:modelValue': toggleAllRows
                })
            ]));
    }
    return h('thead', [h('tr', nodes)]);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQlRhYmxlSGVhZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvdGFibGUvQlRhYmxlSGVhZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUN2RCxPQUFPLFlBQVksTUFBTSxnQkFBZ0IsQ0FBQztBQUMxQyxPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUU1RSxPQUFPLEVBQWdCLENBQUMsRUFBRSxNQUFNLEtBQUssQ0FBQztBQVV0QyxNQUFNLENBQUMsT0FBTyxVQUFVLFlBQVksQ0FBQyxLQUF3QixFQUFFLEVBQUUsS0FBSyxFQUFnQjtJQUNwRixNQUFNLEVBQUUsY0FBYyxFQUFFLGFBQWEsRUFBRSxPQUFPLEVBQUUsV0FBVyxFQUFFLEdBQUcseUJBQXlCLEVBQUUsQ0FBQztJQUM1RixNQUFNLEtBQUssR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUN2QyxDQUFDLENBQ0MsWUFBWSxFQUNaO1FBQ0UsR0FBRyxFQUFFLE1BQU0sQ0FBQyxLQUFLO1FBQ2pCLE1BQU07UUFDTixRQUFRLEVBQUUsS0FBSyxDQUFDLFFBQVE7UUFDeEIsbUJBQW1CLEVBQUUsS0FBSyxDQUFDLG1CQUFtQixDQUFDO1FBQy9DLHFCQUFxQixFQUFFLEtBQUssQ0FBQyxxQkFBcUIsQ0FBQztLQUNwRCxFQUNELEtBQUssQ0FDTixDQUNGLENBQUM7SUFDRixJQUFJLFdBQVcsQ0FBQyxLQUFLLEVBQUU7UUFDckIsS0FBSyxDQUFDLE9BQU8sQ0FDWCxLQUFLLENBQUMsaUJBQWlCLENBQUM7WUFDdEIsQ0FBQyxDQUFDLENBQUMsQ0FDQyxJQUFJLEVBQ0osS0FBSyxDQUFDLGlCQUFpQixDQUFDLENBQUM7Z0JBQ3ZCLFVBQVUsRUFBRSxjQUFjLENBQUMsS0FBSztnQkFDaEMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxLQUFLO2dCQUN0QixVQUFVLEVBQUUsS0FBSyxDQUFDLFVBQVU7Z0JBQzVCLHFCQUFxQixFQUFFLGFBQWE7YUFDckMsQ0FBQyxDQUNIO1lBQ0gsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxLQUFLLEVBQUUsZUFBZSxFQUFFLEVBQUU7Z0JBQ2xDLENBQUMsQ0FBQyxTQUFTLEVBQUU7b0JBQ1gsVUFBVSxFQUFFLGNBQWMsQ0FBQyxLQUFLO29CQUNoQyxPQUFPLEVBQUUsT0FBTyxDQUFDLEtBQUs7b0JBQ3RCLFVBQVUsRUFBRSxLQUFLLENBQUMsVUFBVTtvQkFDNUIscUJBQXFCLEVBQUUsYUFBYTtpQkFDckMsQ0FBQzthQUNILENBQUMsQ0FDUCxDQUFDO0tBQ0g7SUFDRCxPQUFPLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUN0QyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRnVuY3Rpb25OIH0gZnJvbSAnZnAtdHMvbGliL2Z1bmN0aW9uJztcbmltcG9ydCB7IEJDaGVja2JveCB9IGZyb20gJy4uL2Zvcm0vY2hlY2tib3gvQkNoZWNrYm94JztcbmltcG9ydCBCVGFibGVDb2x1bW4gZnJvbSAnLi9CVGFibGVDb2x1bW4nO1xuaW1wb3J0IHsgdXNlSW5qZWN0ZWRDaGVja2FibGVUYWJsZSB9IGZyb20gJy4vY29tcG9zYWJsZXMvdXNlQ2hlY2thYmxlVGFibGUnO1xuaW1wb3J0IHsgQlRhYmxlQ29sdW1uIGFzIEJUYWJsZUNvbHVtbkludGVyZmFjZSwgU29ydFR5cGUgfSBmcm9tICcuL3NoYXJlZCc7XG5pbXBvcnQgeyBTZXR1cENvbnRleHQsIGggfSBmcm9tICd2dWUnO1xuXG5leHBvcnQgaW50ZXJmYWNlIEJUYWJsZUhlYWRlclByb3BzIHtcbiAgY29sdW1uczogQlRhYmxlQ29sdW1uSW50ZXJmYWNlW107XG4gIGlzRGlzYWJsZWQ/OiBib29sZWFuO1xuICBzb3J0VHlwZTogU29ydFR5cGU7XG4gICdvblVwZGF0ZTpzb3J0VHlwZSc6IEZ1bmN0aW9uTjxbU29ydFR5cGVdLCB2b2lkPjtcbiAgJ29uVXBkYXRlOnNvcnRDb2x1bW4nOiBGdW5jdGlvbk48W0JUYWJsZUNvbHVtbkludGVyZmFjZV0sIHZvaWQ+O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBCVGFibGVIZWFkZXIocHJvcHM6IEJUYWJsZUhlYWRlclByb3BzLCB7IHNsb3RzIH06IFNldHVwQ29udGV4dCkge1xuICBjb25zdCB7IGFsbFJvd3NDaGVja2VkLCB0b2dnbGVBbGxSb3dzLCB2YXJpYW50LCBpc0NoZWNrYWJsZSB9ID0gdXNlSW5qZWN0ZWRDaGVja2FibGVUYWJsZSgpO1xuICBjb25zdCBub2RlcyA9IHByb3BzLmNvbHVtbnMubWFwKGNvbHVtbiA9PlxuICAgIGgoXG4gICAgICBCVGFibGVDb2x1bW4sXG4gICAgICB7XG4gICAgICAgIGtleTogY29sdW1uLmxhYmVsLFxuICAgICAgICBjb2x1bW4sXG4gICAgICAgIHNvcnRUeXBlOiBwcm9wcy5zb3J0VHlwZSxcbiAgICAgICAgJ29uVXBkYXRlOnNvcnRUeXBlJzogcHJvcHNbJ29uVXBkYXRlOnNvcnRUeXBlJ10sXG4gICAgICAgICdvblVwZGF0ZTpzb3J0Q29sdW1uJzogcHJvcHNbJ29uVXBkYXRlOnNvcnRDb2x1bW4nXVxuICAgICAgfSxcbiAgICAgIHNsb3RzXG4gICAgKVxuICApO1xuICBpZiAoaXNDaGVja2FibGUudmFsdWUpIHtcbiAgICBub2Rlcy51bnNoaWZ0KFxuICAgICAgc2xvdHNbJ2hlYWRlci5jaGVja2JveCddXG4gICAgICAgID8gaChcbiAgICAgICAgICAgICd0aCcsXG4gICAgICAgICAgICBzbG90c1snaGVhZGVyLmNoZWNrYm94J10oe1xuICAgICAgICAgICAgICBtb2RlbFZhbHVlOiBhbGxSb3dzQ2hlY2tlZC52YWx1ZSxcbiAgICAgICAgICAgICAgdmFyaWFudDogdmFyaWFudC52YWx1ZSxcbiAgICAgICAgICAgICAgaXNEaXNhYmxlZDogcHJvcHMuaXNEaXNhYmxlZCxcbiAgICAgICAgICAgICAgJ29uVXBkYXRlOm1vZGVsVmFsdWUnOiB0b2dnbGVBbGxSb3dzXG4gICAgICAgICAgICB9KVxuICAgICAgICAgIClcbiAgICAgICAgOiBoKCd0aCcsIHsgY2xhc3M6ICdjaGVja2JveC1jZWxsJyB9LCBbXG4gICAgICAgICAgICBoKEJDaGVja2JveCwge1xuICAgICAgICAgICAgICBtb2RlbFZhbHVlOiBhbGxSb3dzQ2hlY2tlZC52YWx1ZSxcbiAgICAgICAgICAgICAgdmFyaWFudDogdmFyaWFudC52YWx1ZSxcbiAgICAgICAgICAgICAgaXNEaXNhYmxlZDogcHJvcHMuaXNEaXNhYmxlZCxcbiAgICAgICAgICAgICAgJ29uVXBkYXRlOm1vZGVsVmFsdWUnOiB0b2dnbGVBbGxSb3dzXG4gICAgICAgICAgICB9KVxuICAgICAgICAgIF0pXG4gICAgKTtcbiAgfVxuICByZXR1cm4gaCgndGhlYWQnLCBbaCgndHInLCBub2RlcyldKTtcbn1cbiJdfQ==