import './table.sass';
import { BSelect } from '../form/select/BSelect';
import VerticalExpansionIcon from '../icons/verticalExpansion/VerticalExpansionIcon';
import { findFirst } from 'fp-ts/lib/Array';
import { isSome, map, toNullable } from 'fp-ts/lib/Option';
import { pipe } from 'fp-ts/lib/pipeable';
import { h } from 'vue';
function generateSortDirectionButton(props) {
    return h('div', { class: 'control' }, [
        h('button', {
            class: 'button is-primary',
            onClick: () => {
                props['onUpdate:sortType'](props.sortType === 'Ascending' ? 'Descending' : 'Ascending');
            }
        }, [
            h(VerticalExpansionIcon, {
                isExpanded: props.sortType === 'Descending',
                size: 'is-small'
            })
        ])
    ]);
}
function generateBSelect(props) {
    const sortableColumns = props.columns.filter(c => c.isSortable);
    return h(BSelect, {
        placeholder: props.placeholder,
        items: sortableColumns,
        itemKey: 'label',
        itemValue: 'label',
        itemText: 'label',
        modelValue: pipe(props.sortColumn, map(column => column.label), toNullable),
        isExpanded: true,
        'onUpdate:modelValue': (label) => {
            const newSortColumn = pipe(sortableColumns, findFirst(column => column.label === label));
            if (isSome(newSortColumn)) {
                props['onUpdate:sortColumn'](newSortColumn.value);
            }
        }
    });
}
export default function BTableMobileSort(props) {
    return h('section', {
        class: 'field table-mobile-sort',
        'aria-label': 'Table Sort Controls'
    }, [h('div', { class: 'field has-addons' }, [generateBSelect(props), generateSortDirectionButton(props)])]);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQlRhYmxlTW9iaWxlU29ydC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3RhYmxlL0JUYWJsZU1vYmlsZVNvcnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxjQUFjLENBQUM7QUFFdEIsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQ2pELE9BQU8scUJBQXFCLE1BQU0sa0RBQWtELENBQUM7QUFFckYsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQzVDLE9BQU8sRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFVLFVBQVUsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQ25FLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUMxQyxPQUFPLEVBQVMsQ0FBQyxFQUFFLE1BQU0sS0FBSyxDQUFDO0FBVy9CLFNBQVMsMkJBQTJCLENBQUMsS0FBNEI7SUFDL0QsT0FBTyxDQUFDLENBQUMsS0FBSyxFQUFFLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxFQUFFO1FBQ3BDLENBQUMsQ0FDQyxRQUFRLEVBQ1I7WUFDRSxLQUFLLEVBQUUsbUJBQW1CO1lBQzFCLE9BQU8sRUFBRSxHQUFHLEVBQUU7Z0JBQ1osS0FBSyxDQUFDLG1CQUFtQixDQUFDLENBQUMsS0FBSyxDQUFDLFFBQVEsS0FBSyxXQUFXLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUM7WUFDMUYsQ0FBQztTQUNGLEVBQ0Q7WUFDRSxDQUFDLENBQUMscUJBQXFCLEVBQUU7Z0JBQ3ZCLFVBQVUsRUFBRSxLQUFLLENBQUMsUUFBUSxLQUFLLFlBQVk7Z0JBQzNDLElBQUksRUFBRSxVQUFVO2FBQ2pCLENBQUM7U0FDSCxDQUNGO0tBQ0YsQ0FBQyxDQUFDO0FBQ0wsQ0FBQztBQUVELFNBQVMsZUFBZSxDQUFDLEtBQTRCO0lBQ25ELE1BQU0sZUFBZSxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ2hFLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRTtRQUNoQixXQUFXLEVBQUUsS0FBSyxDQUFDLFdBQVc7UUFDOUIsS0FBSyxFQUFFLGVBQWU7UUFDdEIsT0FBTyxFQUFFLE9BQU87UUFDaEIsU0FBUyxFQUFFLE9BQU87UUFDbEIsUUFBUSxFQUFFLE9BQU87UUFDakIsVUFBVSxFQUFFLElBQUksQ0FDZCxLQUFLLENBQUMsVUFBVSxFQUNoQixHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQzNCLFVBQVUsQ0FDWDtRQUNELFVBQVUsRUFBRSxJQUFJO1FBQ2hCLHFCQUFxQixFQUFFLENBQUMsS0FBYSxFQUFFLEVBQUU7WUFDdkMsTUFBTSxhQUFhLEdBQUcsSUFBSSxDQUN4QixlQUFlLEVBQ2YsU0FBUyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLEtBQUssS0FBSyxLQUFLLENBQUMsQ0FDNUMsQ0FBQztZQUVGLElBQUksTUFBTSxDQUFDLGFBQWEsQ0FBQyxFQUFFO2dCQUN6QixLQUFLLENBQUMscUJBQXFCLENBQUMsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUM7YUFDbkQ7UUFDSCxDQUFDO0tBQ0YsQ0FBQyxDQUFDO0FBQ0wsQ0FBQztBQUVELE1BQU0sQ0FBQyxPQUFPLFVBQVUsZ0JBQWdCLENBQUMsS0FBNEI7SUFDbkUsT0FBTyxDQUFDLENBQ04sU0FBUyxFQUNUO1FBQ0UsS0FBSyxFQUFFLHlCQUF5QjtRQUNoQyxZQUFZLEVBQUUscUJBQXFCO0tBQ3BDLEVBQ0QsQ0FBQyxDQUFDLENBQUMsS0FBSyxFQUFFLEVBQUUsS0FBSyxFQUFFLGtCQUFrQixFQUFFLEVBQUUsQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUFDLEVBQUUsMkJBQTJCLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQ3hHLENBQUM7QUFDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICcuL3RhYmxlLnNhc3MnO1xuaW1wb3J0IHsgRnVuY3Rpb25OIH0gZnJvbSAnZnAtdHMvbGliL2Z1bmN0aW9uJztcbmltcG9ydCB7IEJTZWxlY3QgfSBmcm9tICcuLi9mb3JtL3NlbGVjdC9CU2VsZWN0JztcbmltcG9ydCBWZXJ0aWNhbEV4cGFuc2lvbkljb24gZnJvbSAnLi4vaWNvbnMvdmVydGljYWxFeHBhbnNpb24vVmVydGljYWxFeHBhbnNpb25JY29uJztcbmltcG9ydCB7IEJUYWJsZUNvbHVtbiwgU29ydFR5cGUgfSBmcm9tICcuL3NoYXJlZCc7XG5pbXBvcnQgeyBmaW5kRmlyc3QgfSBmcm9tICdmcC10cy9saWIvQXJyYXknO1xuaW1wb3J0IHsgaXNTb21lLCBtYXAsIE9wdGlvbiwgdG9OdWxsYWJsZSB9IGZyb20gJ2ZwLXRzL2xpYi9PcHRpb24nO1xuaW1wb3J0IHsgcGlwZSB9IGZyb20gJ2ZwLXRzL2xpYi9waXBlYWJsZSc7XG5pbXBvcnQgeyBWTm9kZSwgaCB9IGZyb20gJ3Z1ZSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQlRhYmxlTW9iaWxlU29ydFByb3BzIHtcbiAgc29ydENvbHVtbjogT3B0aW9uPEJUYWJsZUNvbHVtbj47XG4gICdvblVwZGF0ZTpzb3J0Q29sdW1uJzogRnVuY3Rpb25OPFtCVGFibGVDb2x1bW5dLCB2b2lkPjtcbiAgc29ydFR5cGU6IFNvcnRUeXBlO1xuICAnb25VcGRhdGU6c29ydFR5cGUnOiBGdW5jdGlvbk48W1NvcnRUeXBlXSwgdm9pZD47XG4gIGNvbHVtbnM6IEJUYWJsZUNvbHVtbltdO1xuICBwbGFjZWhvbGRlcj86IHN0cmluZztcbn1cblxuZnVuY3Rpb24gZ2VuZXJhdGVTb3J0RGlyZWN0aW9uQnV0dG9uKHByb3BzOiBCVGFibGVNb2JpbGVTb3J0UHJvcHMpOiBWTm9kZSB7XG4gIHJldHVybiBoKCdkaXYnLCB7IGNsYXNzOiAnY29udHJvbCcgfSwgW1xuICAgIGgoXG4gICAgICAnYnV0dG9uJyxcbiAgICAgIHtcbiAgICAgICAgY2xhc3M6ICdidXR0b24gaXMtcHJpbWFyeScsXG4gICAgICAgIG9uQ2xpY2s6ICgpID0+IHtcbiAgICAgICAgICBwcm9wc1snb25VcGRhdGU6c29ydFR5cGUnXShwcm9wcy5zb3J0VHlwZSA9PT0gJ0FzY2VuZGluZycgPyAnRGVzY2VuZGluZycgOiAnQXNjZW5kaW5nJyk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBbXG4gICAgICAgIGgoVmVydGljYWxFeHBhbnNpb25JY29uLCB7XG4gICAgICAgICAgaXNFeHBhbmRlZDogcHJvcHMuc29ydFR5cGUgPT09ICdEZXNjZW5kaW5nJyxcbiAgICAgICAgICBzaXplOiAnaXMtc21hbGwnXG4gICAgICAgIH0pXG4gICAgICBdXG4gICAgKVxuICBdKTtcbn1cblxuZnVuY3Rpb24gZ2VuZXJhdGVCU2VsZWN0KHByb3BzOiBCVGFibGVNb2JpbGVTb3J0UHJvcHMpOiBWTm9kZSB7XG4gIGNvbnN0IHNvcnRhYmxlQ29sdW1ucyA9IHByb3BzLmNvbHVtbnMuZmlsdGVyKGMgPT4gYy5pc1NvcnRhYmxlKTtcbiAgcmV0dXJuIGgoQlNlbGVjdCwge1xuICAgIHBsYWNlaG9sZGVyOiBwcm9wcy5wbGFjZWhvbGRlcixcbiAgICBpdGVtczogc29ydGFibGVDb2x1bW5zLFxuICAgIGl0ZW1LZXk6ICdsYWJlbCcsXG4gICAgaXRlbVZhbHVlOiAnbGFiZWwnLFxuICAgIGl0ZW1UZXh0OiAnbGFiZWwnLFxuICAgIG1vZGVsVmFsdWU6IHBpcGUoXG4gICAgICBwcm9wcy5zb3J0Q29sdW1uLFxuICAgICAgbWFwKGNvbHVtbiA9PiBjb2x1bW4ubGFiZWwpLFxuICAgICAgdG9OdWxsYWJsZVxuICAgICksXG4gICAgaXNFeHBhbmRlZDogdHJ1ZSxcbiAgICAnb25VcGRhdGU6bW9kZWxWYWx1ZSc6IChsYWJlbDogc3RyaW5nKSA9PiB7XG4gICAgICBjb25zdCBuZXdTb3J0Q29sdW1uID0gcGlwZShcbiAgICAgICAgc29ydGFibGVDb2x1bW5zLFxuICAgICAgICBmaW5kRmlyc3QoY29sdW1uID0+IGNvbHVtbi5sYWJlbCA9PT0gbGFiZWwpXG4gICAgICApO1xuXG4gICAgICBpZiAoaXNTb21lKG5ld1NvcnRDb2x1bW4pKSB7XG4gICAgICAgIHByb3BzWydvblVwZGF0ZTpzb3J0Q29sdW1uJ10obmV3U29ydENvbHVtbi52YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gQlRhYmxlTW9iaWxlU29ydChwcm9wczogQlRhYmxlTW9iaWxlU29ydFByb3BzKSB7XG4gIHJldHVybiBoKFxuICAgICdzZWN0aW9uJyxcbiAgICB7XG4gICAgICBjbGFzczogJ2ZpZWxkIHRhYmxlLW1vYmlsZS1zb3J0JyxcbiAgICAgICdhcmlhLWxhYmVsJzogJ1RhYmxlIFNvcnQgQ29udHJvbHMnXG4gICAgfSxcbiAgICBbaCgnZGl2JywgeyBjbGFzczogJ2ZpZWxkIGhhcy1hZGRvbnMnIH0sIFtnZW5lcmF0ZUJTZWxlY3QocHJvcHMpLCBnZW5lcmF0ZVNvcnREaXJlY3Rpb25CdXR0b24ocHJvcHMpXSldXG4gICk7XG59XG4iXX0=