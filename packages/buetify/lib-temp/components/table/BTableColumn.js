import { h } from 'vue';
import VerticalExpansionIcon from '../icons/verticalExpansion/VerticalExpansionIcon';
import BTooltip from '../tooltip/BTooltip';
import { isString } from '../../utils/helpers';
function formatWidth(width, suffix = 'px') {
    return isString(width) ? width : `${width}${suffix}`;
}
function getNewSortTypeListener(props) {
    return (e) => {
        e.stopPropagation();
        props['onUpdate:sortType'](props.sortType === 'Ascending' ? 'Descending' : 'Ascending');
    };
}
function getColumnListener(props) {
    return props.column.isSortColumn ? getNewSortTypeListener(props) : () => props['onUpdate:sortColumn'](props.column);
}
export default function BTableColumn(props, { slots }) {
    const slot = slots[`header.${props.column.label}`] || slots.header;
    const children = [];
    if (slot) {
        children.push(slot(props.column));
    }
    else {
        children.push(isString(props.column.detail)
            ? h(BTooltip, { label: props.column.detail, position: 'is-left' }, () => props.column.label)
            : props.column.label);
    }
    if (props.column.isSortColumn) {
        children.push(h(VerticalExpansionIcon, { isExpanded: props.sortType === 'Ascending' }));
    }
    return h('th', {
        class: {
            'is-sortable': props.column.isSortable,
            'is-sticky-left': !!props.column.isSticky
        },
        onClick: props.column.isSortable ? getColumnListener(props) : undefined,
        style: props.column.width !== undefined ? { 'min-width': formatWidth(props.column.width) } : undefined
    }, [
        h('div', {
            class: ['th-wrap', props.column.position]
        }, children)
    ]);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQlRhYmxlQ29sdW1uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvdGFibGUvQlRhYmxlQ29sdW1uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBZ0IsQ0FBQyxFQUFFLE1BQU0sS0FBSyxDQUFDO0FBQ3RDLE9BQU8scUJBQXFCLE1BQU0sa0RBQWtELENBQUM7QUFDckYsT0FBTyxRQUFRLE1BQU0scUJBQXFCLENBQUM7QUFDM0MsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBVS9DLFNBQVMsV0FBVyxDQUFDLEtBQXNCLEVBQUUsU0FBOEIsSUFBSTtJQUM3RSxPQUFPLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssR0FBRyxNQUFNLEVBQUUsQ0FBQztBQUN2RCxDQUFDO0FBRUQsU0FBUyxzQkFBc0IsQ0FBQyxLQUF3QjtJQUN0RCxPQUFPLENBQUMsQ0FBYSxFQUFFLEVBQUU7UUFDdkIsQ0FBQyxDQUFDLGVBQWUsRUFBRSxDQUFDO1FBQ3BCLEtBQUssQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLEtBQUssQ0FBQyxRQUFRLEtBQUssV0FBVyxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQzFGLENBQUMsQ0FBQztBQUNKLENBQUM7QUFFRCxTQUFTLGlCQUFpQixDQUFDLEtBQXdCO0lBQ2pELE9BQU8sS0FBSyxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLHNCQUFzQixDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxLQUFLLENBQUMscUJBQXFCLENBQUMsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDdEgsQ0FBQztBQUVELE1BQU0sQ0FBQyxPQUFPLFVBQVUsWUFBWSxDQUFDLEtBQXdCLEVBQUUsRUFBRSxLQUFLLEVBQWdCO0lBQ3BGLE1BQU0sSUFBSSxHQUFHLEtBQUssQ0FBQyxVQUFVLEtBQUssQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsSUFBSSxLQUFLLENBQUMsTUFBTSxDQUFDO0lBQ25FLE1BQU0sUUFBUSxHQUFHLEVBQUUsQ0FBQztJQUNwQixJQUFJLElBQUksRUFBRTtRQUNSLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0tBQ25DO1NBQU07UUFDTCxRQUFRLENBQUMsSUFBSSxDQUNYLFFBQVEsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQztZQUMzQixDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxFQUFFLEtBQUssRUFBRSxLQUFLLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxRQUFRLEVBQUUsU0FBUyxFQUFFLEVBQUUsR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUM7WUFDNUYsQ0FBQyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUN2QixDQUFDO0tBQ0g7SUFDRCxJQUFJLEtBQUssQ0FBQyxNQUFNLENBQUMsWUFBWSxFQUFFO1FBQzdCLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLHFCQUFxQixFQUFFLEVBQUUsVUFBVSxFQUFFLEtBQUssQ0FBQyxRQUFRLEtBQUssV0FBVyxFQUFFLENBQUMsQ0FBQyxDQUFDO0tBQ3pGO0lBQ0QsT0FBTyxDQUFDLENBQ04sSUFBSSxFQUNKO1FBQ0UsS0FBSyxFQUFFO1lBQ0wsYUFBYSxFQUFFLEtBQUssQ0FBQyxNQUFNLENBQUMsVUFBVTtZQUN0QyxnQkFBZ0IsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxRQUFRO1NBQzFDO1FBQ0QsT0FBTyxFQUFFLEtBQUssQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxpQkFBaUIsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUztRQUN2RSxLQUFLLEVBQUUsS0FBSyxDQUFDLE1BQU0sQ0FBQyxLQUFLLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFFLFdBQVcsRUFBRSxXQUFXLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxTQUFTO0tBQ3ZHLEVBQ0Q7UUFDRSxDQUFDLENBQ0MsS0FBSyxFQUNMO1lBQ0UsS0FBSyxFQUFFLENBQUMsU0FBUyxFQUFFLEtBQUssQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDO1NBQzFDLEVBQ0QsUUFBUSxDQUNUO0tBQ0YsQ0FDRixDQUFDO0FBQ0osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEZ1bmN0aW9uTiB9IGZyb20gJ2ZwLXRzL2xpYi9mdW5jdGlvbic7XG5pbXBvcnQgeyBTZXR1cENvbnRleHQsIGggfSBmcm9tICd2dWUnO1xuaW1wb3J0IFZlcnRpY2FsRXhwYW5zaW9uSWNvbiBmcm9tICcuLi9pY29ucy92ZXJ0aWNhbEV4cGFuc2lvbi9WZXJ0aWNhbEV4cGFuc2lvbkljb24nO1xuaW1wb3J0IEJUb29sdGlwIGZyb20gJy4uL3Rvb2x0aXAvQlRvb2x0aXAnO1xuaW1wb3J0IHsgaXNTdHJpbmcgfSBmcm9tICcuLi8uLi91dGlscy9oZWxwZXJzJztcbmltcG9ydCB7IEJUYWJsZUNvbHVtbiwgU29ydFR5cGUgfSBmcm9tICcuL3NoYXJlZCc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQlRhYmxlQ29sdW1uUHJvcHMge1xuICBjb2x1bW46IEJUYWJsZUNvbHVtbjtcbiAgc29ydFR5cGU6IFNvcnRUeXBlO1xuICAnb25VcGRhdGU6c29ydFR5cGUnOiBGdW5jdGlvbk48W1NvcnRUeXBlXSwgdm9pZD47XG4gICdvblVwZGF0ZTpzb3J0Q29sdW1uJzogRnVuY3Rpb25OPFtCVGFibGVDb2x1bW5dLCB2b2lkPjtcbn1cblxuZnVuY3Rpb24gZm9ybWF0V2lkdGgod2lkdGg6IHN0cmluZyB8IG51bWJlciwgc3VmZml4OiAncmVtJyB8ICdlbScgfCAncHgnID0gJ3B4Jyk6IHN0cmluZyB7XG4gIHJldHVybiBpc1N0cmluZyh3aWR0aCkgPyB3aWR0aCA6IGAke3dpZHRofSR7c3VmZml4fWA7XG59XG5cbmZ1bmN0aW9uIGdldE5ld1NvcnRUeXBlTGlzdGVuZXIocHJvcHM6IEJUYWJsZUNvbHVtblByb3BzKTogRnVuY3Rpb25OPFtNb3VzZUV2ZW50XSwgdm9pZD4ge1xuICByZXR1cm4gKGU6IE1vdXNlRXZlbnQpID0+IHtcbiAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIHByb3BzWydvblVwZGF0ZTpzb3J0VHlwZSddKHByb3BzLnNvcnRUeXBlID09PSAnQXNjZW5kaW5nJyA/ICdEZXNjZW5kaW5nJyA6ICdBc2NlbmRpbmcnKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZ2V0Q29sdW1uTGlzdGVuZXIocHJvcHM6IEJUYWJsZUNvbHVtblByb3BzKTogRnVuY3Rpb25OPFtNb3VzZUV2ZW50XSwgdm9pZD4ge1xuICByZXR1cm4gcHJvcHMuY29sdW1uLmlzU29ydENvbHVtbiA/IGdldE5ld1NvcnRUeXBlTGlzdGVuZXIocHJvcHMpIDogKCkgPT4gcHJvcHNbJ29uVXBkYXRlOnNvcnRDb2x1bW4nXShwcm9wcy5jb2x1bW4pO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBCVGFibGVDb2x1bW4ocHJvcHM6IEJUYWJsZUNvbHVtblByb3BzLCB7IHNsb3RzIH06IFNldHVwQ29udGV4dCkge1xuICBjb25zdCBzbG90ID0gc2xvdHNbYGhlYWRlci4ke3Byb3BzLmNvbHVtbi5sYWJlbH1gXSB8fCBzbG90cy5oZWFkZXI7XG4gIGNvbnN0IGNoaWxkcmVuID0gW107XG4gIGlmIChzbG90KSB7XG4gICAgY2hpbGRyZW4ucHVzaChzbG90KHByb3BzLmNvbHVtbikpO1xuICB9IGVsc2Uge1xuICAgIGNoaWxkcmVuLnB1c2goXG4gICAgICBpc1N0cmluZyhwcm9wcy5jb2x1bW4uZGV0YWlsKVxuICAgICAgICA/IGgoQlRvb2x0aXAsIHsgbGFiZWw6IHByb3BzLmNvbHVtbi5kZXRhaWwsIHBvc2l0aW9uOiAnaXMtbGVmdCcgfSwgKCkgPT4gcHJvcHMuY29sdW1uLmxhYmVsKVxuICAgICAgICA6IHByb3BzLmNvbHVtbi5sYWJlbFxuICAgICk7XG4gIH1cbiAgaWYgKHByb3BzLmNvbHVtbi5pc1NvcnRDb2x1bW4pIHtcbiAgICBjaGlsZHJlbi5wdXNoKGgoVmVydGljYWxFeHBhbnNpb25JY29uLCB7IGlzRXhwYW5kZWQ6IHByb3BzLnNvcnRUeXBlID09PSAnQXNjZW5kaW5nJyB9KSk7XG4gIH1cbiAgcmV0dXJuIGgoXG4gICAgJ3RoJyxcbiAgICB7XG4gICAgICBjbGFzczoge1xuICAgICAgICAnaXMtc29ydGFibGUnOiBwcm9wcy5jb2x1bW4uaXNTb3J0YWJsZSxcbiAgICAgICAgJ2lzLXN0aWNreS1sZWZ0JzogISFwcm9wcy5jb2x1bW4uaXNTdGlja3lcbiAgICAgIH0sXG4gICAgICBvbkNsaWNrOiBwcm9wcy5jb2x1bW4uaXNTb3J0YWJsZSA/IGdldENvbHVtbkxpc3RlbmVyKHByb3BzKSA6IHVuZGVmaW5lZCxcbiAgICAgIHN0eWxlOiBwcm9wcy5jb2x1bW4ud2lkdGggIT09IHVuZGVmaW5lZCA/IHsgJ21pbi13aWR0aCc6IGZvcm1hdFdpZHRoKHByb3BzLmNvbHVtbi53aWR0aCkgfSA6IHVuZGVmaW5lZFxuICAgIH0sXG4gICAgW1xuICAgICAgaChcbiAgICAgICAgJ2RpdicsXG4gICAgICAgIHtcbiAgICAgICAgICBjbGFzczogWyd0aC13cmFwJywgcHJvcHMuY29sdW1uLnBvc2l0aW9uXVxuICAgICAgICB9LFxuICAgICAgICBjaGlsZHJlblxuICAgICAgKVxuICAgIF1cbiAgKTtcbn1cbiJdfQ==