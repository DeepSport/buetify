import './tabs.sass';
import { getUseModelPropsDefinition, useModel } from '../../composables/model';
import { useThemePropsDefinition, useTheme } from '../../composables/theme';
import { isFragment, isObject } from '../../utils/helpers';
import BScroll from '../scroll/BScroll';
import { h, shallowRef, provide, nextTick, Transition, defineComponent, onBeforeMount } from 'vue';
import { none, some } from 'fp-ts/lib/Option';
import { TAB_ITEM_NAME, TABS_SYMBOL } from './shared';
import { TabsThemeMap } from './theme';
export const BTabsPropsDefinition = {
    ...getUseModelPropsDefinition(),
    ...useThemePropsDefinition(TabsThemeMap),
    isExpanded: {
        type: Boolean,
        default: false
    },
    type: {
        type: String,
        default: ''
    },
    size: {
        type: String,
        default: ''
    },
    position: {
        type: String,
        default: ''
    },
    label: {
        type: String
    },
    variant: {
        type: String,
        default: ''
    },
    isAnimated: {
        type: Boolean,
        default: true
    },
    isScrollable: {
        type: Boolean,
        default: false
    }
};
function useOnTabItemClick(tab, index, model, activeLabel, transition) {
    return () => {
        const val = model.modelValue.value || 0;
        if (val !== index) {
            transition.value = index < val ? 'slide-next' : 'slide-prev';
            nextTick(() => {
                model.set(index);
                activeLabel.value = some(tab.props.label);
            });
        }
    };
}
function useGenerateNavItem(props, model, activeLabel, transition) {
    return function generateNavItem(step, index) {
        return h('li', {
            key: step.props.label,
            class: [
                {
                    'is-active': index === model.modelValue.value,
                    'is-disabled': step.props.isDisabled
                }
            ]
        }, [
            h('a', { onClick: useOnTabItemClick(step, index, model, activeLabel, transition) }, step.props.icon
                ? [
                    h(step.props.icon, {
                        size: props.size
                    }),
                    step.props.label
                ]
                : step.props.label)
        ]);
    };
}
function generateNavLabel(props) {
    return h('label', {
        class: ['label is-marginless align-self-center', props.size]
    }, props.label);
}
function generateNavItems(props, tabs, model, activeLabel, transition) {
    return h('ul', tabs.map(useGenerateNavItem(props, model, activeLabel, transition)));
}
function generateNavHeaderContent(props, tabs, model, activeLabel, transition, themeClasses) {
    return h('nav', {
        class: [
            'tabs',
            props.type,
            props.size,
            props.position,
            {
                'is-fullwidth': !!props.isExpanded || !!props.isScrollable,
                'is-toggle-rounded is-toggle': props.type === 'is-toggle-rounded'
            }
        ].concat(props.variant === '' ? themeClasses : [props.variant])
    }, props.label
        ? [generateNavLabel(props), generateNavItems(props, tabs, model, activeLabel, transition)]
        : [generateNavItems(props, tabs, model, activeLabel, transition)]);
}
function generateNavHeader(props, tabs, model, activeLabel, transition, themeClasses) {
    return props.isScrollable
        ? h(BScroll, { class: 'is-fullwidth' }, () => [
            generateNavHeaderContent(props, tabs, model, activeLabel, transition, themeClasses)
        ])
        : generateNavHeaderContent(props, tabs, model, activeLabel, transition, themeClasses);
}
function generateTabContent(props, tabs, model, transition) {
    return props.isAnimated
        ? h(Transition, { name: transition.value }, () => tabs[model.modelValue.value || 0])
        : tabs[model.modelValue.value || 0];
}
function isBTabItemNode(node) {
    return (isObject(node) &&
        isObject(node.type) &&
        node.type.name === TAB_ITEM_NAME &&
        (node.props['is-visible'] === undefined ||
            node.props['is-visible'] ||
            node.props.isVisible === undefined ||
            node.props.isVisible));
}
function getTabs(slots) {
    return (((slots.default && slots.default()) ||
        []).flatMap(node => (isFragment(node) ? node.children : [node])).filter(isBTabItemNode));
}
export default defineComponent({
    name: 'b-tabs',
    props: BTabsPropsDefinition,
    setup(props, context) {
        const { themeClasses } = useTheme(props);
        const model = useModel(props);
        const transition = shallowRef('slide-next');
        const injection = {
            activeLabel: shallowRef(none)
        };
        provide(TABS_SYMBOL, injection);
        onBeforeMount(() => {
            if (model.modelValue.value === undefined) {
                model.set(0);
            }
        });
        return () => {
            const tabs = getTabs(context.slots);
            return h('article', { class: 'b-tabs' }, [
                generateNavHeader(props, tabs, model, injection.activeLabel, transition, themeClasses.value),
                generateTabContent(props, tabs, model, transition)
            ]);
        };
    }
});
//# sourceMappingURL=data:application/json;base64,