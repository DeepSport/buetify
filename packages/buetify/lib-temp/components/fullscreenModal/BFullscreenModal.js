import './fullscreen-modal.sass';
import { usePopupController, UsePopupControllerPropsDefinition } from '../../composables/popupController';
import { constEmptyArray } from '../../utils/helpers';
import BOverlay from '../overlay/BOverlay';
import BSheet from '../sheet/BSheet';
import { defineComponent, shallowRef, h } from 'vue';
function generateTitle(slots) {
    return h('div', { class: 'main-slot' }, slots.title());
}
function generateCloseButton(popupController, slots) {
    return h('button', {
        class: 'navigation-icon has-text-link-hover',
        'aria-label': 'close',
        ...popupController.listeners
    }, slots.close());
}
function generateHeader(popupController, slots) {
    return h('header', {
        class: 'b-app-header is-flex flex-direction-row justify-content-center align-items-center'
    }, slots.header ? slots.header(popupController) : [generateCloseButton(popupController, slots), generateTitle(slots)]);
}
function generateContent(popupController, slots) {
    const nodes = slots.default();
    if (slots.header || slots.title) {
        nodes.unshift(generateHeader(popupController, slots));
    }
    return h(BSheet, { class: 'is-fullheight', tag: 'article' }, nodes);
}
function generateModal(popupController, slots) {
    return h(BOverlay, {
        isFullscreen: true,
        isActive: true,
        onClick: popupController.close
    }, () => [generateContent(popupController, slots)]);
}
export default defineComponent({
    name: 'b-fullscreen-modal',
    props: UsePopupControllerPropsDefinition,
    setup(props, { slots, attrs }) {
        const render = shallowRef(constEmptyArray);
        const popupController = usePopupController(props, render);
        render.value = () => {
            return [generateModal(popupController, slots)];
        };
        return () => slots.trigger && slots.trigger(popupController);
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQkZ1bGxzY3JlZW5Nb2RhbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL2Z1bGxzY3JlZW5Nb2RhbC9CRnVsbHNjcmVlbk1vZGFsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8seUJBQXlCLENBQUM7QUFFakMsT0FBTyxFQUVMLGtCQUFrQixFQUNsQixpQ0FBaUMsRUFDbEMsTUFBTSxtQ0FBbUMsQ0FBQztBQUMzQyxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDdEQsT0FBTyxRQUFRLE1BQU0scUJBQXFCLENBQUM7QUFDM0MsT0FBTyxNQUFNLE1BQU0saUJBQWlCLENBQUM7QUFDckMsT0FBTyxFQUFTLGVBQWUsRUFBRSxVQUFVLEVBQUUsQ0FBQyxFQUFTLE1BQU0sS0FBSyxDQUFDO0FBRW5FLFNBQVMsYUFBYSxDQUFDLEtBQVk7SUFDakMsT0FBTyxDQUFDLENBQUMsS0FBSyxFQUFFLEVBQUUsS0FBSyxFQUFFLFdBQVcsRUFBRSxFQUFFLEtBQUssQ0FBQyxLQUFNLEVBQUUsQ0FBQyxDQUFDO0FBQzFELENBQUM7QUFFRCxTQUFTLG1CQUFtQixDQUFDLGVBQWdDLEVBQUUsS0FBWTtJQUN6RSxPQUFPLENBQUMsQ0FDTixRQUFRLEVBQ1I7UUFDRSxLQUFLLEVBQUUscUNBQXFDO1FBQzVDLFlBQVksRUFBRSxPQUFPO1FBQ3JCLEdBQUcsZUFBZSxDQUFDLFNBQVM7S0FDN0IsRUFDRCxLQUFLLENBQUMsS0FBTSxFQUFFLENBQ2YsQ0FBQztBQUNKLENBQUM7QUFFRCxTQUFTLGNBQWMsQ0FBQyxlQUFnQyxFQUFFLEtBQVk7SUFDcEUsT0FBTyxDQUFDLENBQ04sUUFBUSxFQUNSO1FBQ0UsS0FBSyxFQUFFLG1GQUFtRjtLQUMzRixFQUNELEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsbUJBQW1CLENBQUMsZUFBZSxFQUFFLEtBQUssQ0FBQyxFQUFFLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUNuSCxDQUFDO0FBQ0osQ0FBQztBQUVELFNBQVMsZUFBZSxDQUFDLGVBQWdDLEVBQUUsS0FBWTtJQUNyRSxNQUFNLEtBQUssR0FBRyxLQUFLLENBQUMsT0FBUSxFQUFFLENBQUM7SUFDL0IsSUFBSSxLQUFLLENBQUMsTUFBTSxJQUFJLEtBQUssQ0FBQyxLQUFLLEVBQUU7UUFDL0IsS0FBSyxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUMsZUFBZSxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUM7S0FDdkQ7SUFDRCxPQUFPLENBQUMsQ0FBQyxNQUFNLEVBQUUsRUFBRSxLQUFLLEVBQUUsZUFBZSxFQUFFLEdBQUcsRUFBRSxTQUFTLEVBQUUsRUFBRSxLQUFLLENBQUMsQ0FBQztBQUN0RSxDQUFDO0FBRUQsU0FBUyxhQUFhLENBQUMsZUFBZ0MsRUFBRSxLQUFZO0lBQ25FLE9BQU8sQ0FBQyxDQUNOLFFBQVEsRUFDUjtRQUNFLFlBQVksRUFBRSxJQUFJO1FBQ2xCLFFBQVEsRUFBRSxJQUFJO1FBQ2QsT0FBTyxFQUFFLGVBQWUsQ0FBQyxLQUFLO0tBQy9CLEVBQ0QsR0FBRyxFQUFFLENBQUMsQ0FBQyxlQUFlLENBQUMsZUFBZSxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQ2hELENBQUM7QUFDSixDQUFDO0FBRUQsZUFBZSxlQUFlLENBQUM7SUFDN0IsSUFBSSxFQUFFLG9CQUFvQjtJQUMxQixLQUFLLEVBQUUsaUNBQWlDO0lBQ3hDLEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFO1FBQzNCLE1BQU0sTUFBTSxHQUFHLFVBQVUsQ0FBQyxlQUE4QixDQUFDLENBQUM7UUFDMUQsTUFBTSxlQUFlLEdBQUcsa0JBQWtCLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQzFELE1BQU0sQ0FBQyxLQUFLLEdBQUcsR0FBRyxFQUFFO1lBQ2xCLE9BQU8sQ0FBQyxhQUFhLENBQUMsZUFBZSxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFDakQsQ0FBQyxDQUFDO1FBQ0YsT0FBTyxHQUFHLEVBQUUsQ0FBQyxLQUFLLENBQUMsT0FBTyxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsZUFBZSxDQUFDLENBQUM7SUFDL0QsQ0FBQztDQUNGLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAnLi9mdWxsc2NyZWVuLW1vZGFsLnNhc3MnO1xuaW1wb3J0IHsgSU8gfSBmcm9tICdmcC10cy9saWIvSU8nO1xuaW1wb3J0IHtcbiAgUG9wdXBDb250cm9sbGVyLFxuICB1c2VQb3B1cENvbnRyb2xsZXIsXG4gIFVzZVBvcHVwQ29udHJvbGxlclByb3BzRGVmaW5pdGlvblxufSBmcm9tICcuLi8uLi9jb21wb3NhYmxlcy9wb3B1cENvbnRyb2xsZXInO1xuaW1wb3J0IHsgY29uc3RFbXB0eUFycmF5IH0gZnJvbSAnLi4vLi4vdXRpbHMvaGVscGVycyc7XG5pbXBvcnQgQk92ZXJsYXkgZnJvbSAnLi4vb3ZlcmxheS9CT3ZlcmxheSc7XG5pbXBvcnQgQlNoZWV0IGZyb20gJy4uL3NoZWV0L0JTaGVldCc7XG5pbXBvcnQgeyBWTm9kZSwgZGVmaW5lQ29tcG9uZW50LCBzaGFsbG93UmVmLCBoLCBTbG90cyB9IGZyb20gJ3Z1ZSc7XG5cbmZ1bmN0aW9uIGdlbmVyYXRlVGl0bGUoc2xvdHM6IFNsb3RzKTogVk5vZGUge1xuICByZXR1cm4gaCgnZGl2JywgeyBjbGFzczogJ21haW4tc2xvdCcgfSwgc2xvdHMudGl0bGUhKCkpO1xufVxuXG5mdW5jdGlvbiBnZW5lcmF0ZUNsb3NlQnV0dG9uKHBvcHVwQ29udHJvbGxlcjogUG9wdXBDb250cm9sbGVyLCBzbG90czogU2xvdHMpIHtcbiAgcmV0dXJuIGgoXG4gICAgJ2J1dHRvbicsXG4gICAge1xuICAgICAgY2xhc3M6ICduYXZpZ2F0aW9uLWljb24gaGFzLXRleHQtbGluay1ob3ZlcicsXG4gICAgICAnYXJpYS1sYWJlbCc6ICdjbG9zZScsXG4gICAgICAuLi5wb3B1cENvbnRyb2xsZXIubGlzdGVuZXJzXG4gICAgfSxcbiAgICBzbG90cy5jbG9zZSEoKVxuICApO1xufVxuXG5mdW5jdGlvbiBnZW5lcmF0ZUhlYWRlcihwb3B1cENvbnRyb2xsZXI6IFBvcHVwQ29udHJvbGxlciwgc2xvdHM6IFNsb3RzKSB7XG4gIHJldHVybiBoKFxuICAgICdoZWFkZXInLFxuICAgIHtcbiAgICAgIGNsYXNzOiAnYi1hcHAtaGVhZGVyIGlzLWZsZXggZmxleC1kaXJlY3Rpb24tcm93IGp1c3RpZnktY29udGVudC1jZW50ZXIgYWxpZ24taXRlbXMtY2VudGVyJ1xuICAgIH0sXG4gICAgc2xvdHMuaGVhZGVyID8gc2xvdHMuaGVhZGVyKHBvcHVwQ29udHJvbGxlcikgOiBbZ2VuZXJhdGVDbG9zZUJ1dHRvbihwb3B1cENvbnRyb2xsZXIsIHNsb3RzKSwgZ2VuZXJhdGVUaXRsZShzbG90cyldXG4gICk7XG59XG5cbmZ1bmN0aW9uIGdlbmVyYXRlQ29udGVudChwb3B1cENvbnRyb2xsZXI6IFBvcHVwQ29udHJvbGxlciwgc2xvdHM6IFNsb3RzKSB7XG4gIGNvbnN0IG5vZGVzID0gc2xvdHMuZGVmYXVsdCEoKTtcbiAgaWYgKHNsb3RzLmhlYWRlciB8fCBzbG90cy50aXRsZSkge1xuICAgIG5vZGVzLnVuc2hpZnQoZ2VuZXJhdGVIZWFkZXIocG9wdXBDb250cm9sbGVyLCBzbG90cykpO1xuICB9XG4gIHJldHVybiBoKEJTaGVldCwgeyBjbGFzczogJ2lzLWZ1bGxoZWlnaHQnLCB0YWc6ICdhcnRpY2xlJyB9LCBub2Rlcyk7XG59XG5cbmZ1bmN0aW9uIGdlbmVyYXRlTW9kYWwocG9wdXBDb250cm9sbGVyOiBQb3B1cENvbnRyb2xsZXIsIHNsb3RzOiBTbG90cykge1xuICByZXR1cm4gaChcbiAgICBCT3ZlcmxheSxcbiAgICB7XG4gICAgICBpc0Z1bGxzY3JlZW46IHRydWUsXG4gICAgICBpc0FjdGl2ZTogdHJ1ZSxcbiAgICAgIG9uQ2xpY2s6IHBvcHVwQ29udHJvbGxlci5jbG9zZVxuICAgIH0sXG4gICAgKCkgPT4gW2dlbmVyYXRlQ29udGVudChwb3B1cENvbnRyb2xsZXIsIHNsb3RzKV1cbiAgKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZGVmaW5lQ29tcG9uZW50KHtcbiAgbmFtZTogJ2ItZnVsbHNjcmVlbi1tb2RhbCcsXG4gIHByb3BzOiBVc2VQb3B1cENvbnRyb2xsZXJQcm9wc0RlZmluaXRpb24sXG4gIHNldHVwKHByb3BzLCB7IHNsb3RzLCBhdHRycyB9KSB7XG4gICAgY29uc3QgcmVuZGVyID0gc2hhbGxvd1JlZihjb25zdEVtcHR5QXJyYXkgYXMgSU88Vk5vZGVbXT4pO1xuICAgIGNvbnN0IHBvcHVwQ29udHJvbGxlciA9IHVzZVBvcHVwQ29udHJvbGxlcihwcm9wcywgcmVuZGVyKTtcbiAgICByZW5kZXIudmFsdWUgPSAoKSA9PiB7XG4gICAgICByZXR1cm4gW2dlbmVyYXRlTW9kYWwocG9wdXBDb250cm9sbGVyLCBzbG90cyldO1xuICAgIH07XG4gICAgcmV0dXJuICgpID0+IHNsb3RzLnRyaWdnZXIgJiYgc2xvdHMudHJpZ2dlcihwb3B1cENvbnRyb2xsZXIpO1xuICB9XG59KTtcbiJdfQ==