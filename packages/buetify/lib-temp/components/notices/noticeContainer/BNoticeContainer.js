import { constant, constVoid } from 'fp-ts/lib/function';
import { getOrElse, isNone, none, some } from 'fp-ts/lib/Option';
import { pipe } from 'fp-ts/lib/pipeable';
import { formatTransition } from '../../../composables/transition';
import { defineComponent, h, Transition as transition } from 'vue';
import { constEmptyArray } from '../../../utils/helpers';
const BNoticeContainer = defineComponent({
    name: 'b-notice-container',
    data: () => ({
        id: 0,
        notice: none
    }),
    computed: {
        rootZIndex() {
            return isNone(this.notice) ? -1 : 1;
        },
        extractedNotice() {
            return pipe(this.notice, getOrElse(constant({ transition: { name: 'fade' }, render: constEmptyArray })));
        }
    },
    methods: {
        addNotice(options) {
            const notice = { render: options.render, transition: formatTransition(options.transition) };
            this.notice = some(notice);
            return () => {
                this.notice = none;
            };
        },
        showNotice(params) {
            if (params.shouldQueue && !isNone(this.notice)) {
                setTimeout(() => this.showNotice(params), 250);
                return constVoid;
            }
            const removeNotice = this.addNotice(params);
            if (params.duration === 0) {
                return removeNotice;
            }
            else {
                setTimeout(removeNotice, params.duration);
                return constVoid;
            }
        },
        generateNotice() {
            return h(transition, this.extractedNotice.transition, this.extractedNotice.render);
        }
    },
    render() {
        return h('div', { style: { 'z-index': this.rootZIndex } }, [this.generateNotice()]);
    }
});
export default BNoticeContainer;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQk5vdGljZUNvbnRhaW5lci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL25vdGljZXMvbm90aWNlQ29udGFpbmVyL0JOb3RpY2VDb250YWluZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxTQUFTLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUV6RCxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQVUsSUFBSSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDekUsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBRTFDLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBRW5FLE9BQU8sRUFBRSxlQUFlLEVBQUUsQ0FBQyxFQUFFLFVBQVUsSUFBSSxVQUFVLEVBQUUsTUFBTSxLQUFLLENBQUM7QUFDbkUsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBY3pELE1BQU0sZ0JBQWdCLEdBQUcsZUFBZSxDQUFDO0lBQ3ZDLElBQUksRUFBRSxvQkFBb0I7SUFDMUIsSUFBSSxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7UUFDWCxFQUFFLEVBQUUsQ0FBQztRQUNMLE1BQU0sRUFBRSxJQUFzQjtLQUMvQixDQUFDO0lBQ0YsUUFBUSxFQUFFO1FBQ1IsVUFBVTtZQUNSLE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN0QyxDQUFDO1FBQ0QsZUFBZTtZQUNiLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsU0FBUyxDQUFTLFFBQVEsQ0FBQyxFQUFFLFVBQVUsRUFBRSxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsRUFBRSxNQUFNLEVBQUUsZUFBZSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDbkgsQ0FBQztLQUNGO0lBQ0QsT0FBTyxFQUFFO1FBQ1AsU0FBUyxDQUFDLE9BQXNCO1lBQzlCLE1BQU0sTUFBTSxHQUFHLEVBQUUsTUFBTSxFQUFFLE9BQU8sQ0FBQyxNQUFNLEVBQUUsVUFBVSxFQUFFLGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDO1lBQzVGLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQzNCLE9BQU8sR0FBRyxFQUFFO2dCQUNWLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDO1lBQ3JCLENBQUMsQ0FBQztRQUNKLENBQUM7UUFDRCxVQUFVLENBQUMsTUFBcUI7WUFDOUIsSUFBSSxNQUFNLENBQUMsV0FBVyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRTtnQkFDOUMsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7Z0JBQy9DLE9BQU8sU0FBUyxDQUFDO2FBQ2xCO1lBQ0QsTUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUM1QyxJQUFJLE1BQU0sQ0FBQyxRQUFRLEtBQUssQ0FBQyxFQUFFO2dCQUN6QixPQUFPLFlBQVksQ0FBQzthQUNyQjtpQkFBTTtnQkFDTCxVQUFVLENBQUMsWUFBWSxFQUFFLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQztnQkFDMUMsT0FBTyxTQUFTLENBQUM7YUFDbEI7UUFDSCxDQUFDO1FBQ0QsY0FBYztZQUNaLE9BQU8sQ0FBQyxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsZUFBZSxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3JGLENBQUM7S0FDRjtJQUNELE1BQU07UUFDSixPQUFPLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxLQUFLLEVBQUUsRUFBRSxTQUFTLEVBQUUsSUFBSSxDQUFDLFVBQVUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsY0FBYyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ3RGLENBQUM7Q0FDRixDQUFDLENBQUM7QUFJSCxlQUFlLGdCQUFnQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY29uc3RhbnQsIGNvbnN0Vm9pZCB9IGZyb20gJ2ZwLXRzL2xpYi9mdW5jdGlvbic7XG5pbXBvcnQgeyBJTyB9IGZyb20gJ2ZwLXRzL2xpYi9JTyc7XG5pbXBvcnQgeyBnZXRPckVsc2UsIGlzTm9uZSwgbm9uZSwgT3B0aW9uLCBzb21lIH0gZnJvbSAnZnAtdHMvbGliL09wdGlvbic7XG5pbXBvcnQgeyBwaXBlIH0gZnJvbSAnZnAtdHMvbGliL3BpcGVhYmxlJztcbmltcG9ydCB7IFZOb2RlIH0gZnJvbSAndnVlJztcbmltcG9ydCB7IGZvcm1hdFRyYW5zaXRpb24gfSBmcm9tICcuLi8uLi8uLi9jb21wb3NhYmxlcy90cmFuc2l0aW9uJztcbmltcG9ydCB7IFRyYW5zaXRpb24sIFRyYW5zaXRpb25DbGFzc2VzIH0gZnJvbSAnLi4vLi4vLi4vdHlwZXMvVHJhbnNpdGlvbic7XG5pbXBvcnQgeyBkZWZpbmVDb21wb25lbnQsIGgsIFRyYW5zaXRpb24gYXMgdHJhbnNpdGlvbiB9IGZyb20gJ3Z1ZSc7XG5pbXBvcnQgeyBjb25zdEVtcHR5QXJyYXkgfSBmcm9tICcuLi8uLi8uLi91dGlscy9oZWxwZXJzJztcblxuZXhwb3J0IGludGVyZmFjZSBOb3RpY2VPcHRpb25zIHtcbiAgcmVuZGVyOiBJTzxWTm9kZVtdPjtcbiAgZHVyYXRpb246IG51bWJlcjtcbiAgc2hvdWxkUXVldWU6IGJvb2xlYW47XG4gIHRyYW5zaXRpb246IFRyYW5zaXRpb247XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgTm90aWNlIHtcbiAgcmVuZGVyOiBJTzxWTm9kZVtdPjtcbiAgdHJhbnNpdGlvbjogVHJhbnNpdGlvbkNsYXNzZXM7XG59XG5cbmNvbnN0IEJOb3RpY2VDb250YWluZXIgPSBkZWZpbmVDb21wb25lbnQoe1xuICBuYW1lOiAnYi1ub3RpY2UtY29udGFpbmVyJyxcbiAgZGF0YTogKCkgPT4gKHtcbiAgICBpZDogMCxcbiAgICBub3RpY2U6IG5vbmUgYXMgT3B0aW9uPE5vdGljZT5cbiAgfSksXG4gIGNvbXB1dGVkOiB7XG4gICAgcm9vdFpJbmRleCgpOiAtMSB8IDEge1xuICAgICAgcmV0dXJuIGlzTm9uZSh0aGlzLm5vdGljZSkgPyAtMSA6IDE7XG4gICAgfSxcbiAgICBleHRyYWN0ZWROb3RpY2UoKTogTm90aWNlIHtcbiAgICAgIHJldHVybiBwaXBlKHRoaXMubm90aWNlLCBnZXRPckVsc2U8Tm90aWNlPihjb25zdGFudCh7IHRyYW5zaXRpb246IHsgbmFtZTogJ2ZhZGUnIH0sIHJlbmRlcjogY29uc3RFbXB0eUFycmF5IH0pKSk7XG4gICAgfVxuICB9LFxuICBtZXRob2RzOiB7XG4gICAgYWRkTm90aWNlKG9wdGlvbnM6IE5vdGljZU9wdGlvbnMpOiBJTzx2b2lkPiB7XG4gICAgICBjb25zdCBub3RpY2UgPSB7IHJlbmRlcjogb3B0aW9ucy5yZW5kZXIsIHRyYW5zaXRpb246IGZvcm1hdFRyYW5zaXRpb24ob3B0aW9ucy50cmFuc2l0aW9uKSB9O1xuICAgICAgdGhpcy5ub3RpY2UgPSBzb21lKG5vdGljZSk7XG4gICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICB0aGlzLm5vdGljZSA9IG5vbmU7XG4gICAgICB9O1xuICAgIH0sXG4gICAgc2hvd05vdGljZShwYXJhbXM6IE5vdGljZU9wdGlvbnMpOiBJTzx2b2lkPiB7XG4gICAgICBpZiAocGFyYW1zLnNob3VsZFF1ZXVlICYmICFpc05vbmUodGhpcy5ub3RpY2UpKSB7XG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4gdGhpcy5zaG93Tm90aWNlKHBhcmFtcyksIDI1MCk7XG4gICAgICAgIHJldHVybiBjb25zdFZvaWQ7XG4gICAgICB9XG4gICAgICBjb25zdCByZW1vdmVOb3RpY2UgPSB0aGlzLmFkZE5vdGljZShwYXJhbXMpO1xuICAgICAgaWYgKHBhcmFtcy5kdXJhdGlvbiA9PT0gMCkge1xuICAgICAgICByZXR1cm4gcmVtb3ZlTm90aWNlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2V0VGltZW91dChyZW1vdmVOb3RpY2UsIHBhcmFtcy5kdXJhdGlvbik7XG4gICAgICAgIHJldHVybiBjb25zdFZvaWQ7XG4gICAgICB9XG4gICAgfSxcbiAgICBnZW5lcmF0ZU5vdGljZSgpOiBWTm9kZSB7XG4gICAgICByZXR1cm4gaCh0cmFuc2l0aW9uLCB0aGlzLmV4dHJhY3RlZE5vdGljZS50cmFuc2l0aW9uLCB0aGlzLmV4dHJhY3RlZE5vdGljZS5yZW5kZXIpO1xuICAgIH1cbiAgfSxcbiAgcmVuZGVyKCk6IFZOb2RlIHtcbiAgICByZXR1cm4gaCgnZGl2JywgeyBzdHlsZTogeyAnei1pbmRleCc6IHRoaXMucm9vdFpJbmRleCB9IH0sIFt0aGlzLmdlbmVyYXRlTm90aWNlKCldKTtcbiAgfVxufSk7XG5cbmV4cG9ydCB0eXBlIE5vdGljZUNvbnRhaW5lciA9IEluc3RhbmNlVHlwZTx0eXBlb2YgQk5vdGljZUNvbnRhaW5lcj47XG5cbmV4cG9ydCBkZWZhdWx0IEJOb3RpY2VDb250YWluZXI7XG4iXX0=