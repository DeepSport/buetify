import './steps.sass';
import { getUseModelPropsDefinition, useModel } from '../../composables/model';
import { DefaultThemePropsDefinition, useTheme } from '../../composables/theme';
import { constEmptyArray, isObject } from '../../utils/helpers';
import { head } from 'fp-ts/lib/Array';
import { chain, getOrElse, none, some } from 'fp-ts/lib/Option';
import { pipe } from 'fp-ts/lib/pipeable';
import { Transition, defineComponent, nextTick, onBeforeMount, h, provide, shallowRef, isVNode } from 'vue';
import { STEP_ITEM_NAME, STEPS_SYMBOL } from './shared';
export const BStepsPropsDefinition = {
    ...getUseModelPropsDefinition(),
    ...DefaultThemePropsDefinition,
    variant: {
        type: String,
        default: 'is-link'
    },
    size: {
        type: String,
        default: ''
    },
    isAnimated: {
        type: Boolean,
        default: true
    }
};
function getOnStepItemClick(step, index, model, activeLabel, transition) {
    return () => {
        const val = model.modelValue.value || 0;
        if (val !== index) {
            transition.value = index < val ? 'slide-next' : 'slide-prev';
            nextTick(() => {
                model.set(index);
                activeLabel.value = some(step.props.label);
            });
        }
    };
}
function getGenerateNavItem(props, model, activeLabel, transition) {
    return function generateNavItem(step, index) {
        return h('li', {
            key: step.props.label,
            class: [
                {
                    'is-active': index === model.modelValue.value
                }
            ]
        }, [
            h('a', { onClick: getOnStepItemClick(step, index, model, activeLabel, transition) }, step.props.icon ? [h(step.props.icon), step.props.label] : step.props.label)
        ]);
    };
}
function generateNavItems(props, tabs, model, activeLabel, transition) {
    return h('ul', tabs.map(getGenerateNavItem(props, model, activeLabel, transition)));
}
function generateNavHeaderContent(props, steps, model, activeLabel, transition, themeClasses) {
    return h('nav', {
        class: ['tabs', props.size, ...(props.variant === '' ? themeClasses : [props.variant])]
    }, generateNavItems(props, steps, model, activeLabel, transition));
}
function generateNavHeader(props, steps, model, activeLabel, transition, themeClasses) {
    return generateNavHeaderContent(props, steps, model, activeLabel, transition, themeClasses);
}
function generateStepContent(props, steps, model, transition) {
    return props.isAnimated
        ? h(Transition, { name: transition.value }, () => steps[model.modelValue.value || 0])
        : steps[model.modelValue.value || 0];
}
function isStepItemNode(node) {
    return (isObject(node) &&
        isObject(node.type) &&
        node.type.name === STEP_ITEM_NAME &&
        (node.props['is-visible'] === undefined ||
            node.props['is-visible'] ||
            node.props.isVisible === undefined ||
            node.props.isVisible));
}
function getSteps(slots) {
    return pipe(slots.default ? slots.default() : [], head, chain(fragment => fragment.children && Array.isArray(fragment.children) ? some(fragment.children.filter(isVNode)) : none), getOrElse(constEmptyArray)).filter(isStepItemNode);
}
export default defineComponent({
    name: 'b-steps',
    props: BStepsPropsDefinition,
    setup(props, context) {
        const { themeClasses } = useTheme(props);
        const model = useModel(props);
        const transition = shallowRef('slide-next');
        const injection = {
            activeLabel: shallowRef(none)
        };
        provide(STEPS_SYMBOL, injection);
        onBeforeMount(() => {
            if (model.modelValue.value === undefined) {
                model.set(0);
            }
        });
        return () => {
            const steps = getSteps(context.slots);
            return h('article', { class: 'b-steps' }, [
                generateNavHeader(props, steps, model, injection.activeLabel, transition, themeClasses.value),
                generateStepContent(props, steps, model, transition)
            ]);
        };
    }
});
//# sourceMappingURL=data:application/json;base64,