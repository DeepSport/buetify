import './accordion.sass';
import { defineComponent, h, vShow, withDirectives, Transition } from 'vue';
import { DefaultThemePropsDefinition, useTheme } from '../../composables/theme';
import { getUseTogglePropsDefinition, useToggle } from '../../composables/toggle';
import { FadeTransitionPropsDefinition, useTransition } from '../../composables/transition';
import { getThemeableFunctionalComponent } from '../../utils/getThemeableFunctionalComponent';
import VerticalExpansionIcon from '../icons/verticalExpansion/VerticalExpansionIcon';
function generateTitle(slots) {
    return h('h1', {
        class: 'card-header-title'
    }, slots.title && slots.title());
}
function generateTriggerButton(toggle, slots) {
    return h('button', {
        class: 'card-header-icon',
        ...toggle.listeners,
        ...toggle.attrs.value,
        onClick: (e) => {
            e.stopPropagation();
            toggle.toggle();
        }
    }, slots.trigger
        ? slots.trigger({
            isExpanded: toggle.isOn.value
        })
        : h(VerticalExpansionIcon, { isExpanded: toggle.isOn.value }));
}
function generateHeader(toggle, slots) {
    return h('header', {
        class: 'card-header',
        onClick: toggle.toggle
    }, [generateTitle(slots), generateTriggerButton(toggle, slots)]);
}
export const ACCORDION_CONTENT_THEME_MAP = {
    dark: 'is-black-ter',
    light: ''
};
const BAccordionContent = getThemeableFunctionalComponent({
    cls: 'card-content',
    el: 'section',
    themeMap: ACCORDION_CONTENT_THEME_MAP
});
function generateBody(toggle, transition, slots) {
    return h(Transition, transition.value, () => withDirectives(h(BAccordionContent, {
        'aria-hidden': !toggle.isOn.value
    }, slots.default), [[vShow, toggle.isOn.value]]));
}
export default defineComponent({
    name: 'b-accordion',
    props: {
        ...getUseTogglePropsDefinition('isExpanded'),
        ...FadeTransitionPropsDefinition,
        ...DefaultThemePropsDefinition
    },
    setup(props, { slots }) {
        const toggle = useToggle(props, 'isExpanded');
        const theme = useTheme(props);
        const transition = useTransition(props);
        return () => h('article', { class: ['b-card card', ...theme.themeClasses.value] }, [
            generateHeader(toggle, slots),
            generateBody(toggle, transition, slots)
        ]);
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQkFjY29yZGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL2FjY29yZGlvbi9CQWNjb3JkaW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sa0JBQWtCLENBQUM7QUFDMUIsT0FBTyxFQUFFLGVBQWUsRUFBRSxDQUFDLEVBQWMsS0FBSyxFQUFFLGNBQWMsRUFBRSxVQUFVLEVBQUUsTUFBTSxLQUFLLENBQUM7QUFDeEYsT0FBTyxFQUFFLDJCQUEyQixFQUFFLFFBQVEsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQ2hGLE9BQU8sRUFBRSwyQkFBMkIsRUFBVSxTQUFTLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUMxRixPQUFPLEVBQUUsNkJBQTZCLEVBQUUsYUFBYSxFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFFNUYsT0FBTyxFQUFFLCtCQUErQixFQUFFLE1BQU0sNkNBQTZDLENBQUM7QUFDOUYsT0FBTyxxQkFBcUIsTUFBTSxrREFBa0QsQ0FBQztBQUVyRixTQUFTLGFBQWEsQ0FBQyxLQUFZO0lBQ2pDLE9BQU8sQ0FBQyxDQUNOLElBQUksRUFDSjtRQUNFLEtBQUssRUFBRSxtQkFBbUI7S0FDM0IsRUFDRCxLQUFLLENBQUMsS0FBSyxJQUFJLEtBQUssQ0FBQyxLQUFNLEVBQUUsQ0FDOUIsQ0FBQztBQUNKLENBQUM7QUFFRCxTQUFTLHFCQUFxQixDQUFDLE1BQWMsRUFBRSxLQUFZO0lBQ3pELE9BQU8sQ0FBQyxDQUNOLFFBQVEsRUFDUjtRQUNFLEtBQUssRUFBRSxrQkFBa0I7UUFDekIsR0FBRyxNQUFNLENBQUMsU0FBUztRQUNuQixHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsS0FBSztRQUNyQixPQUFPLEVBQUUsQ0FBQyxDQUFhLEVBQUUsRUFBRTtZQUN6QixDQUFDLENBQUMsZUFBZSxFQUFFLENBQUM7WUFDcEIsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQ2xCLENBQUM7S0FDRixFQUVELEtBQUssQ0FBQyxPQUFPO1FBQ1gsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUM7WUFDWixVQUFVLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLO1NBQzlCLENBQUM7UUFDSixDQUFDLENBQUMsQ0FBQyxDQUFDLHFCQUFxQixFQUFFLEVBQUUsVUFBVSxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FDaEUsQ0FBQztBQUNKLENBQUM7QUFFRCxTQUFTLGNBQWMsQ0FBQyxNQUFjLEVBQUUsS0FBWTtJQUNsRCxPQUFPLENBQUMsQ0FDTixRQUFRLEVBQ1I7UUFDRSxLQUFLLEVBQUUsYUFBYTtRQUNwQixPQUFPLEVBQUUsTUFBTSxDQUFDLE1BQU07S0FDdkIsRUFDRCxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsRUFBRSxxQkFBcUIsQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FDN0QsQ0FBQztBQUNKLENBQUM7QUFFRCxNQUFNLENBQUMsTUFBTSwyQkFBMkIsR0FBRztJQUN6QyxJQUFJLEVBQUUsY0FBYztJQUNwQixLQUFLLEVBQUUsRUFBRTtDQUNWLENBQUM7QUFFRixNQUFNLGlCQUFpQixHQUFHLCtCQUErQixDQUFDO0lBQ3hELEdBQUcsRUFBRSxjQUFjO0lBQ25CLEVBQUUsRUFBRSxTQUFTO0lBQ2IsUUFBUSxFQUFFLDJCQUEyQjtDQUN0QyxDQUFDLENBQUM7QUFFSCxTQUFTLFlBQVksQ0FBQyxNQUFjLEVBQUUsVUFBa0MsRUFBRSxLQUFZO0lBQ3BGLE9BQU8sQ0FBQyxDQUFDLFVBQVUsRUFBRSxVQUFVLENBQUMsS0FBSyxFQUFFLEdBQUcsRUFBRSxDQUMxQyxjQUFjLENBQ1osQ0FBQyxDQUNDLGlCQUFpQixFQUNqQjtRQUNFLGFBQWEsRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSztLQUNsQyxFQUNELEtBQUssQ0FBQyxPQUFPLENBQ2QsRUFDRCxDQUFDLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FDN0IsQ0FDRixDQUFDO0FBQ0osQ0FBQztBQUVELGVBQWUsZUFBZSxDQUFDO0lBQzdCLElBQUksRUFBRSxhQUFhO0lBQ25CLEtBQUssRUFBRTtRQUNMLEdBQUcsMkJBQTJCLENBQUMsWUFBWSxDQUFDO1FBQzVDLEdBQUcsNkJBQTZCO1FBQ2hDLEdBQUcsMkJBQTJCO0tBQy9CO0lBQ0QsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLEtBQUssRUFBRTtRQUNwQixNQUFNLE1BQU0sR0FBRyxTQUFTLENBQUMsS0FBSyxFQUFFLFlBQVksQ0FBQyxDQUFDO1FBQzlDLE1BQU0sS0FBSyxHQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUM5QixNQUFNLFVBQVUsR0FBRyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDeEMsT0FBTyxHQUFHLEVBQUUsQ0FDVixDQUFDLENBQUMsU0FBUyxFQUFFLEVBQUUsS0FBSyxFQUFFLENBQUMsYUFBYSxFQUFFLEdBQUcsS0FBSyxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsRUFBRSxFQUFFO1lBQ3BFLGNBQWMsQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDO1lBQzdCLFlBQVksQ0FBQyxNQUFNLEVBQUUsVUFBVSxFQUFFLEtBQUssQ0FBQztTQUN4QyxDQUFDLENBQUM7SUFDUCxDQUFDO0NBQ0YsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICcuL2FjY29yZGlvbi5zYXNzJztcbmltcG9ydCB7IGRlZmluZUNvbXBvbmVudCwgaCwgU2xvdHMsIFJlZiwgdlNob3csIHdpdGhEaXJlY3RpdmVzLCBUcmFuc2l0aW9uIH0gZnJvbSAndnVlJztcbmltcG9ydCB7IERlZmF1bHRUaGVtZVByb3BzRGVmaW5pdGlvbiwgdXNlVGhlbWUgfSBmcm9tICcuLi8uLi9jb21wb3NhYmxlcy90aGVtZSc7XG5pbXBvcnQgeyBnZXRVc2VUb2dnbGVQcm9wc0RlZmluaXRpb24sIFRvZ2dsZSwgdXNlVG9nZ2xlIH0gZnJvbSAnLi4vLi4vY29tcG9zYWJsZXMvdG9nZ2xlJztcbmltcG9ydCB7IEZhZGVUcmFuc2l0aW9uUHJvcHNEZWZpbml0aW9uLCB1c2VUcmFuc2l0aW9uIH0gZnJvbSAnLi4vLi4vY29tcG9zYWJsZXMvdHJhbnNpdGlvbic7XG5pbXBvcnQgeyBUcmFuc2l0aW9uQ2xhc3NlcyB9IGZyb20gJy4uLy4uL3R5cGVzL1RyYW5zaXRpb24nO1xuaW1wb3J0IHsgZ2V0VGhlbWVhYmxlRnVuY3Rpb25hbENvbXBvbmVudCB9IGZyb20gJy4uLy4uL3V0aWxzL2dldFRoZW1lYWJsZUZ1bmN0aW9uYWxDb21wb25lbnQnO1xuaW1wb3J0IFZlcnRpY2FsRXhwYW5zaW9uSWNvbiBmcm9tICcuLi9pY29ucy92ZXJ0aWNhbEV4cGFuc2lvbi9WZXJ0aWNhbEV4cGFuc2lvbkljb24nO1xuXG5mdW5jdGlvbiBnZW5lcmF0ZVRpdGxlKHNsb3RzOiBTbG90cykge1xuICByZXR1cm4gaChcbiAgICAnaDEnLFxuICAgIHtcbiAgICAgIGNsYXNzOiAnY2FyZC1oZWFkZXItdGl0bGUnXG4gICAgfSxcbiAgICBzbG90cy50aXRsZSAmJiBzbG90cy50aXRsZSEoKVxuICApO1xufVxuXG5mdW5jdGlvbiBnZW5lcmF0ZVRyaWdnZXJCdXR0b24odG9nZ2xlOiBUb2dnbGUsIHNsb3RzOiBTbG90cykge1xuICByZXR1cm4gaChcbiAgICAnYnV0dG9uJyxcbiAgICB7XG4gICAgICBjbGFzczogJ2NhcmQtaGVhZGVyLWljb24nLFxuICAgICAgLi4udG9nZ2xlLmxpc3RlbmVycyxcbiAgICAgIC4uLnRvZ2dsZS5hdHRycy52YWx1ZSxcbiAgICAgIG9uQ2xpY2s6IChlOiBNb3VzZUV2ZW50KSA9PiB7XG4gICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIHRvZ2dsZS50b2dnbGUoKTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgc2xvdHMudHJpZ2dlclxuICAgICAgPyBzbG90cy50cmlnZ2VyKHtcbiAgICAgICAgICBpc0V4cGFuZGVkOiB0b2dnbGUuaXNPbi52YWx1ZVxuICAgICAgICB9KVxuICAgICAgOiBoKFZlcnRpY2FsRXhwYW5zaW9uSWNvbiwgeyBpc0V4cGFuZGVkOiB0b2dnbGUuaXNPbi52YWx1ZSB9KVxuICApO1xufVxuXG5mdW5jdGlvbiBnZW5lcmF0ZUhlYWRlcih0b2dnbGU6IFRvZ2dsZSwgc2xvdHM6IFNsb3RzKSB7XG4gIHJldHVybiBoKFxuICAgICdoZWFkZXInLFxuICAgIHtcbiAgICAgIGNsYXNzOiAnY2FyZC1oZWFkZXInLFxuICAgICAgb25DbGljazogdG9nZ2xlLnRvZ2dsZVxuICAgIH0sXG4gICAgW2dlbmVyYXRlVGl0bGUoc2xvdHMpLCBnZW5lcmF0ZVRyaWdnZXJCdXR0b24odG9nZ2xlLCBzbG90cyldXG4gICk7XG59XG5cbmV4cG9ydCBjb25zdCBBQ0NPUkRJT05fQ09OVEVOVF9USEVNRV9NQVAgPSB7XG4gIGRhcms6ICdpcy1ibGFjay10ZXInLCAvLydpcy1ncmV5LWRhcmsnLFxuICBsaWdodDogJydcbn07XG5cbmNvbnN0IEJBY2NvcmRpb25Db250ZW50ID0gZ2V0VGhlbWVhYmxlRnVuY3Rpb25hbENvbXBvbmVudCh7XG4gIGNsczogJ2NhcmQtY29udGVudCcsXG4gIGVsOiAnc2VjdGlvbicsXG4gIHRoZW1lTWFwOiBBQ0NPUkRJT05fQ09OVEVOVF9USEVNRV9NQVBcbn0pO1xuXG5mdW5jdGlvbiBnZW5lcmF0ZUJvZHkodG9nZ2xlOiBUb2dnbGUsIHRyYW5zaXRpb246IFJlZjxUcmFuc2l0aW9uQ2xhc3Nlcz4sIHNsb3RzOiBTbG90cykge1xuICByZXR1cm4gaChUcmFuc2l0aW9uLCB0cmFuc2l0aW9uLnZhbHVlLCAoKSA9PlxuICAgIHdpdGhEaXJlY3RpdmVzKFxuICAgICAgaChcbiAgICAgICAgQkFjY29yZGlvbkNvbnRlbnQsXG4gICAgICAgIHtcbiAgICAgICAgICAnYXJpYS1oaWRkZW4nOiAhdG9nZ2xlLmlzT24udmFsdWVcbiAgICAgICAgfSxcbiAgICAgICAgc2xvdHMuZGVmYXVsdFxuICAgICAgKSxcbiAgICAgIFtbdlNob3csIHRvZ2dsZS5pc09uLnZhbHVlXV1cbiAgICApXG4gICk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGRlZmluZUNvbXBvbmVudCh7XG4gIG5hbWU6ICdiLWFjY29yZGlvbicsXG4gIHByb3BzOiB7XG4gICAgLi4uZ2V0VXNlVG9nZ2xlUHJvcHNEZWZpbml0aW9uKCdpc0V4cGFuZGVkJyksXG4gICAgLi4uRmFkZVRyYW5zaXRpb25Qcm9wc0RlZmluaXRpb24sXG4gICAgLi4uRGVmYXVsdFRoZW1lUHJvcHNEZWZpbml0aW9uXG4gIH0sXG4gIHNldHVwKHByb3BzLCB7IHNsb3RzIH0pIHtcbiAgICBjb25zdCB0b2dnbGUgPSB1c2VUb2dnbGUocHJvcHMsICdpc0V4cGFuZGVkJyk7XG4gICAgY29uc3QgdGhlbWUgPSB1c2VUaGVtZShwcm9wcyk7XG4gICAgY29uc3QgdHJhbnNpdGlvbiA9IHVzZVRyYW5zaXRpb24ocHJvcHMpO1xuICAgIHJldHVybiAoKSA9PlxuICAgICAgaCgnYXJ0aWNsZScsIHsgY2xhc3M6IFsnYi1jYXJkIGNhcmQnLCAuLi50aGVtZS50aGVtZUNsYXNzZXMudmFsdWVdIH0sIFtcbiAgICAgICAgZ2VuZXJhdGVIZWFkZXIodG9nZ2xlLCBzbG90cyksXG4gICAgICAgIGdlbmVyYXRlQm9keSh0b2dnbGUsIHRyYW5zaXRpb24sIHNsb3RzKVxuICAgICAgXSk7XG4gIH1cbn0pO1xuIl19