import './dialog.sass';
import { head } from 'fp-ts/lib/Array';
import { pipe } from 'fp-ts/lib/function';
import { exists } from 'fp-ts/lib/Option';
import { usePopupController, UsePopupControllerPropsDefinition } from '../../composables/popupController';
import { constEmptyArray, isObject } from '../../utils/helpers';
import BOverlay from '../overlay/BOverlay';
import BDialogContent, { B_DIALOG_CONTENT_NAME } from './BDialogContent';
import { defineComponent, shallowRef, h } from 'vue';
function containsBDialogContent(node) {
    const components = (isObject(node) && node?.type?.components) || {};
    for (const k in components) {
        if (components[k]?.name === B_DIALOG_CONTENT_NAME) {
            return true;
        }
    }
    return false;
}
export default defineComponent({
    name: 'b-dialog',
    props: UsePopupControllerPropsDefinition,
    setup(props, { attrs, slots }) {
        const generateDialog = shallowRef(constEmptyArray);
        const popup = usePopupController(props, generateDialog);
        generateDialog.value = () => {
            return [
                h(BOverlay, {
                    ...attrs,
                    class: 'dialog',
                    isActive: true,
                    onClick: popup.close
                }, () => {
                    const nodes = slots.default ? slots.default(popup) : [];
                    const isDialogContent = pipe(head(nodes), exists(containsBDialogContent));
                    return isDialogContent
                        ? nodes
                        : h(BDialogContent, {
                            asCard: false
                        }, {
                            header: () => slots.header && slots.header(popup),
                            default: () => nodes,
                            footer: () => slots.footer && slots.footer(popup)
                        });
                })
            ];
        };
        return () => slots.trigger && slots.trigger(popup);
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQkRpYWxvZy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL2RpYWxvZy9CRGlhbG9nLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUN2QyxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFFMUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQzFDLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxpQ0FBaUMsRUFBRSxNQUFNLG1DQUFtQyxDQUFDO0FBQzFHLE9BQU8sRUFBRSxlQUFlLEVBQUUsUUFBUSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDaEUsT0FBTyxRQUFRLE1BQU0scUJBQXFCLENBQUM7QUFDM0MsT0FBTyxjQUFjLEVBQUUsRUFBRSxxQkFBcUIsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQ3pFLE9BQU8sRUFBRSxlQUFlLEVBQVMsVUFBVSxFQUFFLENBQUMsRUFBRSxNQUFNLEtBQUssQ0FBQztBQUU1RCxTQUFTLHNCQUFzQixDQUFDLElBQVM7SUFDdkMsTUFBTSxVQUFVLEdBQUcsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUssSUFBWSxFQUFFLElBQUksRUFBRSxVQUFVLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDN0UsS0FBSyxNQUFNLENBQUMsSUFBSSxVQUFVLEVBQUU7UUFDMUIsSUFBSSxVQUFVLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxLQUFLLHFCQUFxQixFQUFFO1lBQ2pELE9BQU8sSUFBSSxDQUFDO1NBQ2I7S0FDRjtJQUNELE9BQU8sS0FBSyxDQUFDO0FBQ2YsQ0FBQztBQUVELGVBQWUsZUFBZSxDQUFDO0lBQzdCLElBQUksRUFBRSxVQUFVO0lBQ2hCLEtBQUssRUFBRSxpQ0FBaUM7SUFDeEMsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUU7UUFDM0IsTUFBTSxjQUFjLEdBQUcsVUFBVSxDQUFDLGVBQThCLENBQUMsQ0FBQztRQUNsRSxNQUFNLEtBQUssR0FBRyxrQkFBa0IsQ0FBQyxLQUFLLEVBQUUsY0FBYyxDQUFDLENBQUM7UUFDeEQsY0FBYyxDQUFDLEtBQUssR0FBRyxHQUFHLEVBQUU7WUFDMUIsT0FBTztnQkFDTCxDQUFDLENBQ0MsUUFBUSxFQUNSO29CQUNFLEdBQUcsS0FBSztvQkFDUixLQUFLLEVBQUUsUUFBUTtvQkFDZixRQUFRLEVBQUUsSUFBSTtvQkFDZCxPQUFPLEVBQUUsS0FBSyxDQUFDLEtBQUs7aUJBQ3JCLEVBQ0QsR0FBRyxFQUFFO29CQUNILE1BQU0sS0FBSyxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztvQkFDeEQsTUFBTSxlQUFlLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxNQUFNLENBQUMsc0JBQXNCLENBQUMsQ0FBQyxDQUFDO29CQUMxRSxPQUFPLGVBQWU7d0JBQ3BCLENBQUMsQ0FBQyxLQUFLO3dCQUNQLENBQUMsQ0FBQyxDQUFDLENBQ0MsY0FBYyxFQUNkOzRCQUNFLE1BQU0sRUFBRSxLQUFLO3lCQUNkLEVBQ0Q7NEJBQ0UsTUFBTSxFQUFFLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxNQUFNLElBQUksS0FBSyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUM7NEJBQ2pELE9BQU8sRUFBRSxHQUFHLEVBQUUsQ0FBQyxLQUFLOzRCQUNwQixNQUFNLEVBQUUsR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDLE1BQU0sSUFBSSxLQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQzt5QkFDbEQsQ0FDRixDQUFDO2dCQUNSLENBQUMsQ0FDRjthQUNGLENBQUM7UUFDSixDQUFDLENBQUM7UUFDRixPQUFPLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxPQUFPLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyRCxDQUFDO0NBQ0YsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICcuL2RpYWxvZy5zYXNzJztcbmltcG9ydCB7IGhlYWQgfSBmcm9tICdmcC10cy9saWIvQXJyYXknO1xuaW1wb3J0IHsgcGlwZSB9IGZyb20gJ2ZwLXRzL2xpYi9mdW5jdGlvbic7XG5pbXBvcnQgeyBJTyB9IGZyb20gJ2ZwLXRzL2xpYi9JTyc7XG5pbXBvcnQgeyBleGlzdHMgfSBmcm9tICdmcC10cy9saWIvT3B0aW9uJztcbmltcG9ydCB7IHVzZVBvcHVwQ29udHJvbGxlciwgVXNlUG9wdXBDb250cm9sbGVyUHJvcHNEZWZpbml0aW9uIH0gZnJvbSAnLi4vLi4vY29tcG9zYWJsZXMvcG9wdXBDb250cm9sbGVyJztcbmltcG9ydCB7IGNvbnN0RW1wdHlBcnJheSwgaXNPYmplY3QgfSBmcm9tICcuLi8uLi91dGlscy9oZWxwZXJzJztcbmltcG9ydCBCT3ZlcmxheSBmcm9tICcuLi9vdmVybGF5L0JPdmVybGF5JztcbmltcG9ydCBCRGlhbG9nQ29udGVudCwgeyBCX0RJQUxPR19DT05URU5UX05BTUUgfSBmcm9tICcuL0JEaWFsb2dDb250ZW50JztcbmltcG9ydCB7IGRlZmluZUNvbXBvbmVudCwgVk5vZGUsIHNoYWxsb3dSZWYsIGggfSBmcm9tICd2dWUnO1xuXG5mdW5jdGlvbiBjb250YWluc0JEaWFsb2dDb250ZW50KG5vZGU6IGFueSkge1xuICBjb25zdCBjb21wb25lbnRzID0gKGlzT2JqZWN0KG5vZGUpICYmIChub2RlIGFzIGFueSk/LnR5cGU/LmNvbXBvbmVudHMpIHx8IHt9O1xuICBmb3IgKGNvbnN0IGsgaW4gY29tcG9uZW50cykge1xuICAgIGlmIChjb21wb25lbnRzW2tdPy5uYW1lID09PSBCX0RJQUxPR19DT05URU5UX05BTUUpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGRlZmluZUNvbXBvbmVudCh7XG4gIG5hbWU6ICdiLWRpYWxvZycsXG4gIHByb3BzOiBVc2VQb3B1cENvbnRyb2xsZXJQcm9wc0RlZmluaXRpb24sXG4gIHNldHVwKHByb3BzLCB7IGF0dHJzLCBzbG90cyB9KSB7XG4gICAgY29uc3QgZ2VuZXJhdGVEaWFsb2cgPSBzaGFsbG93UmVmKGNvbnN0RW1wdHlBcnJheSBhcyBJTzxWTm9kZVtdPik7XG4gICAgY29uc3QgcG9wdXAgPSB1c2VQb3B1cENvbnRyb2xsZXIocHJvcHMsIGdlbmVyYXRlRGlhbG9nKTtcbiAgICBnZW5lcmF0ZURpYWxvZy52YWx1ZSA9ICgpID0+IHtcbiAgICAgIHJldHVybiBbXG4gICAgICAgIGgoXG4gICAgICAgICAgQk92ZXJsYXksXG4gICAgICAgICAge1xuICAgICAgICAgICAgLi4uYXR0cnMsXG4gICAgICAgICAgICBjbGFzczogJ2RpYWxvZycsXG4gICAgICAgICAgICBpc0FjdGl2ZTogdHJ1ZSxcbiAgICAgICAgICAgIG9uQ2xpY2s6IHBvcHVwLmNsb3NlXG4gICAgICAgICAgfSxcbiAgICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBub2RlcyA9IHNsb3RzLmRlZmF1bHQgPyBzbG90cy5kZWZhdWx0KHBvcHVwKSA6IFtdO1xuICAgICAgICAgICAgY29uc3QgaXNEaWFsb2dDb250ZW50ID0gcGlwZShoZWFkKG5vZGVzKSwgZXhpc3RzKGNvbnRhaW5zQkRpYWxvZ0NvbnRlbnQpKTtcbiAgICAgICAgICAgIHJldHVybiBpc0RpYWxvZ0NvbnRlbnRcbiAgICAgICAgICAgICAgPyBub2Rlc1xuICAgICAgICAgICAgICA6IGgoXG4gICAgICAgICAgICAgICAgICBCRGlhbG9nQ29udGVudCxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgYXNDYXJkOiBmYWxzZVxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaGVhZGVyOiAoKSA9PiBzbG90cy5oZWFkZXIgJiYgc2xvdHMuaGVhZGVyKHBvcHVwKSxcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDogKCkgPT4gbm9kZXMsXG4gICAgICAgICAgICAgICAgICAgIGZvb3RlcjogKCkgPT4gc2xvdHMuZm9vdGVyICYmIHNsb3RzLmZvb3Rlcihwb3B1cClcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgKVxuICAgICAgXTtcbiAgICB9O1xuICAgIHJldHVybiAoKSA9PiBzbG90cy50cmlnZ2VyICYmIHNsb3RzLnRyaWdnZXIocG9wdXApO1xuICB9XG59KTtcbiJdfQ==