import '../sass/tools.sass';
import { constant } from 'fp-ts/lib/function';
import { provideFieldData, ProvideFieldDataPropsDefinition } from '../../../composables/fieldData';
import { DefaultThemePropsDefinition } from '../../../composables/theme';
import { withDirectives, h, defineComponent, computed, shallowRef, watch, vShow } from 'vue';
import { mergeClasses } from '../../../utils/mergeClasses';
function getFieldClasses(props) {
    return computed(() => {
        const isGrouped = props.isGrouped;
        const position = props.position;
        return {
            'flex-grow-1': props.isExpanded,
            'is-grouped-multiline': props.isGroupedMultiline,
            'is-horizontal': props.isHorizontal,
            'is-grouped-centered': isGrouped && position === 'is-centered',
            'is-grouped-right': isGrouped && position === 'is-right',
            'has-addons-centered': !isGrouped && position === 'is-centered',
            'has-addons-right': !isGrouped && position === 'is-right'
        };
    });
}
export const BFieldPropsDefinition = {
    ...DefaultThemePropsDefinition,
    ...ProvideFieldDataPropsDefinition,
    isGrouped: {
        type: Boolean,
        default: false
    },
    isGroupedMultiline: {
        type: Boolean,
        default: false
    },
    position: {
        type: String,
        default: 'is-left'
    },
    isHorizontal: {
        type: Boolean,
        default: false
    },
    hasAddons: {
        type: Boolean,
        default: true
    },
    customLabelClass: {
        type: String,
        default: ''
    }
};
function generateInnerLabel(fieldData, customClass) {
    return h('label', {
        class: ['label', customClass],
        id: fieldData.labelId.value,
        for: fieldData.id.value
    }, fieldData.label.value);
}
function generateHorizontalLabel(fieldData, customClass, size) {
    return h('div', { class: ['field-label', size] }, [generateInnerLabel(fieldData, customClass)]);
}
function generateLabel(isHorizontal, fieldData, customClass, size) {
    const label = fieldData.label.value;
    if (isHorizontal && !!label) {
        return [generateHorizontalLabel(fieldData, customClass, size)];
    }
    else if (!isHorizontal && !!label) {
        return [generateInnerLabel(fieldData, customClass)];
    }
    else {
        return [];
    }
}
function generateHelpMessage(isHorizontal, fieldDataAttrs) {
    const showHelpMessage = !isHorizontal && !!fieldDataAttrs.message.value;
    return withDirectives(h('p', {
        class: ['help', fieldDataAttrs.messageVariant.value],
        'aria-hidden': showHelpMessage,
        innerHTML: fieldDataAttrs.message.value
    }), [[vShow, showHelpMessage]]);
}
function generateBody(isHorizontal, fieldData, role, slots) {
    if (isHorizontal) {
        return [
            h(BFieldBody, // eslint-disable-line
            {
                class: { 'is-expanded': fieldData.isExpanded.value },
                message: fieldData.message.value,
                variant: fieldData.messageVariant.value,
                role
            }, slots.default)
        ];
    }
    else {
        return slots.default ? slots.default() : [];
    }
}
function getFieldType(isGrouped, hasAddons, isHorizontal, slots) {
    return isGrouped
        ? 'is-grouped'
        : hasAddons && !isHorizontal && slots.default && slots.default().filter(n => !!n.el).length > 1
            ? 'has-addons'
            : '';
}
const BField = defineComponent({
    name: 'b-field',
    props: BFieldPropsDefinition,
    setup(props, { slots }) {
        const field = shallowRef(null);
        const fieldData = provideFieldData(props);
        const classes = getFieldClasses(props);
        const role = computed(() => (props.isGrouped ? 'group' : ''));
        const size = shallowRef('');
        watch(field, newVal => {
            if (props.isHorizontal && newVal) {
                // Bulma docs: .is-normal for any .input or .button
                const elements = newVal.querySelectorAll('.input, .select, .button, .textarea');
                if (elements.length > 0) {
                    size.value = 'is-normal';
                }
            }
        });
        return () => {
            return h('div', {
                ref: field,
                class: ['field', classes.value, getFieldType(props.isGrouped, props.hasAddons, props.isHorizontal, slots)],
                role: role.value
            }, [
                generateLabel(props.isHorizontal, fieldData.attrs, props.customLabelClass, size.value),
                ...generateBody(props.isHorizontal, fieldData.attrs, role.value, slots),
                generateHelpMessage(props.isHorizontal, fieldData.attrs)
            ]);
        };
    }
});
// eslint-disable-next-line
function BFieldBody(props, { attrs, slots }) {
    const nodes = slots.default ? slots.default() : [];
    return h(props.tag ?? 'div', {
        class: mergeClasses(attrs.class, 'field-body')
    }, nodes.map((element) => (element.el ? element : h(BField, props, constant(element)))));
}
export default BField;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQkZpZWxkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvZm9ybS9maWVsZC9CRmllbGQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxvQkFBb0IsQ0FBQztBQUM1QixPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDOUMsT0FBTyxFQUFrQixnQkFBZ0IsRUFBRSwrQkFBK0IsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBQ25ILE9BQU8sRUFBRSwyQkFBMkIsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBQ3pFLE9BQU8sRUFDTCxjQUFjLEVBQ2QsQ0FBQyxFQUdELGVBQWUsRUFFZixRQUFRLEVBRVIsVUFBVSxFQUNWLEtBQUssRUFFTCxLQUFLLEVBRU4sTUFBTSxLQUFLLENBQUM7QUFFYixPQUFPLEVBQVcsWUFBWSxFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFJcEUsU0FBUyxlQUFlLENBQUMsS0FBa0I7SUFDekMsT0FBTyxRQUFRLENBQUMsR0FBRyxFQUFFO1FBQ25CLE1BQU0sU0FBUyxHQUFHLEtBQUssQ0FBQyxTQUFTLENBQUM7UUFDbEMsTUFBTSxRQUFRLEdBQUcsS0FBSyxDQUFDLFFBQVEsQ0FBQztRQUNoQyxPQUFPO1lBQ0wsYUFBYSxFQUFFLEtBQUssQ0FBQyxVQUFVO1lBQy9CLHNCQUFzQixFQUFFLEtBQUssQ0FBQyxrQkFBa0I7WUFDaEQsZUFBZSxFQUFFLEtBQUssQ0FBQyxZQUFZO1lBQ25DLHFCQUFxQixFQUFFLFNBQVMsSUFBSSxRQUFRLEtBQUssYUFBYTtZQUM5RCxrQkFBa0IsRUFBRSxTQUFTLElBQUksUUFBUSxLQUFLLFVBQVU7WUFDeEQscUJBQXFCLEVBQUUsQ0FBQyxTQUFTLElBQUksUUFBUSxLQUFLLGFBQWE7WUFDL0Qsa0JBQWtCLEVBQUUsQ0FBQyxTQUFTLElBQUksUUFBUSxLQUFLLFVBQVU7U0FDMUQsQ0FBQztJQUNKLENBQUMsQ0FBQyxD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QUMsQ0FBQztJQUNKLENBQUM7Q0FDRixDQUFDLENBQUM7QUFRSCwyQkFBMkI7QUFDM0IsU0FBUyxVQUFVLENBQUMsS0FBc0IsRUFBRSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQWdCO0lBQ3hFLE1BQU0sS0FBSyxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0lBQ25ELE9BQU8sQ0FBQyxDQUNOLEtBQUssQ0FBQyxHQUFHLElBQUksS0FBSyxFQUNsQjtRQUNFLEtBQUssRUFBRSxZQUFZLENBQUMsS0FBSyxDQUFDLEtBQWdCLEVBQUUsWUFBWSxDQUFDO0tBQzFELEVBQ0QsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQWMsRUFBRSxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLEVBQUUsS0FBSyxFQUFFLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FDNUYsQ0FBQztBQUNKLENBQUM7QUFFRCxlQUFlLE1BQU0sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAnLi4vc2Fzcy90b29scy5zYXNzJztcbmltcG9ydCB7IGNvbnN0YW50IH0gZnJvbSAnZnAtdHMvbGliL2Z1bmN0aW9uJztcbmltcG9ydCB7IEZpZWxkRGF0YUF0dHJzLCBwcm92aWRlRmllbGREYXRhLCBQcm92aWRlRmllbGREYXRhUHJvcHNEZWZpbml0aW9uIH0gZnJvbSAnLi4vLi4vLi4vY29tcG9zYWJsZXMvZmllbGREYXRhJztcbmltcG9ydCB7IERlZmF1bHRUaGVtZVByb3BzRGVmaW5pdGlvbiB9IGZyb20gJy4uLy4uLy4uL2NvbXBvc2FibGVzL3RoZW1lJztcbmltcG9ydCB7XG4gIHdpdGhEaXJlY3RpdmVzLFxuICBoLFxuICBQcm9wVHlwZSxcbiAgVk5vZGUsXG4gIGRlZmluZUNvbXBvbmVudCxcbiAgUmVmLFxuICBjb21wdXRlZCxcbiAgRXh0cmFjdFByb3BUeXBlcyxcbiAgc2hhbGxvd1JlZixcbiAgd2F0Y2gsXG4gIFNsb3RzLFxuICB2U2hvdyxcbiAgU2V0dXBDb250ZXh0XG59IGZyb20gJ3Z1ZSc7XG5pbXBvcnQgeyBBbGxDb2xvcnNWYXJpYW50IH0gZnJvbSAnLi4vLi4vLi4vdHlwZXMvQ29sb3JWYXJpYW50cyc7XG5pbXBvcnQgeyBDbGFzc2VzLCBtZXJnZUNsYXNzZXMgfSBmcm9tICcuLi8uLi8uLi91dGlscy9tZXJnZUNsYXNzZXMnO1xuXG5leHBvcnQgdHlwZSBGaWVsZFBvc2l0aW9uID0gJ2lzLWxlZnQnIHwgJ2lzLWNlbnRlcmVkJyB8ICdpcy1yaWdodCc7XG5cbmZ1bmN0aW9uIGdldEZpZWxkQ2xhc3Nlcyhwcm9wczogQkZpZWxkUHJvcHMpOiBSZWY8Q2xhc3Nlcz4ge1xuICByZXR1cm4gY29tcHV0ZWQoKCkgPT4ge1xuICAgIGNvbnN0IGlzR3JvdXBlZCA9IHByb3BzLmlzR3JvdXBlZDtcbiAgICBjb25zdCBwb3NpdGlvbiA9IHByb3BzLnBvc2l0aW9uO1xuICAgIHJldHVybiB7XG4gICAgICAnZmxleC1ncm93LTEnOiBwcm9wcy5pc0V4cGFuZGVkLFxuICAgICAgJ2lzLWdyb3VwZWQtbXVsdGlsaW5lJzogcHJvcHMuaXNHcm91cGVkTXVsdGlsaW5lLFxuICAgICAgJ2lzLWhvcml6b250YWwnOiBwcm9wcy5pc0hvcml6b250YWwsXG4gICAgICAnaXMtZ3JvdXBlZC1jZW50ZXJlZCc6IGlzR3JvdXBlZCAmJiBwb3NpdGlvbiA9PT0gJ2lzLWNlbnRlcmVkJyxcbiAgICAgICdpcy1ncm91cGVkLXJpZ2h0JzogaXNHcm91cGVkICYmIHBvc2l0aW9uID09PSAnaXMtcmlnaHQnLFxuICAgICAgJ2hhcy1hZGRvbnMtY2VudGVyZWQnOiAhaXNHcm91cGVkICYmIHBvc2l0aW9uID09PSAnaXMtY2VudGVyZWQnLFxuICAgICAgJ2hhcy1hZGRvbnMtcmlnaHQnOiAhaXNHcm91cGVkICYmIHBvc2l0aW9uID09PSAnaXMtcmlnaHQnXG4gICAgfTtcbiAgfSk7XG59XG5cbmV4cG9ydCBjb25zdCBCRmllbGRQcm9wc0RlZmluaXRpb24gPSB7XG4gIC4uLkRlZmF1bHRUaGVtZVByb3BzRGVmaW5pdGlvbixcbiAgLi4uUHJvdmlkZUZpZWxkRGF0YVByb3BzRGVmaW5pdGlvbixcbiAgaXNHcm91cGVkOiB7XG4gICAgdHlwZTogQm9vbGVhbiBhcyBQcm9wVHlwZTxib29sZWFuPixcbiAgICBkZWZhdWx0OiBmYWxzZVxuICB9LFxuICBpc0dyb3VwZWRNdWx0aWxpbmU6IHtcbiAgICB0eXBlOiBCb29sZWFuIGFzIFByb3BUeXBlPGJvb2xlYW4+LFxuICAgIGRlZmF1bHQ6IGZhbHNlXG4gIH0sXG4gIHBvc2l0aW9uOiB7XG4gICAgdHlwZTogU3RyaW5nIGFzIFByb3BUeXBlPEZpZWxkUG9zaXRpb24+LFxuICAgIGRlZmF1bHQ6ICdpcy1sZWZ0J1xuICB9LFxuICBpc0hvcml6b250YWw6IHtcbiAgICB0eXBlOiBCb29sZWFuIGFzIFByb3BUeXBlPGJvb2xlYW4+LFxuICAgIGRlZmF1bHQ6IGZhbHNlXG4gIH0sXG4gIGhhc0FkZG9uczoge1xuICAgIHR5cGU6IEJvb2xlYW4gYXMgUHJvcFR5cGU8Ym9vbGVhbj4sXG4gICAgZGVmYXVsdDogdHJ1ZVxuICB9LFxuICBjdXN0b21MYWJlbENsYXNzOiB7XG4gICAgdHlwZTogU3RyaW5nIGFzIFByb3BUeXBlPHN0cmluZz4sXG4gICAgZGVmYXVsdDogJydcbiAgfVxufTtcblxuZXhwb3J0IHR5cGUgQkZpZWxkUHJvcHMgPSBFeHRyYWN0UHJvcFR5cGVzPHR5cGVvZiBCRmllbGRQcm9wc0RlZmluaXRpb24+O1xuXG5mdW5jdGlvbiBnZW5lcmF0ZUlubmVyTGFiZWwoZmllbGREYXRhOiBGaWVsZERhdGFBdHRycywgY3VzdG9tQ2xhc3M6IHN0cmluZyk6IFZOb2RlIHtcbiAgcmV0dXJuIGgoXG4gICAgJ2xhYmVsJyxcbiAgICB7XG4gICAgICBjbGFzczogWydsYWJlbCcsIGN1c3RvbUNsYXNzXSxcbiAgICAgIGlkOiBmaWVsZERhdGEubGFiZWxJZC52YWx1ZSxcbiAgICAgIGZvcjogZmllbGREYXRhLmlkLnZhbHVlXG4gICAgfSxcbiAgICBmaWVsZERhdGEubGFiZWwudmFsdWVcbiAgKTtcbn1cblxuZnVuY3Rpb24gZ2VuZXJhdGVIb3Jpem9udGFsTGFiZWwoZmllbGREYXRhOiBGaWVsZERhdGFBdHRycywgY3VzdG9tQ2xhc3M6IHN0cmluZywgc2l6ZTogc3RyaW5nKTogVk5vZGUge1xuICByZXR1cm4gaCgnZGl2JywgeyBjbGFzczogWydmaWVsZC1sYWJlbCcsIHNpemVdIH0sIFtnZW5lcmF0ZUlubmVyTGFiZWwoZmllbGREYXRhLCBjdXN0b21DbGFzcyldKTtcbn1cblxuZnVuY3Rpb24gZ2VuZXJhdGVMYWJlbChpc0hvcml6b250YWw6IGJvb2xlYW4sIGZpZWxkRGF0YTogRmllbGREYXRhQXR0cnMsIGN1c3RvbUNsYXNzOiBzdHJpbmcsIHNpemU6IHN0cmluZyk6IFZOb2RlW10ge1xuICBjb25zdCBsYWJlbCA9IGZpZWxkRGF0YS5sYWJlbC52YWx1ZTtcbiAgaWYgKGlzSG9yaXpvbnRhbCAmJiAhIWxhYmVsKSB7XG4gICAgcmV0dXJuIFtnZW5lcmF0ZUhvcml6b250YWxMYWJlbChmaWVsZERhdGEsIGN1c3RvbUNsYXNzLCBzaXplKV07XG4gIH0gZWxzZSBpZiAoIWlzSG9yaXpvbnRhbCAmJiAhIWxhYmVsKSB7XG4gICAgcmV0dXJuIFtnZW5lcmF0ZUlubmVyTGFiZWwoZmllbGREYXRhLCBjdXN0b21DbGFzcyldO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBbXTtcbiAgfVxufVxuXG5mdW5jdGlvbiBnZW5lcmF0ZUhlbHBNZXNzYWdlKGlzSG9yaXpvbnRhbDogYm9vbGVhbiwgZmllbGREYXRhQXR0cnM6IEZpZWxkRGF0YUF0dHJzKTogVk5vZGUge1xuICBjb25zdCBzaG93SGVscE1lc3NhZ2UgPSAhaXNIb3Jpem9udGFsICYmICEhZmllbGREYXRhQXR0cnMubWVzc2FnZS52YWx1ZTtcbiAgcmV0dXJuIHdpdGhEaXJlY3RpdmVzKFxuICAgIGgoJ3AnLCB7XG4gICAgICBjbGFzczogWydoZWxwJywgZmllbGREYXRhQXR0cnMubWVzc2FnZVZhcmlhbnQudmFsdWVdLFxuICAgICAgJ2FyaWEtaGlkZGVuJzogc2hvd0hlbHBNZXNzYWdlLFxuICAgICAgaW5uZXJIVE1MOiBmaWVsZERhdGFBdHRycy5tZXNzYWdlLnZhbHVlXG4gICAgfSksXG4gICAgW1t2U2hvdywgc2hvd0hlbHBNZXNzYWdlXV1cbiAgKTtcbn1cblxuZnVuY3Rpb24gZ2VuZXJhdGVCb2R5KGlzSG9yaXpvbnRhbDogYm9vbGVhbiwgZmllbGREYXRhOiBGaWVsZERhdGFBdHRycywgcm9sZTogc3RyaW5nLCBzbG90czogU2xvdHMpOiBWTm9kZVtdIHtcbiAgaWYgKGlzSG9yaXpvbnRhbCkge1xuICAgIHJldHVybiBbXG4gICAgICBoKFxuICAgICAgICBCRmllbGRCb2R5LCAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgICAgIHtcbiAgICAgICAgICBjbGFzczogeyAnaXMtZXhwYW5kZWQnOiBmaWVsZERhdGEuaXNFeHBhbmRlZC52YWx1ZSB9LFxuICAgICAgICAgIG1lc3NhZ2U6IGZpZWxkRGF0YS5tZXNzYWdlLnZhbHVlLFxuICAgICAgICAgIHZhcmlhbnQ6IGZpZWxkRGF0YS5tZXNzYWdlVmFyaWFudC52YWx1ZSxcbiAgICAgICAgICByb2xlXG4gICAgICAgIH0sXG4gICAgICAgIHNsb3RzLmRlZmF1bHRcbiAgICAgIClcbiAgICBdO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBzbG90cy5kZWZhdWx0ID8gc2xvdHMuZGVmYXVsdCgpIDogW107XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0RmllbGRUeXBlKGlzR3JvdXBlZDogYm9vbGVhbiwgaGFzQWRkb25zOiBib29sZWFuLCBpc0hvcml6b250YWw6IGJvb2xlYW4sIHNsb3RzOiBTbG90cyk6IHN0cmluZyB7XG4gIHJldHVybiBpc0dyb3VwZWRcbiAgICA/ICdpcy1ncm91cGVkJ1xuICAgIDogaGFzQWRkb25zICYmICFpc0hvcml6b250YWwgJiYgc2xvdHMuZGVmYXVsdCAmJiBzbG90cy5kZWZhdWx0KCkuZmlsdGVyKG4gPT4gISFuLmVsKS5sZW5ndGggPiAxXG4gICAgPyAnaGFzLWFkZG9ucydcbiAgICA6ICcnO1xufVxuXG5jb25zdCBCRmllbGQgPSBkZWZpbmVDb21wb25lbnQoe1xuICBuYW1lOiAnYi1maWVsZCcsXG4gIHByb3BzOiBCRmllbGRQcm9wc0RlZmluaXRpb24sXG4gIHNldHVwKHByb3BzLCB7IHNsb3RzIH0pIHtcbiAgICBjb25zdCBmaWVsZCA9IHNoYWxsb3dSZWYoKG51bGwgYXMgdW5rbm93bikgYXMgSFRNTEVsZW1lbnQpO1xuICAgIGNvbnN0IGZpZWxkRGF0YSA9IHByb3ZpZGVGaWVsZERhdGEocHJvcHMpO1xuICAgIGNvbnN0IGNsYXNzZXMgPSBnZXRGaWVsZENsYXNzZXMocHJvcHMpO1xuICAgIGNvbnN0IHJvbGUgPSBjb21wdXRlZCgoKSA9PiAocHJvcHMuaXNHcm91cGVkID8gJ2dyb3VwJyA6ICcnKSk7XG4gICAgY29uc3Qgc2l6ZSA9IHNoYWxsb3dSZWYoJycpO1xuICAgIHdhdGNoKGZpZWxkLCBuZXdWYWwgPT4ge1xuICAgICAgaWYgKHByb3BzLmlzSG9yaXpvbnRhbCAmJiBuZXdWYWwpIHtcbiAgICAgICAgLy8gQnVsbWEgZG9jczogLmlzLW5vcm1hbCBmb3IgYW55IC5pbnB1dCBvciAuYnV0dG9uXG4gICAgICAgIGNvbnN0IGVsZW1lbnRzID0gbmV3VmFsLnF1ZXJ5U2VsZWN0b3JBbGwoJy5pbnB1dCwgLnNlbGVjdCwgLmJ1dHRvbiwgLnRleHRhcmVhJyk7XG4gICAgICAgIGlmIChlbGVtZW50cy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgc2l6ZS52YWx1ZSA9ICdpcy1ub3JtYWwnO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIHJldHVybiBoKFxuICAgICAgICAnZGl2JyxcbiAgICAgICAge1xuICAgICAgICAgIHJlZjogZmllbGQsXG4gICAgICAgICAgY2xhc3M6IFsnZmllbGQnLCBjbGFzc2VzLnZhbHVlLCBnZXRGaWVsZFR5cGUocHJvcHMuaXNHcm91cGVkLCBwcm9wcy5oYXNBZGRvbnMsIHByb3BzLmlzSG9yaXpvbnRhbCwgc2xvdHMpXSxcbiAgICAgICAgICByb2xlOiByb2xlLnZhbHVlXG4gICAgICAgIH0sXG4gICAgICAgIFtcbiAgICAgICAgICBnZW5lcmF0ZUxhYmVsKHByb3BzLmlzSG9yaXpvbnRhbCwgZmllbGREYXRhLmF0dHJzLCBwcm9wcy5jdXN0b21MYWJlbENsYXNzLCBzaXplLnZhbHVlKSxcbiAgICAgICAgICAuLi5nZW5lcmF0ZUJvZHkocHJvcHMuaXNIb3Jpem9udGFsLCBmaWVsZERhdGEuYXR0cnMsIHJvbGUudmFsdWUsIHNsb3RzKSxcbiAgICAgICAgICBnZW5lcmF0ZUhlbHBNZXNzYWdlKHByb3BzLmlzSG9yaXpvbnRhbCwgZmllbGREYXRhLmF0dHJzKVxuICAgICAgICBdXG4gICAgICApO1xuICAgIH07XG4gIH1cbn0pO1xuXG5leHBvcnQgaW50ZXJmYWNlIEJGaWVsZEJvZHlQcm9wcyB7XG4gIG1lc3NhZ2U/OiBzdHJpbmc7XG4gIHZhcmlhbnQ/OiBBbGxDb2xvcnNWYXJpYW50O1xuICB0YWc/OiBzdHJpbmc7XG59XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuZnVuY3Rpb24gQkZpZWxkQm9keShwcm9wczogQkZpZWxkQm9keVByb3BzLCB7IGF0dHJzLCBzbG90cyB9OiBTZXR1cENvbnRleHQpIHtcbiAgY29uc3Qgbm9kZXMgPSBzbG90cy5kZWZhdWx0ID8gc2xvdHMuZGVmYXVsdCgpIDogW107XG4gIHJldHVybiBoKFxuICAgIHByb3BzLnRhZyA/PyAnZGl2JyxcbiAgICB7XG4gICAgICBjbGFzczogbWVyZ2VDbGFzc2VzKGF0dHJzLmNsYXNzIGFzIENsYXNzZXMsICdmaWVsZC1ib2R5JylcbiAgICB9LFxuICAgIG5vZGVzLm1hcCgoZWxlbWVudDogVk5vZGUpID0+IChlbGVtZW50LmVsID8gZWxlbWVudCA6IGgoQkZpZWxkLCBwcm9wcywgY29uc3RhbnQoZWxlbWVudCkpKSlcbiAgKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgQkZpZWxkO1xuIl19