import { getUseSelectablePropsDefinition, useSelectionControl as useControl } from '../../../composables/selectionControl/useSelectionControl';
import { defineComponent, shallowRef, h } from 'vue';
function generateCheck(variant) {
    return h('span', { class: [variant, 'check'] });
}
function generateInput(selectionControl) {
    return h('input', {
        ...selectionControl.attrs.value,
        onBlur: selectionControl.onBlur,
        onChange: selectionControl.onChange,
        onFocus: selectionControl.onFocus
    });
}
function generateLabelText(selectionControl, slots) {
    return h('span', {
        class: 'control-label'
    }, slots.default && slots.default());
}
export function useSelectionControl(role, type, name, staticClass) {
    return () => defineComponent({
        name,
        props: getUseSelectablePropsDefinition(),
        setup(props, { slots }) {
            const label = shallowRef(null);
            const selection = useControl(props, label, role, type);
            return () => {
                return h('label', {
                    class: [staticClass, props.size, { 'is-disabled': selection.isDisabled.value }],
                    ref: label,
                    id: selection.label.labelId.value,
                    for: selection.label.id.value,
                    disabled: selection.isDisabled.value || null,
                    tabindex: selection.isDisabled.value ? -1 : 0,
                    onKeydown: selection.onKeydown,
                    onBlur: selection.onBlur,
                    onClick: selection.onClick
                }, [generateInput(selection), generateCheck(props.variant), generateLabelText(selection, slots)]);
            };
        }
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlU2VsZWN0aW9uQ29udHJvbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL2Zvcm0vc2hhcmVkL3VzZVNlbGVjdGlvbkNvbnRyb2wudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNMLCtCQUErQixFQUcvQixtQkFBbUIsSUFBSSxVQUFVLEVBQ2xDLE1BQU0sMkRBQTJELENBQUM7QUFFbkUsT0FBTyxFQUFFLGVBQWUsRUFBRSxVQUFVLEVBQVMsQ0FBQyxFQUFFLE1BQU0sS0FBSyxDQUFDO0FBRTVELFNBQVMsYUFBYSxDQUFDLE9BQXFCO0lBQzFDLE9BQU8sQ0FBQyxDQUFDLE1BQU0sRUFBRSxFQUFFLEtBQUssRUFBRSxDQUFDLE9BQU8sRUFBRSxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDbEQsQ0FBQztBQUVELFNBQVMsYUFBYSxDQUFDLGdCQUFrQztJQUN2RCxPQUFPLENBQUMsQ0FBQyxPQUFPLEVBQUU7UUFDaEIsR0FBRyxnQkFBZ0IsQ0FBQyxLQUFLLENBQUMsS0FBSztRQUMvQixNQUFNLEVBQUUsZ0JBQWdCLENBQUMsTUFBTTtRQUMvQixRQUFRLEVBQUUsZ0JBQWdCLENBQUMsUUFBUTtRQUNuQyxPQUFPLEVBQUUsZ0JBQWdCLENBQUMsT0FBTztLQUNsQyxDQUFDLENBQUM7QUFDTCxDQUFDO0FBRUQsU0FBUyxpQkFBaUIsQ0FBQyxnQkFBa0MsRUFBRSxLQUFZO0lBQ3pFLE9BQU8sQ0FBQyxDQUNOLE1BQU0sRUFDTjtRQUNFLEtBQUssRUFBRSxlQUFlO0tBQ3ZCLEVBQ0QsS0FBSyxDQUFDLE9BQU8sSUFBSSxLQUFLLENBQUMsT0FBTyxFQUFFLENBQ2pDLENBQUM7QUFDSixDQUFDO0FBRUQsTUFBTSxVQUFVLG1CQUFtQixDQUFDLElBQVksRUFBRSxJQUFZLEVBQUUsSUFBWSxFQUFFLFdBQW1CO0lBQy9GLE9BQU8sR0FBTSxFQUFFLENBQ2IsZUFBZSxDQUFDO1FBQ2QsSUFBSTtRQUNKLEtBQUssRUFBRSwrQkFBK0IsRUFBSztRQUMzQyxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsS0FBSyxFQUFFO1lBQ3BCLE1BQU0sS0FBSyxHQUFHLFVBQVUsQ0FBRSxJQUErQixDQUFDLENBQUM7WUFDM0QsTUFBTSxTQUFTLEdBQUcsVUFBVSxDQUFDLEtBQThCLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztZQUNoRixPQUFPLEdBQUcsRUFBRTtnQkFDVixPQUFPLENBQUMsQ0FDTixPQUFPLEVBQ1A7b0JBQ0UsS0FBSyxFQUFFLENBQUMsV0FBVyxFQUFFLEtBQUssQ0FBQyxJQUFJLEVBQUUsRUFBRSxhQUFhLEVBQUUsU0FBUyxDQUFDLFVBQVUsQ0FBQyxLQUFLLEVBQUUsQ0FBQztvQkFDL0UsR0FBRyxFQUFFLEtBQUs7b0JBQ1YsRUFBRSxFQUFFLFNBQVMsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUs7b0JBQ2pDLEdBQUcsRUFBRSxTQUFTLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxLQUFLO29CQUM3QixRQUFRLEVBQUUsU0FBUyxDQUFDLFVBQVUsQ0FBQyxLQUFLLElBQUksSUFBSTtvQkFDNUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDN0MsU0FBUyxFQUFFLFNBQVMsQ0FBQyxTQUFTO29CQUM5QixNQUFNLEVBQUUsU0FBUyxDQUFDLE1BQU07b0JBQ3hCLE9BQU8sRUFBRSxTQUFTLENBQUMsT0FBTztpQkFDM0IsRUFDRCxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUMsRUFBRSxhQUFhLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxFQUFFLGlCQUFpQixDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUM5RixDQUFDO1lBQ0osQ0FBQyxDQUFDO1FBQ0osQ0FBQztLQUNGLENBQUMsQ0FBQztBQUNQLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBnZXRVc2VTZWxlY3RhYmxlUHJvcHNEZWZpbml0aW9uLFxuICBTZWxlY3Rpb25Db250cm9sLFxuICBVc2VTZWxlY3RhYmxlUHJvcHMsXG4gIHVzZVNlbGVjdGlvbkNvbnRyb2wgYXMgdXNlQ29udHJvbFxufSBmcm9tICcuLi8uLi8uLi9jb21wb3NhYmxlcy9zZWxlY3Rpb25Db250cm9sL3VzZVNlbGVjdGlvbkNvbnRyb2wnO1xuaW1wb3J0IHsgQ29sb3JWYXJpYW50IH0gZnJvbSAnLi4vLi4vLi4vdHlwZXMvQ29sb3JWYXJpYW50cyc7XG5pbXBvcnQgeyBkZWZpbmVDb21wb25lbnQsIHNoYWxsb3dSZWYsIFNsb3RzLCBoIH0gZnJvbSAndnVlJztcblxuZnVuY3Rpb24gZ2VuZXJhdGVDaGVjayh2YXJpYW50OiBDb2xvclZhcmlhbnQpIHtcbiAgcmV0dXJuIGgoJ3NwYW4nLCB7IGNsYXNzOiBbdmFyaWFudCwgJ2NoZWNrJ10gfSk7XG59XG5cbmZ1bmN0aW9uIGdlbmVyYXRlSW5wdXQoc2VsZWN0aW9uQ29udHJvbDogU2VsZWN0aW9uQ29udHJvbCkge1xuICByZXR1cm4gaCgnaW5wdXQnLCB7XG4gICAgLi4uc2VsZWN0aW9uQ29udHJvbC5hdHRycy52YWx1ZSxcbiAgICBvbkJsdXI6IHNlbGVjdGlvbkNvbnRyb2wub25CbHVyLFxuICAgIG9uQ2hhbmdlOiBzZWxlY3Rpb25Db250cm9sLm9uQ2hhbmdlLFxuICAgIG9uRm9jdXM6IHNlbGVjdGlvbkNvbnRyb2wub25Gb2N1c1xuICB9KTtcbn1cblxuZnVuY3Rpb24gZ2VuZXJhdGVMYWJlbFRleHQoc2VsZWN0aW9uQ29udHJvbDogU2VsZWN0aW9uQ29udHJvbCwgc2xvdHM6IFNsb3RzKSB7XG4gIHJldHVybiBoKFxuICAgICdzcGFuJyxcbiAgICB7XG4gICAgICBjbGFzczogJ2NvbnRyb2wtbGFiZWwnXG4gICAgfSxcbiAgICBzbG90cy5kZWZhdWx0ICYmIHNsb3RzLmRlZmF1bHQoKVxuICApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdXNlU2VsZWN0aW9uQ29udHJvbChyb2xlOiBzdHJpbmcsIHR5cGU6IHN0cmluZywgbmFtZTogc3RyaW5nLCBzdGF0aWNDbGFzczogc3RyaW5nKSB7XG4gIHJldHVybiA8VD4oKSA9PlxuICAgIGRlZmluZUNvbXBvbmVudCh7XG4gICAgICBuYW1lLFxuICAgICAgcHJvcHM6IGdldFVzZVNlbGVjdGFibGVQcm9wc0RlZmluaXRpb248VD4oKSxcbiAgICAgIHNldHVwKHByb3BzLCB7IHNsb3RzIH0pIHtcbiAgICAgICAgY29uc3QgbGFiZWwgPSBzaGFsbG93UmVmKChudWxsIGFzIHVua25vd24pIGFzIEhUTUxFbGVtZW50KTtcbiAgICAgICAgY29uc3Qgc2VsZWN0aW9uID0gdXNlQ29udHJvbChwcm9wcyBhcyBVc2VTZWxlY3RhYmxlUHJvcHM8VD4sIGxhYmVsLCByb2xlLCB0eXBlKTtcbiAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICByZXR1cm4gaChcbiAgICAgICAgICAgICdsYWJlbCcsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIGNsYXNzOiBbc3RhdGljQ2xhc3MsIHByb3BzLnNpemUsIHsgJ2lzLWRpc2FibGVkJzogc2VsZWN0aW9uLmlzRGlzYWJsZWQudmFsdWUgfV0sXG4gICAgICAgICAgICAgIHJlZjogbGFiZWwsXG4gICAgICAgICAgICAgIGlkOiBzZWxlY3Rpb24ubGFiZWwubGFiZWxJZC52YWx1ZSxcbiAgICAgICAgICAgICAgZm9yOiBzZWxlY3Rpb24ubGFiZWwuaWQudmFsdWUsXG4gICAgICAgICAgICAgIGRpc2FibGVkOiBzZWxlY3Rpb24uaXNEaXNhYmxlZC52YWx1ZSB8fCBudWxsLFxuICAgICAgICAgICAgICB0YWJpbmRleDogc2VsZWN0aW9uLmlzRGlzYWJsZWQudmFsdWUgPyAtMSA6IDAsXG4gICAgICAgICAgICAgIG9uS2V5ZG93bjogc2VsZWN0aW9uLm9uS2V5ZG93bixcbiAgICAgICAgICAgICAgb25CbHVyOiBzZWxlY3Rpb24ub25CbHVyLFxuICAgICAgICAgICAgICBvbkNsaWNrOiBzZWxlY3Rpb24ub25DbGlja1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFtnZW5lcmF0ZUlucHV0KHNlbGVjdGlvbiksIGdlbmVyYXRlQ2hlY2socHJvcHMudmFyaWFudCksIGdlbmVyYXRlTGFiZWxUZXh0KHNlbGVjdGlvbiwgc2xvdHMpXVxuICAgICAgICAgICk7XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfSk7XG59XG4iXX0=