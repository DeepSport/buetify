import './table.sass';
import { BTableColumn, BTableColumnData, BTableRow, BTableRowData, SortType } from './shared';
import { ColorVariant } from '../../types/ColorVariants';
import { Eq } from 'fp-ts/lib/Eq';
import { Option } from 'fp-ts/lib/Option';
import { Ord } from 'fp-ts/lib/Ord';
import Vue, { PropType, VNode } from 'vue';
import { PropValidator } from 'vue/types/options';
import { SizeVariant } from '../../types/SizeVariants';
interface Data {
    newRows: readonly BTableRow[];
    newSortColumn: Option<BTableColumnData<any>>;
    newSortType: SortType;
    newSelectedRows: readonly BTableRow[];
    newCheckedRows: readonly BTableRow[];
}
export declare const eqColumnTableData: Eq<BTableColumnData<any>>;
declare const _default: import("vue/types/vue").OptionsVue<Vue, Data, {
    checkSort(): void;
    sortByColumn(column: BTableColumnData<any>): void;
    sortRows(ord: Ord<BTableRow>): void;
    isCurrentSortColumn(column: BTableColumnData<any>): boolean;
    toggleAllRows(): void;
    checkAllRows(): void;
    uncheckAllRows(): void;
    getToggleRowCheck(row: BTableRow): () => void;
    toggleRowCheck(row: BTableRow): void;
    getToggleRowSelection(row: BTableRow): () => void;
    toggleRowSelection(row: BTableRow): void;
    selectAllRows(): void;
    unselectAllRows(): void;
    getDragListeners(row: BTableRow, index: number): {
        dragstart: (e: DragEvent) => import("vue/types/vue").CombinedVueInstance<Vue, Data, any, {
            internalCheckedRows: readonly BTableRow[];
            internalSelectedRows: readonly BTableRow[];
            internalSortType: SortType;
            internalSortColumn: Option<BTableColumnData<any>>;
            tableClasses: any;
            newColumns: readonly BTableColumn<any>[];
            allRowsUncheckable: boolean;
            allRowsChecked: boolean;
            hasCheckableRows: boolean;
            checkableRows: readonly BTableRow[];
            allRowsUnchecked: boolean;
            selectableRows: readonly BTableRow[];
            hasSortableColumns: boolean;
            displayMobileSorting: boolean;
            isEmpty: boolean;
            numberOfVisibleColumns: number;
            visibleColumns: readonly BTableColumn<any>[];
        }, Readonly<{
            isBordered: boolean;
            isStriped: boolean;
            isNarrow: boolean;
            isFullwidth: boolean;
            size: SizeVariant;
            isHoverable: boolean;
            isLoading: boolean;
            isCheckable: boolean;
            isScrollable: boolean;
            checkedRows: BTableRowData[];
            isSelectable: boolean;
            selectedRows: BTableRowData[];
            columns: BTableColumnData<any>[];
            rows: BTableRowData[];
            isDraggable: boolean;
            sortColumn: BTableColumnData<any> | undefined;
            sortType: SortType;
            isFocusable: boolean;
            useMobileCards: boolean;
            mobileSortPlaceholder: string;
            checkboxVariant: string;
            headerClasses: any;
        }>>;
        drop: (e: DragEvent) => import("vue/types/vue").CombinedVueInstance<Vue, Data, any, {
            internalCheckedRows: readonly BTableRow[];
            internalSelectedRows: readonly BTableRow[];
            internalSortType: SortType;
            internalSortColumn: Option<BTableColumnData<any>>;
            tableClasses: any;
            newColumns: readonly BTableColumn<any>[];
            allRowsUncheckable: boolean;
            allRowsChecked: boolean;
            hasCheckableRows: boolean;
            checkableRows: readonly BTableRow[];
            allRowsUnchecked: boolean;
            selectableRows: readonly BTableRow[];
            hasSortableColumns: boolean;
            displayMobileSorting: boolean;
            isEmpty: boolean;
            numberOfVisibleColumns: number;
            visibleColumns: readonly BTableColumn<any>[];
        }, Readonly<{
            isBordered: boolean;
            isStriped: boolean;
            isNarrow: boolean;
            isFullwidth: boolean;
            size: SizeVariant;
            isHoverable: boolean;
            isLoading: boolean;
            isCheckable: boolean;
            isScrollable: boolean;
            checkedRows: BTableRowData[];
            isSelectable: boolean;
            selectedRows: BTableRowData[];
            columns: BTableColumnData<any>[];
            rows: BTableRowData[];
            isDraggable: boolean;
            sortColumn: BTableColumnData<any> | undefined;
            sortType: SortType;
            isFocusable: boolean;
            useMobileCards: boolean;
            mobileSortPlaceholder: string;
            checkboxVariant: string;
            headerClasses: any;
        }>>;
        dragenter: (e: DragEvent) => import("vue/types/vue").CombinedVueInstance<Vue, Data, any, {
            internalCheckedRows: readonly BTableRow[];
            internalSelectedRows: readonly BTableRow[];
            internalSortType: SortType;
            internalSortColumn: Option<BTableColumnData<any>>;
            tableClasses: any;
            newColumns: readonly BTableColumn<any>[];
            allRowsUncheckable: boolean;
            allRowsChecked: boolean;
            hasCheckableRows: boolean;
            checkableRows: readonly BTableRow[];
            allRowsUnchecked: boolean;
            selectableRows: readonly BTableRow[];
            hasSortableColumns: boolean;
            displayMobileSorting: boolean;
            isEmpty: boolean;
            numberOfVisibleColumns: number;
            visibleColumns: readonly BTableColumn<any>[];
        }, Readonly<{
            isBordered: boolean;
            isStriped: boolean;
            isNarrow: boolean;
            isFullwidth: boolean;
            size: SizeVariant;
            isHoverable: boolean;
            isLoading: boolean;
            isCheckable: boolean;
            isScrollable: boolean;
            checkedRows: BTableRowData[];
            isSelectable: boolean;
            selectedRows: BTableRowData[];
            columns: BTableColumnData<any>[];
            rows: BTableRowData[];
            isDraggable: boolean;
            sortColumn: BTableColumnData<any> | undefined;
            sortType: SortType;
            isFocusable: boolean;
            useMobileCards: boolean;
            mobileSortPlaceholder: string;
            checkboxVariant: string;
            headerClasses: any;
        }>>;
        dragleave: (e: DragEvent) => import("vue/types/vue").CombinedVueInstance<Vue, Data, any, {
            internalCheckedRows: readonly BTableRow[];
            internalSelectedRows: readonly BTableRow[];
            internalSortType: SortType;
            internalSortColumn: Option<BTableColumnData<any>>;
            tableClasses: any;
            newColumns: readonly BTableColumn<any>[];
            allRowsUncheckable: boolean;
            allRowsChecked: boolean;
            hasCheckableRows: boolean;
            checkableRows: readonly BTableRow[];
            allRowsUnchecked: boolean;
            selectableRows: readonly BTableRow[];
            hasSortableColumns: boolean;
            displayMobileSorting: boolean;
            isEmpty: boolean;
            numberOfVisibleColumns: number;
            visibleColumns: readonly BTableColumn<any>[];
        }, Readonly<{
            isBordered: boolean;
            isStriped: boolean;
            isNarrow: boolean;
            isFullwidth: boolean;
            size: SizeVariant;
            isHoverable: boolean;
            isLoading: boolean;
            isCheckable: boolean;
            isScrollable: boolean;
            checkedRows: BTableRowData[];
            isSelectable: boolean;
            selectedRows: BTableRowData[];
            columns: BTableColumnData<any>[];
            rows: BTableRowData[];
            isDraggable: boolean;
            sortColumn: BTableColumnData<any> | undefined;
            sortType: SortType;
            isFocusable: boolean;
            useMobileCards: boolean;
            mobileSortPlaceholder: string;
            checkboxVariant: string;
            headerClasses: any;
        }>>;
    };
    onNewSortType(sortType: SortType): void;
    onNewSortColumn(column: BTableColumnData<any>): void;
    hasCustomFooterSlot(): boolean;
    generateMobileSort(): VNode;
    generateTableHeader(): VNode;
    generateEmptyTable(): VNode;
    generateRow(row: BTableRow, index: number): VNode;
    generateNonEmptyTable(): VNode;
    generateTableBody(): VNode;
    generateTableFooter(): VNode;
    generateTable(): VNode;
}, {
    internalCheckedRows: readonly BTableRow[];
    internalSelectedRows: readonly BTableRow[];
    internalSortType: SortType;
    internalSortColumn: Option<BTableColumnData<any>>;
    tableClasses: any;
    newColumns: readonly BTableColumn<any>[];
    allRowsUncheckable: boolean;
    allRowsChecked: boolean;
    hasCheckableRows: boolean;
    checkableRows: readonly BTableRow[];
    allRowsUnchecked: boolean;
    selectableRows: readonly BTableRow[];
    hasSortableColumns: boolean;
    displayMobileSorting: boolean;
    isEmpty: boolean;
    numberOfVisibleColumns: number;
    visibleColumns: readonly BTableColumn<any>[];
}, {
    isBordered: boolean;
    isStriped: boolean;
    isNarrow: boolean;
    isFullwidth: boolean;
    size: SizeVariant;
    isHoverable: boolean;
    isLoading: boolean;
    isCheckable: boolean;
    isScrollable: boolean;
    checkedRows: BTableRowData[];
    isSelectable: boolean;
    selectedRows: BTableRowData[];
    columns: BTableColumnData<any>[];
    rows: BTableRowData[];
    isDraggable: boolean;
    sortColumn: BTableColumnData<any> | undefined;
    sortType: SortType;
    isFocusable: boolean;
    useMobileCards: boolean;
    mobileSortPlaceholder: string;
    checkboxVariant: string;
    headerClasses: any;
}, {
    name: string;
    props: {
        isBordered: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        isStriped: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        isNarrow: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        isFullwidth: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        size: PropValidator<SizeVariant>;
        isHoverable: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        isLoading: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        isCheckable: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        isScrollable: {
            type: BooleanConstructor;
            default: boolean;
        };
        checkedRows: {
            type: PropType<BTableRowData[]>;
            default: import("fp-ts/lib/function").Lazy<never[]>;
        };
        isSelectable: {
            type: BooleanConstructor;
            default: boolean;
        };
        selectedRows: {
            type: PropType<BTableRowData[]>;
            default: import("fp-ts/lib/function").Lazy<never[]>;
        };
        columns: {
            type: PropType<BTableColumnData<any>[]>;
            required: true;
        };
        rows: {
            type: PropType<BTableRowData[]>;
            required: true;
        };
        isDraggable: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        sortColumn: PropValidator<BTableColumnData<any> | undefined>;
        sortType: PropValidator<SortType>;
        isFocusable: {
            type: BooleanConstructor;
            default: boolean;
        };
        useMobileCards: {
            type: BooleanConstructor;
            default: boolean;
        };
        mobileSortPlaceholder: {
            type: StringConstructor;
        };
        checkboxVariant: {
            type: (new (...args: string[]) => Function) | (() => ColorVariant) | (new (...args: never[]) => never) | import("vue/types/options").Prop<ColorVariant>[];
            required: false;
            default: string;
        };
        headerClasses: {
            type: (ObjectConstructor | StringConstructor | ArrayConstructor)[];
            default: undefined;
        };
    };
    data(this: import("vue/types/vue").CombinedVueInstance<Vue, unknown, unknown, unknown, Readonly<{
        isBordered: boolean;
        isStriped: boolean;
        isNarrow: boolean;
        isFullwidth: boolean;
        size: SizeVariant;
        isHoverable: boolean;
        isLoading: boolean;
        isCheckable: boolean;
        isScrollable: boolean;
        checkedRows: BTableRowData[];
        isSelectable: boolean;
        selectedRows: BTableRowData[];
        columns: BTableColumnData<any>[];
        rows: BTableRowData[];
        isDraggable: boolean;
        sortColumn: BTableColumnData<any> | undefined;
        sortType: SortType;
        isFocusable: boolean;
        useMobileCards: boolean;
        mobileSortPlaceholder: string;
        checkboxVariant: string;
        headerClasses: any;
    }>>): Data;
    computed: {
        internalCheckedRows: {
            get(): readonly BTableRow[];
            set(val: readonly BTableRow[]): void;
        };
        internalSelectedRows: {
            get(): readonly BTableRow[];
            set(val: readonly BTableRow[]): void;
        };
        internalSortType: {
            get(): SortType;
            set(val: SortType): void;
        };
        internalSortColumn: {
            get(): Option<BTableColumnData<any>>;
            set(val: Option<BTableColumnData<any>>): void;
        };
        tableClasses(): any;
        newColumns(): readonly BTableColumn<any>[];
        allRowsUncheckable(): boolean;
        allRowsChecked(): boolean;
        hasCheckableRows(): boolean;
        checkableRows(): readonly BTableRow[];
        allRowsUnchecked(): boolean;
        selectableRows(): readonly BTableRow[];
        hasSortableColumns(): boolean;
        displayMobileSorting(): boolean;
        isEmpty(): boolean;
        numberOfVisibleColumns(): number;
        visibleColumns(): readonly BTableColumn<any>[];
    };
    watch: {
        rows(): void;
        sortColumn(newVal: BTableColumnData<any> | undefined, oldVal: BTableColumnData<any> | undefined): void;
        sortType(newVal: SortType, oldVal: SortType): void;
        checkedRows(): void;
        selectedRows(): void;
    };
    methods: {
        checkSort(): void;
        sortByColumn(column: BTableColumnData<any>): void;
        sortRows(ord: Ord<BTableRow>): void;
        isCurrentSortColumn(column: BTableColumnData<any>): boolean;
        toggleAllRows(): void;
        checkAllRows(): void;
        uncheckAllRows(): void;
        getToggleRowCheck(row: BTableRow): () => void;
        toggleRowCheck(row: BTableRow): void;
        getToggleRowSelection(row: BTableRow): () => void;
        toggleRowSelection(row: BTableRow): void;
        selectAllRows(): void;
        unselectAllRows(): void;
        getDragListeners(row: BTableRow, index: number): {
            dragstart: (e: DragEvent) => import("vue/types/vue").CombinedVueInstance<Vue, Data, any, {
                internalCheckedRows: readonly BTableRow[];
                internalSelectedRows: readonly BTableRow[];
                internalSortType: SortType;
                internalSortColumn: Option<BTableColumnData<any>>;
                tableClasses: any;
                newColumns: readonly BTableColumn<any>[];
                allRowsUncheckable: boolean;
                allRowsChecked: boolean;
                hasCheckableRows: boolean;
                checkableRows: readonly BTableRow[];
                allRowsUnchecked: boolean;
                selectableRows: readonly BTableRow[];
                hasSortableColumns: boolean;
                displayMobileSorting: boolean;
                isEmpty: boolean;
                numberOfVisibleColumns: number;
                visibleColumns: readonly BTableColumn<any>[];
            }, Readonly<{
                isBordered: boolean;
                isStriped: boolean;
                isNarrow: boolean;
                isFullwidth: boolean;
                size: SizeVariant;
                isHoverable: boolean;
                isLoading: boolean;
                isCheckable: boolean;
                isScrollable: boolean;
                checkedRows: BTableRowData[];
                isSelectable: boolean;
                selectedRows: BTableRowData[];
                columns: BTableColumnData<any>[];
                rows: BTableRowData[];
                isDraggable: boolean;
                sortColumn: BTableColumnData<any> | undefined;
                sortType: SortType;
                isFocusable: boolean;
                useMobileCards: boolean;
                mobileSortPlaceholder: string;
                checkboxVariant: string;
                headerClasses: any;
            }>>;
            drop: (e: DragEvent) => import("vue/types/vue").CombinedVueInstance<Vue, Data, any, {
                internalCheckedRows: readonly BTableRow[];
                internalSelectedRows: readonly BTableRow[];
                internalSortType: SortType;
                internalSortColumn: Option<BTableColumnData<any>>;
                tableClasses: any;
                newColumns: readonly BTableColumn<any>[];
                allRowsUncheckable: boolean;
                allRowsChecked: boolean;
                hasCheckableRows: boolean;
                checkableRows: readonly BTableRow[];
                allRowsUnchecked: boolean;
                selectableRows: readonly BTableRow[];
                hasSortableColumns: boolean;
                displayMobileSorting: boolean;
                isEmpty: boolean;
                numberOfVisibleColumns: number;
                visibleColumns: readonly BTableColumn<any>[];
            }, Readonly<{
                isBordered: boolean;
                isStriped: boolean;
                isNarrow: boolean;
                isFullwidth: boolean;
                size: SizeVariant;
                isHoverable: boolean;
                isLoading: boolean;
                isCheckable: boolean;
                isScrollable: boolean;
                checkedRows: BTableRowData[];
                isSelectable: boolean;
                selectedRows: BTableRowData[];
                columns: BTableColumnData<any>[];
                rows: BTableRowData[];
                isDraggable: boolean;
                sortColumn: BTableColumnData<any> | undefined;
                sortType: SortType;
                isFocusable: boolean;
                useMobileCards: boolean;
                mobileSortPlaceholder: string;
                checkboxVariant: string;
                headerClasses: any;
            }>>;
            dragenter: (e: DragEvent) => import("vue/types/vue").CombinedVueInstance<Vue, Data, any, {
                internalCheckedRows: readonly BTableRow[];
                internalSelectedRows: readonly BTableRow[];
                internalSortType: SortType;
                internalSortColumn: Option<BTableColumnData<any>>;
                tableClasses: any;
                newColumns: readonly BTableColumn<any>[];
                allRowsUncheckable: boolean;
                allRowsChecked: boolean;
                hasCheckableRows: boolean;
                checkableRows: readonly BTableRow[];
                allRowsUnchecked: boolean;
                selectableRows: readonly BTableRow[];
                hasSortableColumns: boolean;
                displayMobileSorting: boolean;
                isEmpty: boolean;
                numberOfVisibleColumns: number;
                visibleColumns: readonly BTableColumn<any>[];
            }, Readonly<{
                isBordered: boolean;
                isStriped: boolean;
                isNarrow: boolean;
                isFullwidth: boolean;
                size: SizeVariant;
                isHoverable: boolean;
                isLoading: boolean;
                isCheckable: boolean;
                isScrollable: boolean;
                checkedRows: BTableRowData[];
                isSelectable: boolean;
                selectedRows: BTableRowData[];
                columns: BTableColumnData<any>[];
                rows: BTableRowData[];
                isDraggable: boolean;
                sortColumn: BTableColumnData<any> | undefined;
                sortType: SortType;
                isFocusable: boolean;
                useMobileCards: boolean;
                mobileSortPlaceholder: string;
                checkboxVariant: string;
                headerClasses: any;
            }>>;
            dragleave: (e: DragEvent) => import("vue/types/vue").CombinedVueInstance<Vue, Data, any, {
                internalCheckedRows: readonly BTableRow[];
                internalSelectedRows: readonly BTableRow[];
                internalSortType: SortType;
                internalSortColumn: Option<BTableColumnData<any>>;
                tableClasses: any;
                newColumns: readonly BTableColumn<any>[];
                allRowsUncheckable: boolean;
                allRowsChecked: boolean;
                hasCheckableRows: boolean;
                checkableRows: readonly BTableRow[];
                allRowsUnchecked: boolean;
                selectableRows: readonly BTableRow[];
                hasSortableColumns: boolean;
                displayMobileSorting: boolean;
                isEmpty: boolean;
                numberOfVisibleColumns: number;
                visibleColumns: readonly BTableColumn<any>[];
            }, Readonly<{
                isBordered: boolean;
                isStriped: boolean;
                isNarrow: boolean;
                isFullwidth: boolean;
                size: SizeVariant;
                isHoverable: boolean;
                isLoading: boolean;
                isCheckable: boolean;
                isScrollable: boolean;
                checkedRows: BTableRowData[];
                isSelectable: boolean;
                selectedRows: BTableRowData[];
                columns: BTableColumnData<any>[];
                rows: BTableRowData[];
                isDraggable: boolean;
                sortColumn: BTableColumnData<any> | undefined;
                sortType: SortType;
                isFocusable: boolean;
                useMobileCards: boolean;
                mobileSortPlaceholder: string;
                checkboxVariant: string;
                headerClasses: any;
            }>>;
        };
        onNewSortType(sortType: SortType): void;
        onNewSortColumn(column: BTableColumnData<any>): void;
        hasCustomFooterSlot(): boolean;
        generateMobileSort(): VNode;
        generateTableHeader(): VNode;
        generateEmptyTable(): VNode;
        generateRow(row: BTableRow, index: number): VNode;
        generateNonEmptyTable(): VNode;
        generateTableBody(): VNode;
        generateTableFooter(): VNode;
        generateTable(): VNode;
    };
    render(): VNode;
}>;
export default _default;
